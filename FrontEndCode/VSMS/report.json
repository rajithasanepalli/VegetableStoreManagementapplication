[{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\coverage\\darma\\block-navigation.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\coverage\\darma\\prettify.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\coverage\\darma\\sorter.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\app-routing.module.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Routes' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ComponentLayoutComponent } from './views/main-layout/component-layout/component-layout.component';\r\nimport { AuthGuard } from './shared/guards/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'login',\r\n    pathMatch: 'full'\r\n  },\r\n\r\n  {\r\n    path: 'login',\r\n    loadChildren: () =>\r\n      import('./views/login-layout/login-layout.module').then(\r\n        (m) => m.LoginLayoutModule\r\n      )\r\n  },\r\n  {\r\n    path: 'app',\r\n    component: ComponentLayoutComponent,\r\n    loadChildren: () =>\r\n      import('./views/main-layout/main-layout.module').then(\r\n        (m) => m.MainLayoutModule\r\n      ),\r\n    canActivate: [AuthGuard]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\app.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DebugElement' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is assigned a value but never used.","line":40,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":7}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TestBed, async } from '@angular/core/testing';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { AppComponent } from './app.component';\r\nimport { By } from '@angular/platform-browser';\r\nimport { DebugElement } from '@angular/core';\r\n\r\nlet de: DebugElement;\r\ndescribe('AppComponent', () => {\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [RouterTestingModule],\r\n      declarations: [AppComponent]\r\n    }).compileComponents();\r\n  }));\r\n\r\n  it('should create the app', () => {\r\n    const fixture = TestBed.createComponent(AppComponent);\r\n    const app = fixture.componentInstance;\r\n    expect(app).toBeTruthy();\r\n  });\r\n\r\n  it(`should have as title 'Drama'`, () => {\r\n    const fixture = TestBed.createComponent(AppComponent);\r\n    const app = fixture.componentInstance;\r\n    expect(app.title).toEqual('Drama');\r\n  });\r\n\r\n  // it('should render title', () => {\r\n  //   const fixture = TestBed.createComponent(AppComponent);\r\n  //   fixture.detectChanges();\r\n  //   const compiled = fixture.nativeElement;\r\n  //   expect(compiled.querySelector('.content span').textContent).toContain(\r\n  //     'Drama app is running!'\r\n  //   );\r\n  // });\r\n\r\n  it('div tag', () => {\r\n    const fixture = TestBed.createComponent(AppComponent);\r\n    const app = fixture.componentInstance; // BannerComponent test instance\r\n    de = fixture.debugElement.query(By.css('div'));\r\n    expect(app).toBeTruthy();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\app.component.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\app.module.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":36,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":36,"endColumn":62}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ApiService } from './shared/services/api.service';\r\nimport { SweetAlertService } from './shared/services/sweet-alert.service';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { BlockUIModule } from 'ng-block-ui';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpErrorInterceptor } from './shared/guards/interceptor/gobal-error-handling';\r\n\r\nimport { TokenInterceptor } from './shared/guards/interceptor/token.interceptor';\r\nimport { UserSessionService } from './shared/services/user-session.services';\r\nimport { PersistenceModule } from 'angular-persistence';\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  AuthGuard,\r\n  RevenueSourceAuthGuard,\r\n  RealEstateAuthGuard,\r\n  AdminTrainigAuthGuard\r\n} from './shared/guards/auth.guard';\r\n\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { DialogDataExampleDialog } from './shared/common-components/custom-model/custom-dialog';\r\n// import { adminTrainingUserCheck } from './shared/constants/utils';\r\n\r\nexport function createTranslateLoader(httpClient: HttpClient) {\r\n  return new TranslateHttpLoader(httpClient, './assets/i18n/', '.json');\r\n}\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, DialogDataExampleDialog],\r\n  imports: [\r\n    MatMenuModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    BrowserModule,\r\n    MatCardModule,\r\n    AppRoutingModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    MatDialogModule,\r\n    BlockUIModule.forRoot(),\r\n    PersistenceModule,\r\n    BrowserAnimationsModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: createTranslateLoader,\r\n        deps: [HttpClient]\r\n      }\r\n    })\r\n  ],\r\n  providers: [\r\n    AuthGuard,\r\n    RevenueSourceAuthGuard,\r\n    RealEstateAuthGuard,\r\n    AdminTrainigAuthGuard,\r\n    ApiService,\r\n    SweetAlertService,\r\n    UserSessionService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: HttpErrorInterceptor,\r\n      multi: true\r\n    },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptor,\r\n      multi: true\r\n    },\r\n    { provide: LocationStrategy, useClass: HashLocationStrategy }\r\n  ],\r\n\r\n  bootstrap: [AppComponent],\r\n  exports: [DialogDataExampleDialog]\r\n})\r\nexport class AppModule {}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\common-components\\bread-crumb-header\\bread-crumb-header.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { BreadCrumbHeaderComponent } from './bread-crumb-header.component';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  // HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\nimport { AuthenticateService } from '../../services/AuthService';\r\n// import { DebugElement } from '@angular/core';\r\nimport { ApiService } from '../../services/api.service';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { SweetAlertService } from '../../services/sweet-alert.service';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators } from '@angular/forms';\r\nimport { customModalData } from '../../model/applicationModel';\r\nimport { DialogDataExampleDialog } from '../custom-model/custom-dialog';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { of } from 'rxjs/internal/observable/of';\r\n\r\ndescribe('BreadCrumbHeaderComponent', () => {\r\n  let component: BreadCrumbHeaderComponent;\r\n  let fixture: ComponentFixture<BreadCrumbHeaderComponent>;\r\n  let router: Router;\r\n  // let apiService: ApiService;\r\n  // let authenticateService: AuthenticateService;\r\n  // let httpMock: HttpTestingController;\r\n  // let de: DebugElement;\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [BreadCrumbHeaderComponent],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(BreadCrumbHeaderComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should redirect the user to proper navigation when clicked on dashboard page', () => {\r\n    const spy = spyOn(router, 'navigateByUrl');\r\n    // spyOn(component, 'routeToDashboard').and.callThrough();\r\n    component.routeToDashboard();\r\n    expect(spy).toHaveBeenCalledWith('/app/dashboard');\r\n  });\r\n\r\n  it('should redirect the user to proper navigation when clicked on previous page', () => {\r\n    spyOn(component, 'routeToPrev').and.callThrough();\r\n    // const spy = spyOn(router, 'navigateByUrl');\r\n    component.previousUrl = '/app/dashboard';\r\n    component.routeToPrev();\r\n    const modalData = new customModalData();\r\n    modalData.icon = 'error';\r\n    modalData.text =\r\n      'You will lose the data that you entered before Save, Are you sure ?';\r\n    modalData.title = 'Are you sure';\r\n    modalData.delete = true;\r\n    modalData.buttonText = 'Yes';\r\n    modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n    const dialogRef = component.dialog.open(DialogDataExampleDialog, {\r\n      data: modalData\r\n    });\r\n    spyOn(dialogRef, 'afterClosed').and.returnValue(of(true));\r\n    // spyOn(component.dialog, 'open').and.returnValue({\r\n    //   afterClosed: () => of()\r\n    // });\r\n    // dialogRef.;\r\n    // component.dialog.open(DialogDataExampleDialog);\r\n    dialogRef.afterClosed();\r\n    expect(dialogRef.afterClosed).toHaveBeenCalledWith();\r\n    expect(component.routeToPrev).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should redirect the user to proper navigation when clicked on previous page', () => {\r\n    spyOn(component, 'routeToPrev').and.callThrough();\r\n    // const spy = spyOn(router, 'navigateByUrl');\r\n    component.previousUrl = '/app/revisions';\r\n    component.routeToPrev();\r\n    const modalData = new customModalData();\r\n    modalData.icon = 'error';\r\n    modalData.text =\r\n      'You will lose the data that you entered before Save, Are you sure ?';\r\n    modalData.title = 'Are you sure';\r\n    modalData.delete = true;\r\n    modalData.buttonText = 'Yes';\r\n    modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n    const dialogRef = component.dialog.open(DialogDataExampleDialog, {\r\n      data: modalData\r\n    });\r\n    spyOn(dialogRef, 'afterClosed').and.returnValue(of(true));\r\n    dialogRef.afterClosed().subscribe((data) => {\r\n      expect(data).toBeTruthy();\r\n    });\r\n    expect(dialogRef.afterClosed).toHaveBeenCalled();\r\n    expect(component.routeToPrev).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should redirect the user to proper navigation when clicked on previous page', () => {\r\n    const spy = spyOn(router, 'navigateByUrl');\r\n\r\n    component.routeToPrev();\r\n    expect(spy).toHaveBeenCalledWith('/app/real-estate/locations');\r\n  });\r\n\r\n  it('should redirect the user to proper navigation when clicked on realestate page', () => {\r\n    const spy = spyOn(router, 'navigateByUrl');\r\n    component.routeToTitle('REAL_ESTATE_DETAILS');\r\n    expect(spy).toHaveBeenCalledWith('/app/real-estate/locations');\r\n  });\r\n\r\n  it('should redirect the user to proper navigation when clicked on realestate page', () => {\r\n    // const spy = spyOn(router, 'navigateByUrl');\r\n    spyOn(component, 'routeToTitle').and.callThrough();\r\n    component.routeToTitle('');\r\n    expect(component.routeToTitle).toHaveBeenCalled();\r\n    // expect(spy).toHaveBeenCalledWith('/app/real-estate/locations');\r\n  });\r\n\r\n  it('should call returnCheck method and return true boolean value', () => {\r\n    spyOn(component, 'returnCheck').and.callThrough();\r\n    component.loggedUser = 'ROLE_DARMA_OWNER';\r\n    fixture.detectChanges();\r\n    component.returnCheck();\r\n    expect(component.returnCheck).toHaveBeenCalled();\r\n    // expect(result).toBeTruthy();\r\n  });\r\n\r\n  // it('should call returnCheck method and return false boolean value', () => {\r\n  //   spyOn(component, 'returnCheck').and.callThrough();\r\n  //   fixture.detectChanges();\r\n  //   const result = component.returnCheck();\r\n  //   expect(result).toBeFalsy();\r\n  // });\r\n\r\n  it('should call routeToPrev  method and return true boolean value', () => {\r\n    spyOn(component, 'routeToPrev').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.previousUrl = '/app/dashboard';\r\n    expect(component.previousUrl).toEqual('/app/dashboard');\r\n    component.routeToPrev();\r\n    expect(component.routeToPrev).toHaveBeenCalled();\r\n    // expect(result).toBeTruthy();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\common-components\\bread-crumb-header\\bread-crumb-header.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateService' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDialog' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":41,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":41,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":87,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":87,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":92,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":92,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'title' should be typed.","line":92,"column":16,"nodeType":"Identifier","messageId":"missingArgType","endLine":92,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":98,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":98,"endColumn":16}],"errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, Input } from '@angular/core';\r\n// OnInit\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Router } from '@angular/router';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { DialogDataExampleDialog } from '../../../shared/common-components/custom-model/custom-dialog';\r\nimport { customModalData } from '../../../shared/model/applicationModel';\r\nimport { UserResponseModel } from '../../model/loginApiResponse.model';\r\nimport get from 'lodash.get';\r\n\r\n@Component({\r\n  selector: 'app-bread-crumb-header',\r\n  templateUrl: './bread-crumb-header.component.html',\r\n  styleUrls: ['./bread-crumb-header.component.scss']\r\n})\r\nexport class BreadCrumbHeaderComponent {\r\n  @Input() titleName: string;\r\n  @Input() subTitle?: string;\r\n  @Input() mainTitle?: string;\r\n  @Input() previousUrl?: string;\r\n  @Input() back = false;\r\n  @Input() locationDetails?: string;\r\n  loggedUser: string;\r\n  constructor(\r\n    private router: Router,\r\n    public dialog: MatDialog,\r\n    private userSessionService: UserSessionService,\r\n    private translate: TranslateService\r\n  ) {\r\n    this.userSessionService.currentUser.subscribe(\r\n      (res: UserResponseModel) =>\r\n        (this.loggedUser = get(res, 'authorities[0].code'))\r\n    );\r\n    this.userSessionService.selectedLanguage.subscribe((data) => {\r\n      this.translate.use(data);\r\n      this.translate.setDefaultLang(data);\r\n    });\r\n  }\r\n\r\n  routeToPrev() {\r\n    if (this.previousUrl === '/app/dashboard') {\r\n      const modalData = new customModalData();\r\n      modalData.icon = 'error';\r\n      modalData.text =\r\n        'You will lose the data that you entered before Save, Are you sure ?';\r\n      modalData.title = 'Are you sure';\r\n      modalData.delete = true;\r\n      modalData.buttonText = 'Yes';\r\n      modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n      const dialogRef = this.dialog.open(DialogDataExampleDialog, {\r\n        data: modalData\r\n      });\r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        if (result) {\r\n          this.router.navigateByUrl('/app/dashboard');\r\n        }\r\n      });\r\n    } else if (\r\n      this.previousUrl === 'Payroll' ||\r\n      this.previousUrl === 'Expense' ||\r\n      this.previousUrl === 'Revenue'\r\n    ) {\r\n      const modalData = new customModalData();\r\n      modalData.icon = 'error';\r\n      modalData.text =\r\n        'You will lose the data that you entered before Save, Are you sure ?';\r\n      modalData.title = 'Are you sure';\r\n      modalData.delete = true;\r\n      modalData.buttonText = 'Yes';\r\n      modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n      const dialogRef = this.dialog.open(DialogDataExampleDialog, {\r\n        data: modalData\r\n      });\r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        if (result) {\r\n          this.router.navigateByUrl('/app/revisions', {\r\n            queryParams: { revisionType: this.previousUrl }\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.router.navigateByUrl('/app/real-estate/locations');\r\n    }\r\n  }\r\n\r\n  routeToDashboard() {\r\n    this.userSessionService.setDisplayRealEstateDetailsFlag(false);\r\n    this.router.navigateByUrl('/app/dashboard');\r\n  }\r\n\r\n  routeToTitle(title) {\r\n    if (title === 'REAL_ESTATE_DETAILS') {\r\n      this.router.navigateByUrl('/app/real-estate/locations');\r\n    }\r\n  }\r\n\r\n  returnCheck() {\r\n    let flag = true;\r\n    if (\r\n      this.loggedUser === 'ROLE_DARMA_OWNER' ||\r\n      this.loggedUser === 'ROLE_DARMA_AUDITOR'\r\n    ) {\r\n      flag = false;\r\n    }\r\n    return flag;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\common-components\\custom-model\\custom-dialog.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":43,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dialogRef' is assigned a value but never used.","line":44,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":14}],"errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { DialogDataExampleDialog } from './custom-dialog';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  // HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\n// import { DebugElement } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialogRef,\r\n  MatDialogTitle\r\n} from '@angular/material/dialog';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\ndescribe('DialogDataExampleDialog', () => {\r\n  let component: DialogDataExampleDialog;\r\n  let fixture: ComponentFixture<DialogDataExampleDialog>;\r\n  let router: Router;\r\n  let dialogRef: MatDialogRef<DialogDataExampleDialog>;\r\n  const dialogMock = {\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    close: () => {}\r\n  };\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        RouterTestingModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [DialogDataExampleDialog],\r\n      providers: [\r\n        { provide: MatDialogTitle, useValue: {} },\r\n        { provide: MatDialogRef, useValue: dialogMock },\r\n        { provide: MAT_DIALOG_DATA, useValue: [] }\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    dialogRef = TestBed.get(MatDialogRef);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(DialogDataExampleDialog);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n  describe('Switch case call', () => {\r\n    it('tests error', () => {\r\n      expect(component.returnImage('error')).toEqual(\r\n        'assets/images/popup_images/error_popup.png'\r\n      );\r\n    });\r\n    it('tests success', () => {\r\n      expect(component.returnImage('success')).toEqual(\r\n        'assets/images/popup_images/success_popup.png'\r\n      );\r\n    });\r\n    it('tests warning', () => {\r\n      expect(component.returnImage('warning')).toEqual(\r\n        'assets/images/popup_images/delete_image.png'\r\n      );\r\n    });\r\n  });\r\n\r\n  it('should onConfirmClick', () => {\r\n    spyOn(component, 'onConfirmClick').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.onConfirmClick();\r\n    // component.dialogRef.close(true);\r\n    expect(component.onConfirmClick).toHaveBeenCalled();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\common-components\\custom-model\\custom-dialog.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDialogRef' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customModalData' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":14,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'flag' should be typed.","line":14,"column":18,"nodeType":"Identifier","messageId":"missingArgType","endLine":14,"endColumn":22}],"errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { customModalData } from '../../model/applicationModel';\r\n\r\n@Component({\r\n  templateUrl: './custom-dialog.html'\r\n})\r\nexport class DialogDataExampleDialog {\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: customModalData,\r\n    public dialogRef: MatDialogRef<DialogDataExampleDialog>\r\n  ) {}\r\n\r\n  returnImage = (flag) => {\r\n    switch (flag) {\r\n      case 'error':\r\n        return 'assets/images/popup_images/error_popup.png';\r\n      case 'success':\r\n        return 'assets/images/popup_images/success_popup.png';\r\n      case 'warning':\r\n        return 'assets/images/popup_images/delete_image.png';\r\n    }\r\n  };\r\n\r\n  onConfirmClick(): void {\r\n    this.dialogRef.close(true);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\constants\\app-constants.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SideNavItem' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·:·\"YYYY-MM-DDTHH:mm:ss.SSS\"` with `:·'YYYY-MM-DDTHH:mm:ss.SSS'`","line":156,"column":14,"nodeType":null,"endLine":156,"endColumn":42,"fix":{"range":[3394,3422],"text":": 'YYYY-MM-DDTHH:mm:ss.SSS'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"YYYY-MM-DD·HH:mm\"` with `'YYYY-MM-DD·HH:mm'`","line":157,"column":23,"nodeType":null,"endLine":157,"endColumn":41,"fix":{"range":[3447,3465],"text":"'YYYY-MM-DD HH:mm'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":161,"column":10,"nodeType":null,"endLine":161,"endColumn":11,"fix":{"range":[3516,3517],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":162,"column":11,"nodeType":null,"endLine":162,"endColumn":12,"fix":{"range":[3535,3536],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":163,"column":9,"nodeType":null,"endLine":163,"endColumn":10,"fix":{"range":[3552,3553],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":167,"column":9,"nodeType":null,"endLine":167,"endColumn":10,"fix":{"range":[3609,3610],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":168,"column":8,"nodeType":null,"endLine":168,"endColumn":9,"fix":{"range":[3625,3626],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `;`","line":169,"column":2,"nodeType":null,"endLine":169,"endColumn":2,"fix":{"range":[3634,3634],"text":";"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":172,"column":10,"nodeType":null,"endLine":172,"endColumn":11,"fix":{"range":[3679,3680],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":173,"column":10,"nodeType":null,"endLine":173,"endColumn":11,"fix":{"range":[3698,3699],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":174,"column":10,"nodeType":null,"endLine":174,"endColumn":11,"fix":{"range":[3717,3718],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `;`","line":175,"column":2,"nodeType":null,"endLine":175,"endColumn":2,"fix":{"range":[3727,3727],"text":";"}}],"errorCount":12,"warningCount":1,"fixableErrorCount":12,"fixableWarningCount":0,"source":"import { SideNavItem } from '../model/sidenavbar.model';\r\n\r\nexport class AppConstants {\r\n  static options: string[] = [\r\n    '1',\r\n    '2',\r\n    '3',\r\n    '4',\r\n    '5',\r\n    '6',\r\n    '7',\r\n    '8',\r\n    '9',\r\n    '10',\r\n    '11',\r\n    '12'\r\n  ];\r\n\r\n  /** user Role access */\r\n  static userRoleCodes = {\r\n    ROLE_DARMA_ADMIN: 'ROLE_DARMA_ADMIN',\r\n    ROLE_DARMA_ACCOUNTS_USR: 'ROLE_DARMA_ACCOUNTS_USR',\r\n    ROLE_DARMA_OWNER: 'ROLE_DARMA_OWNER',\r\n    ROLE_DARMA_AUDITOR: 'ROLE_DARMA_AUDITOR',\r\n    ROLE_DARMA_TRAINING_USR: 'ROLE_DARMA_TRAINING_USR'\r\n  };\r\n  static brandId = 'cb55c7cd-e216-4037-b1f5-c21e2d01be3d';\r\n  static status = 'A';\r\n  static userType = 'DARMA';\r\n  static brandCode = 'LP';\r\n}\r\n\r\n/** Side bar list */\r\nexport const sideNavbarList: SideNavItem[] = [\r\n  {\r\n    displayName: 'Revenue & Source',\r\n    iconName: 'attach_money',\r\n    imgPath: 'assets/images/revenue-hover.png',\r\n    route: 'app/dashboard'\r\n  },\r\n  {\r\n    displayName: 'Service Details',\r\n    iconName: 'location_on',\r\n    route: 'app/real-estate/locations',\r\n    children: [\r\n      {\r\n        displayName: 'Bank Details',\r\n        route: 'app/real-estate/location/bank-details'\r\n      },\r\n      {\r\n        displayName: 'Revenue Details',\r\n        route: 'app/real-estate/location/revenue-details'\r\n      },\r\n      {\r\n        displayName: 'Tender Details',\r\n        route: 'app/real-estate/location/tender-details'\r\n      },\r\n      {\r\n        displayName: 'Operational Users',\r\n        route: 'app/real-estate/location/user-details'\r\n      }\r\n    ]\r\n  },\r\n  // {\r\n  //   displayName: 'User',\r\n  //   iconName: 'person',\r\n  //   route: 'app/users'\r\n  // },\r\n  {\r\n    displayName: 'Lock / Unlock',\r\n    iconName: 'lock',\r\n    route: 'app/lockUnlock'\r\n  },\r\n  {\r\n    displayName: 'Revisions',\r\n    iconName: 'table_chart',\r\n    // imgPath: 'assets/images/payroll-list.png',\r\n    route: 'app/revisions'\r\n  }\r\n];\r\n\r\n// date picker formates\r\nexport const MATERIAL_DATEPICKER_FORMATS = {\r\n  parse: {\r\n    dateInput: 'MM/DD/YYYY'\r\n  },\r\n  display: {\r\n    dateInput: 'MM/DD/YYYY',\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'MM/DD/YYYY',\r\n    monthYearA11yLabel: 'MMMM YYYY'\r\n  }\r\n};\r\n\r\nexport const displayedDashBoardColumns: string[] = [\r\n  'expandCollapse',\r\n  'locationDTO.locationID',\r\n  'serviceDTO.serviceId',\r\n  'tenderTypesDTO.code',\r\n  'revenueDate',\r\n  'depositIdentifier',\r\n  'amount',\r\n  'status',\r\n  'submittedDate',\r\n  'submittedByFLname',\r\n  'actions'\r\n];\r\n\r\nexport const displayedPayrollRevisionColumns: string[] = [\r\n  'expandCollapse',\r\n  'brand',\r\n  'real_estate_id',\r\n  'service_id',\r\n  'service_code',\r\n  'payDate',\r\n  'billable',\r\n  'tender_types',\r\n  'amount',\r\n  'gl_details',\r\n  'job_code',\r\n  'requested_by',\r\n  'status',\r\n  'comments'\r\n];\r\n\r\nexport const displayDashboardRevenueDetailsColumns: string[] = [\r\n  'transactionDate',\r\n  'serviceDTO.serviceId',\r\n  'description',\r\n  'amount'\r\n];\r\n\r\nexport const servicesColumnsIs: string[] = [\r\n  'serviceId',\r\n  'serviceIdName',\r\n  'serviceType',\r\n  'realEstateNumber',\r\n  'realEstateName'\r\n];\r\n\r\nexport const MATERIAL_MONTH_FORMATS = {\r\n  parse: {\r\n    dateInput: 'MMM YYYY'\r\n  },\r\n  display: {\r\n    dateInput: 'MMM YYYY',\r\n    monthYearLabel: 'YYYY',\r\n    dateA11yLabel: 'YYYY',\r\n    monthYearA11yLabel: 'YYYY'\r\n  }\r\n};\r\n\r\nexport const paginationPages = { page: '1', per_page: '500' };\r\n\r\nexport const DATE_FORMATS = {\r\n  DATE_FORMAT : \"YYYY-MM-DDTHH:mm:ss.SSS\",\r\n  DATE_PICKER_FORMAT: \"YYYY-MM-DD HH:mm\"\r\n};\r\n\r\nexport const REVISION_STATUS = {\r\n  PENDING : 'P',\r\n  APPROVED : 'A',\r\n  DELETE : 'X'\r\n};\r\n\r\nexport const TRANSACTION_TYPE = {\r\n  CREDIT : 'C',\r\n  DEBIT : 'D'\r\n}\r\n\r\nexport const REVISION_TYPE = {\r\n  PAYROLL : 'PR',\r\n  EXPENSE : 'ER',\r\n  REVENUE : 'RR'\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\constants\\app-enums.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\constants\\utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RevenueTypesDTO' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":65},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":35,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'element' should be typed.","line":35,"column":47,"nodeType":"Identifier","messageId":"missingArgType","endLine":35,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1657,1660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1657,1660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":82,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":82,"endColumn":55},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'userAccessCode' should be typed.","line":82,"column":37,"nodeType":"Identifier","messageId":"missingArgType","endLine":82,"endColumn":51},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":116,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":116,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'userAccessCode' should be typed.","line":116,"column":40,"nodeType":"Identifier","messageId":"missingArgType","endLine":116,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":150,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":150,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'userAccessCode' should be typed.","line":150,"column":40,"nodeType":"Identifier","messageId":"missingArgType","endLine":150,"endColumn":54}],"errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppConstants } from './app-constants';\r\n// import { OnInit } from '@angular/core';\r\nimport {\r\n  SourceDTO,\r\n  UserDTO,\r\n  RevenueTypesDTO\r\n} from '../model/revenueSource.model';\r\n\r\nexport const returnCheckingObject = (sourceObject: SourceDTO) => {\r\n  const revenueSource = new SourceDTO();\r\n  const exportNavisionBy = new UserDTO();\r\n  revenueSource.sourceNotesDTO = sourceObject.sourceNotesDTO;\r\n  revenueSource.submittedBy = sourceObject.submittedBy;\r\n  revenueSource.submittedDate = sourceObject.submittedDate;\r\n  revenueSource.postedBy = sourceObject.postedBy;\r\n  revenueSource.postingDate = sourceObject.postingDate;\r\n  revenueSource.exportNavisionDate = sourceObject.exportNavisionDate;\r\n  revenueSource.postedNavisionDate = sourceObject.postedNavisionDate;\r\n  revenueSource.reconciledDate = sourceObject.reconciledDate;\r\n  revenueSource.depositIdentifier = sourceObject.depositIdentifier;\r\n  revenueSource.bankAmount = sourceObject.bankAmount;\r\n  if (\r\n    sourceObject &&\r\n    sourceObject.exportNavisionBy &&\r\n    sourceObject.exportNavisionBy.id\r\n  ) {\r\n    exportNavisionBy.id = sourceObject.exportNavisionBy.id;\r\n    revenueSource.exportNavisionBy = exportNavisionBy;\r\n  } else {\r\n    revenueSource.exportNavisionBy = null;\r\n  }\r\n  return revenueSource;\r\n};\r\n\r\nexport const differedAmountMonthYearObject = (element) => {\r\n  const differObject = new SourceDTO();\r\n  const revenueTypesDTO =\r\n    element && (element.revenueTypesDTO as RevenueTypesDTO);\r\n  const revenueTypesDTOContainsDiffer = revenueTypesDTO?.description?.includes(\r\n    'Deferred Monthly'\r\n  );\r\n  if (revenueTypesDTOContainsDiffer) {\r\n    monthOptions.forEach((month: any) => {\r\n      differObject.deferredYn = 'Y';\r\n      differObject['deferredMonth' + month] = element['deferredMonth' + month];\r\n      differObject['deferredYear' + month] = element['deferredYear' + month];\r\n      differObject['deferredAmount' + month] =\r\n        element['deferredAmount' + month];\r\n    });\r\n    // for (let i = 1; i <= 12; i++) {\r\n    //   differObject.deferredYn = 'Y';\r\n    //   differObject['deferredMonth' + i] = element['deferredMonth' + i];\r\n    //   differObject['deferredYear' + i] = element['deferredYear' + i];\r\n    //   differObject['deferredAmount' + i] = element['deferredAmount' + i];\r\n    // }\r\n  } else {\r\n    for (let i = 1; i <= 12; i++) {\r\n      differObject['deferredMonth' + i] = null;\r\n      differObject['deferredYear' + i] = null;\r\n      differObject['deferredAmount' + i] = null;\r\n      differObject['deferredYn'] = 'N';\r\n    }\r\n  }\r\n  return differObject;\r\n};\r\n\r\nexport const monthOptions: string[] = [\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  '10',\r\n  '11',\r\n  '12'\r\n];\r\n\r\nexport const revenueSourcesCheck = (userAccessCode) => {\r\n  let checkFlag = false;\r\n  switch (userAccessCode) {\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_ADMIN:\r\n      {\r\n        checkFlag = true;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_AUDITOR:\r\n      {\r\n        checkFlag = true;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_TRAINING_USR:\r\n      {\r\n        checkFlag = true;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_OWNER:\r\n      {\r\n        checkFlag = true;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_ACCOUNTS_USR:\r\n      {\r\n        checkFlag = true;\r\n      }\r\n      break;\r\n    default:\r\n      checkFlag = true;\r\n  }\r\n  return checkFlag;\r\n};\r\n\r\nexport const realEstateDetailsCheck = (userAccessCode) => {\r\n  let checkFlag = false;\r\n  switch (userAccessCode) {\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_ADMIN:\r\n      {\r\n        checkFlag = true;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_AUDITOR:\r\n      {\r\n        checkFlag = false;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_TRAINING_USR:\r\n      {\r\n        checkFlag = false;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_OWNER:\r\n      {\r\n        checkFlag = false;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_ACCOUNTS_USR:\r\n      {\r\n        checkFlag = true;\r\n      }\r\n      break;\r\n    default:\r\n      checkFlag = true;\r\n  }\r\n  return checkFlag;\r\n};\r\n\r\nexport const adminTrainingUserCheck = (userAccessCode) => {\r\n  let checkFlag = false;\r\n  switch (userAccessCode) {\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_ADMIN:\r\n      {\r\n        checkFlag = true;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_AUDITOR:\r\n      {\r\n        checkFlag = false;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_TRAINING_USR:\r\n      {\r\n        checkFlag = false;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_OWNER:\r\n      {\r\n        checkFlag = false;\r\n      }\r\n      break;\r\n    case AppConstants.userRoleCodes.ROLE_DARMA_ACCOUNTS_USR:\r\n      {\r\n        checkFlag = false;\r\n      }\r\n      break;\r\n    default:\r\n      checkFlag = true;\r\n  }\r\n  return checkFlag;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\directives\\click-out-side-directive.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ElementRef' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":18,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":19,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'target' should be typed.","line":19,"column":18,"nodeType":"Identifier","messageId":"missingArgType","endLine":19,"endColumn":24}],"errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Directive,\r\n  // Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  HostListener\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[clickOutside]'\r\n})\r\nexport class ClickOutsideDirective {\r\n  @Output() clickOutside = new EventEmitter<void>();\r\n\r\n  constructor(private elementRef: ElementRef) {}\r\n\r\n  @HostListener('document:click', ['$event.target'])\r\n  public onClick(target) {\r\n    const clickedInside = this.elementRef.nativeElement.contains(target);\r\n    if (!clickedInside) {\r\n      this.clickOutside.emit();\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\directives\\number-only.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ElementRef' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":16,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":17,"endColumn":34}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[NumberOnly]'\r\n})\r\nexport class NumberOnlyDirective {\r\n  // Allow decimal numbers. The \\. is only allowed once to occur\r\n  private regex = new RegExp(/^[0-9-+()]+(\\.[0-9]*){0,1}$/g);\r\n\r\n  // Allow key codes for special events. Reflect :\r\n  // Backspace, tab, end, home\r\n  private specialKeys: Array<string> = ['Backspace', 'Tab', 'End', 'Home'];\r\n\r\n  constructor(private el: ElementRef) {}\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent) {\r\n    // Allow Backspace, tab, end, and home keys\r\n    if (this.specialKeys.indexOf(event.key) !== -1) {\r\n      return;\r\n    }\r\n\r\n    // Do not use event.keycode this is deprecated.\r\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\r\n    const current: string = this.el.nativeElement.value;\r\n    // We need this because the current value on the DOM element\r\n    // is not yet updated with the value from this event\r\n    const next: string = current.concat(event.key);\r\n    if (next && !String(next).match(this.regex)) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\directives\\pagination-style-directive.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Renderer2' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ViewContainerRef' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatPaginator' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatButton' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4819,4822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4819,4822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4844,4847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4844,4847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":268,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":268,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":275,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":275,"endColumn":21}],"errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  // ElementRef,\r\n  // AfterViewInit,\r\n  Directive,\r\n  Host,\r\n  Optional,\r\n  Renderer2,\r\n  Self,\r\n  ViewContainerRef,\r\n  Input\r\n} from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatButton } from '@angular/material/button';\r\n\r\ninterface PageObject {\r\n  length: number;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  previousPageIndex: number;\r\n}\r\n\r\n@Directive({\r\n  selector: '[appStylePaginator]'\r\n})\r\nexport class StylePaginatorDirective {\r\n  private _pageGapTxt = '...';\r\n  private _rangeStart: number;\r\n  private _rangeEnd: number;\r\n  private _buttons = [];\r\n  private directiveLoaded = false;\r\n  private dataLength: number;\r\n  private _curPageObj: PageObject = {\r\n    length: 0,\r\n    pageIndex: 0,\r\n    pageSize: 0,\r\n    previousPageIndex: 0\r\n  };\r\n\r\n  @Input()\r\n  get showTotalPages(): number {\r\n    return this._showTotalPages;\r\n  }\r\n  set showTotalPages(value: number) {\r\n    this._showTotalPages = value % 2 == 0 ? value + 1 : value;\r\n  }\r\n  private _showTotalPages = 2;\r\n\r\n  get inc(): number {\r\n    return this._showTotalPages % 2 == 0\r\n      ? this.showTotalPages / 2\r\n      : (this.showTotalPages - 1) / 2;\r\n  }\r\n\r\n  get numOfPages(): number {\r\n    return this.matPag.getNumberOfPages();\r\n  }\r\n\r\n  get lastPageIndex(): number {\r\n    return this.matPag.getNumberOfPages() - 1;\r\n  }\r\n\r\n  constructor(\r\n    @Host() @Self() @Optional() private readonly matPag: MatPaginator,\r\n    private vr: ViewContainerRef,\r\n    private ren: Renderer2\r\n  ) {\r\n    //to rerender buttons on items per page change and first, last, next and prior buttons\r\n    this.matPag.page.subscribe((e: PageObject) => {\r\n      this.directiveLoaded = true;\r\n      if (\r\n        this._curPageObj.pageSize != e.pageSize &&\r\n        this._curPageObj.pageIndex != 0\r\n      ) {\r\n        e.pageIndex = 0;\r\n        this._rangeStart = 0;\r\n        this._rangeEnd = this._showTotalPages - 1;\r\n      }\r\n      this._curPageObj = e;\r\n\r\n      // this.initPageRange();\r\n    });\r\n  }\r\n\r\n  private buildPageNumbers() {\r\n    const actionContainer = this.vr.element.nativeElement.querySelector(\r\n      'div.mat-paginator-range-actions'\r\n    );\r\n    const nextPageNode = this.vr.element.nativeElement.querySelector(\r\n      'button.mat-paginator-navigation-next'\r\n    );\r\n\r\n    // remove buttons before creating new ones\r\n    if (this._buttons.length > 0) {\r\n      this._buttons.forEach((button) => {\r\n        this.ren.removeChild(actionContainer, button);\r\n      });\r\n      //Empty state array\r\n      this._buttons.length = 0;\r\n    }\r\n\r\n    //initialize next page and last page buttons\r\n    if (this._buttons.length == 0) {\r\n      const nodeArray = this.vr.element.nativeElement.childNodes[0]\r\n        .childNodes[0].childNodes[2].childNodes;\r\n      setTimeout(() => {\r\n        for (let i = 0; i < nodeArray.length; i++) {\r\n          if (nodeArray[i].nodeName === 'BUTTON') {\r\n            if (nodeArray[i].innerHTML.length > 100 && nodeArray[i].disabled) {\r\n              this.ren.setStyle(\r\n                nodeArray[i],\r\n                'background-color',\r\n                'transparent'\r\n              );\r\n              this.ren.setStyle(nodeArray[i], 'color', '#E0E4EC');\r\n              this.ren.setStyle(nodeArray[i], 'margin', '-1.5%');\r\n              this.ren.setStyle(nodeArray[i], 'outline', 'none');\r\n              this.ren.setStyle(nodeArray[i], 'border', 'none');\r\n            } else if (\r\n              nodeArray[i].innerHTML.length > 100 &&\r\n              !nodeArray[i].disabled\r\n            ) {\r\n              this.ren.setStyle(\r\n                nodeArray[i],\r\n                'background-color',\r\n                'transparent'\r\n              );\r\n              this.ren.setStyle(nodeArray[i], 'color', '#E0E4EC');\r\n              this.ren.setStyle(nodeArray[i], 'margin', '-1.5%');\r\n              this.ren.setStyle(nodeArray[i], 'border', 'none');\r\n              this.ren.setStyle(nodeArray[i], 'outline', 'none');\r\n            } else if (nodeArray[i].disabled) {\r\n              this.ren.setStyle(\r\n                nodeArray[i],\r\n                'background-color',\r\n                'transparent'\r\n              );\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n    for (let i = 0; i < this.numOfPages; i++) {\r\n      if (i >= this._rangeStart && i <= this._rangeEnd) {\r\n        this.ren.insertBefore(\r\n          actionContainer,\r\n          this.createButton(i, this.matPag.pageIndex),\r\n          nextPageNode\r\n        );\r\n      } else {\r\n        this.directiveLoaded = false;\r\n      }\r\n      if (i == this._rangeEnd) {\r\n        this.ren.insertBefore(\r\n          actionContainer,\r\n          this.createButton(this._pageGapTxt, this._rangeEnd),\r\n          nextPageNode\r\n        );\r\n      } else {\r\n        this.directiveLoaded = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private createButton(i: any, pageIndex: number): any {\r\n    const linkBtn: MatButton = this.ren.createElement('button');\r\n    this.ren.addClass(linkBtn, 'mat-mini-fab');\r\n    this.ren.setStyle(linkBtn, 'margin', '1%');\r\n    this.ren.setStyle(linkBtn, 'color', '#5A606C');\r\n    this.ren.setStyle(linkBtn, 'border-radius', '4px');\r\n\r\n    const pagingTxt = isNaN(i) ? this._pageGapTxt : +(i + 1);\r\n    const text = this.ren.createText(pagingTxt + '');\r\n    this.ren.addClass(linkBtn, 'mat-custom-page');\r\n    let newIndex = 1;\r\n    switch (i) {\r\n      case pageIndex:\r\n        this.ren.setAttribute(linkBtn, 'disabled', 'disabled');\r\n        break;\r\n      case this._pageGapTxt:\r\n        newIndex = this._curPageObj.pageIndex + this._showTotalPages;\r\n\r\n        if (newIndex >= this.numOfPages) newIndex = this.lastPageIndex;\r\n\r\n        if (pageIndex != this.lastPageIndex) {\r\n          this.ren.listen(linkBtn, 'click', () => {\r\n            this.switchPage(newIndex);\r\n          });\r\n        }\r\n\r\n        if (pageIndex == this.lastPageIndex) {\r\n          this.ren.setAttribute(linkBtn, 'disabled', 'disabled');\r\n        }\r\n        break;\r\n      default:\r\n        this.ren.listen(linkBtn, 'click', () => {\r\n          this.switchPage(i);\r\n        });\r\n        break;\r\n    }\r\n\r\n    this.ren.appendChild(linkBtn, text);\r\n    //Add button to private array for state\r\n    this._buttons.push(linkBtn);\r\n    return linkBtn;\r\n  }\r\n  //calculates the button range based on class input parameters and based on current page index value. Used to render new buttons after event.\r\n  private initPageRange(): void {\r\n    const middleIndex = (this._rangeStart + this._rangeEnd) / 2;\r\n\r\n    this._rangeStart = this.calcRangeStart(middleIndex);\r\n    this._rangeEnd = this.calcRangeEnd(middleIndex);\r\n\r\n    this.buildPageNumbers();\r\n  }\r\n\r\n  //Helper function To calculate start of button range\r\n  private calcRangeStart(middleIndex: number): number {\r\n    switch (true) {\r\n      case this._curPageObj.pageIndex == 0 && this._rangeStart != 0:\r\n        return 0;\r\n      case this._curPageObj.pageIndex > this._rangeEnd:\r\n        return this._curPageObj.pageIndex + this.inc > this.lastPageIndex\r\n          ? this.lastPageIndex - this.inc * 2\r\n          : this._curPageObj.pageIndex - this.inc;\r\n      case this._curPageObj.pageIndex > this._curPageObj.previousPageIndex &&\r\n        this._curPageObj.pageIndex > middleIndex &&\r\n        this._rangeEnd < this.lastPageIndex:\r\n        return this._rangeStart + 1;\r\n      case this._curPageObj.pageIndex < this._curPageObj.previousPageIndex &&\r\n        this._curPageObj.pageIndex < middleIndex &&\r\n        this._rangeStart > 0:\r\n        return this._rangeStart - 1;\r\n      default:\r\n        return this._rangeStart;\r\n    }\r\n  }\r\n  //Helpter function to calculate end of button range\r\n  private calcRangeEnd(middleIndex: number): number {\r\n    switch (true) {\r\n      case this._curPageObj.pageIndex == 0 &&\r\n        this._rangeEnd != this._showTotalPages:\r\n        return this._showTotalPages - 1;\r\n      case this._curPageObj.pageIndex > this._rangeEnd:\r\n        return this._curPageObj.pageIndex + this.inc > this.lastPageIndex\r\n          ? this.lastPageIndex\r\n          : this._curPageObj.pageIndex + 1;\r\n      case this._curPageObj.pageIndex > this._curPageObj.previousPageIndex &&\r\n        this._curPageObj.pageIndex > middleIndex &&\r\n        this._rangeEnd < this.lastPageIndex:\r\n        return this._rangeEnd + 1;\r\n      case this._curPageObj.pageIndex < this._curPageObj.previousPageIndex &&\r\n        this._curPageObj.pageIndex < middleIndex &&\r\n        this._rangeStart >= 0 &&\r\n        this._rangeEnd > this._showTotalPages - 1:\r\n        return this._rangeEnd - 1;\r\n      default:\r\n        return this._rangeEnd;\r\n    }\r\n  }\r\n  //Helper function to switch page on non first, last, next and previous buttons only.\r\n  private switchPage(i: number): void {\r\n    const previousPageIndex = this.matPag.pageIndex;\r\n    this.matPag.pageIndex = i;\r\n    this.matPag['_emitPageEvent'](previousPageIndex);\r\n    this.initPageRange();\r\n  }\r\n  //Initialize default state after view init\r\n  public ngAfterViewInit() {\r\n    this._rangeStart = 0;\r\n    this._rangeEnd = this._showTotalPages - 1;\r\n    setTimeout(() => {\r\n      this.directiveLoaded = true;\r\n    }, 200);\r\n  }\r\n  public ngDoCheck() {\r\n    if (this.directiveLoaded) {\r\n      this.initPageRange();\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\directives\\table-expandable-row-directive.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnDestroy' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ViewContainerRef' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[294,297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[294,297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[328,331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[328,331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'value' should be typed with a non-any type.","line":27,"column":20,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":27,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[498,501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[498,501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[664,667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[664,667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Directive,\r\n  OnDestroy,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[cdkDetailRow]'\r\n})\r\nexport class CdkDetailRowDirective implements OnDestroy {\r\n  private row: any;\r\n  private tRef: TemplateRef<any>;\r\n  private opened: boolean;\r\n\r\n  @HostBinding('class.expanded')\r\n  get expended(): boolean {\r\n    return this.opened;\r\n  }\r\n\r\n  @Input()\r\n  set cdkDetailRow(value: any) {\r\n    if (value !== this.row) {\r\n      this.row = value;\r\n      // this.render();\r\n    }\r\n  }\r\n\r\n  @Input('cdkDetailRowTpl')\r\n  set template(value: TemplateRef<any>) {\r\n    if (value !== this.tRef) {\r\n      this.tRef = value;\r\n    }\r\n  }\r\n\r\n  @Output() toggleChange = new EventEmitter<CdkDetailRowDirective>();\r\n\r\n  constructor(public vcRef: ViewContainerRef) {}\r\n\r\n  @HostListener('click')\r\n  onClick(): void {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle(): void {\r\n    if (this.opened) {\r\n      this.vcRef.clear();\r\n    } else {\r\n      this.render();\r\n    }\r\n    this.opened = this.vcRef.length > 0;\r\n    this.toggleChange.emit(this);\r\n  }\r\n\r\n  private render(): void {\r\n    this.vcRef.clear();\r\n    if (this.tRef && this.row) {\r\n      this.vcRef.createEmbeddedView(this.tRef, { $implicit: this.row });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.row) {\r\n      this.row.close = false;\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\directives\\text-only.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ElementRef' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed.","line":11,"column":52,"nodeType":"Identifier","messageId":"missingArgType","endLine":11,"endColumn":57}],"errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Directive, ElementRef, HostListener } from '@angular/core';\r\n// Input\r\n// import { NgControl } from '@angular/forms';\r\n\r\n@Directive({\r\n  selector: 'input[textOnly]'\r\n})\r\nexport class TextDirective {\r\n  constructor(private _el: ElementRef) {}\r\n\r\n  @HostListener('input', ['$event']) onInputChange(event) {\r\n    const initalValue = this._el.nativeElement.value;\r\n    this._el.nativeElement.value = initalValue.replace(/[^A-Za-z]*/g, '');\r\n    if (initalValue !== this._el.nativeElement.value) {\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\directives\\two-digit-decima-number.directive.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ElementRef' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":24,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":25,"endColumn":34}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appTwoDigitDecimaNumber]'\r\n})\r\nexport class TwoDigitDecimaNumberDirective {\r\n  // Allow decimal numbers and negative values\r\n  private regex = new RegExp(/^[-+]?\\d*\\.?\\d{0,2}$/g);\r\n  // Allow key codes for special events. Reflect :\r\n  // Backspace, tab, end, home\r\n  private specialKeys: Array<string> = [\r\n    'Backspace',\r\n    'Tab',\r\n    'End',\r\n    'Home',\r\n    '-',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'Del',\r\n    'Delete'\r\n  ];\r\n\r\n  constructor(private el: ElementRef) {}\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent) {\r\n    // Allow Backspace, tab, end, and home keys\r\n    if (this.specialKeys.indexOf(event.key) !== -1) {\r\n      return;\r\n    }\r\n    const current: string = this.el.nativeElement.value;\r\n    const position = this.el.nativeElement.selectionStart;\r\n    const next: string = [\r\n      current.slice(0, position),\r\n      event.key == 'Decimal' ? '.' : event.key,\r\n      current.slice(position)\r\n    ].join('');\r\n    if (next && !String(next).match(this.regex)) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\guards\\auth.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CanActivate' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ActivatedRouteSnapshot' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RouterStateSnapshot' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":31,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'route' is defined but never used.","line":31,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":31,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":72},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":57,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":57,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'route' is defined but never used.","line":57,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":57,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":72},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":83,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":83,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'route' is defined but never used.","line":83,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":83,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":72},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":109,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":109,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'route' is defined but never used.","line":109,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":109,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":72}],"errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\r\nimport {\r\n  Router,\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\n// import { Observable } from 'rxjs';\r\nimport get from 'lodash.get';\r\nimport { UserSessionService } from '../services/user-session.services';\r\nimport {\r\n  revenueSourcesCheck,\r\n  realEstateDetailsCheck,\r\n  adminTrainingUserCheck\r\n} from '../constants/utils';\r\nimport { UserResponseModel } from '../model/loginApiResponse.model';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  private currentUser: UserResponseModel = null;\r\n  constructor(\r\n    private router: Router,\r\n    private userSessionService: UserSessionService\r\n  ) {\r\n    this.userSessionService.currentUser.subscribe((data: UserResponseModel) => {\r\n      // logged in so return true\r\n      this.currentUser = data;\r\n    });\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (get(this.currentUser, 'access_token')) {\r\n      // logged in so return true\r\n      return true;\r\n    } else {\r\n      // not logged in so redirect to login page with the return url\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class RevenueSourceAuthGuard implements CanActivate {\r\n  currentUser: UserResponseModel = null;\r\n  userAccessCode: string;\r\n  constructor(\r\n    private router: Router,\r\n    private userSessionService: UserSessionService\r\n  ) {\r\n    this.userSessionService.currentUser.subscribe((data: UserResponseModel) => {\r\n      // logged in so return true\r\n      this.currentUser = data;\r\n    });\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const accessUrl = revenueSourcesCheck(\r\n      get(this.currentUser, 'authorities[0].code')\r\n    );\r\n    if (accessUrl) {\r\n      return accessUrl;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class RealEstateAuthGuard implements CanActivate {\r\n  currentUser: UserResponseModel = null;\r\n  userAccessCode: string;\r\n  constructor(\r\n    private router: Router,\r\n    private userSessionService: UserSessionService\r\n  ) {\r\n    this.userSessionService.currentUser.subscribe((data: UserResponseModel) => {\r\n      // logged in so return true\r\n      this.currentUser = data;\r\n    });\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const accessUrl = realEstateDetailsCheck(\r\n      get(this.currentUser, 'authorities[0].code')\r\n    );\r\n    if (accessUrl) {\r\n      return accessUrl;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class AdminTrainigAuthGuard implements CanActivate {\r\n  currentUser: UserResponseModel = null;\r\n  userAccessCode: string;\r\n  constructor(\r\n    private router: Router,\r\n    private userSessionService: UserSessionService\r\n  ) {\r\n    this.userSessionService.currentUser.subscribe((data: UserResponseModel) => {\r\n      // logged in so return true\r\n      this.currentUser = data;\r\n    });\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const accessUrl = adminTrainingUserCheck(\r\n      get(this.currentUser, 'authorities[0].code')\r\n    );\r\n    if (accessUrl) {\r\n      return accessUrl;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\guards\\interceptor\\gobal-error-handling.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpInterceptor' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpRequest' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpErrorResponse' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpHandler' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpEvent' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[447,450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[447,450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[503,506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[503,506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpErrorResponse,\r\n  HttpHandler,\r\n  HttpEvent\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/throw';\r\n\r\n@Injectable()\r\nexport class HttpErrorInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(request).catch((response: HttpErrorResponse) => {\r\n      return Observable.throw(response);\r\n    });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\guards\\interceptor\\token.interceptor.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpRequest' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpHandler' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpEvent' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpInterceptor' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Observable' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[304,307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[304,307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[360,363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[360,363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // add authorization header with jwt token if available\r\n    const token = localStorage.getItem('JWT_TOKEN');\r\n\r\n    if (token) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\layout\\header\\header.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BlockUI' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":5,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IUser' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":15}],"errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { UserSessionService } from '../../../shared/services/user-session.services';\r\nimport { ApiService } from '../../../shared/services/api.service';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { AuthenticateService } from '../../services/AuthService';\r\nimport { IUser } from '../../model/userModel';\r\nimport { HeaderComponent } from './header.component';\r\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators } from '@angular/forms';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { of } from 'rxjs/internal/observable/of';\r\nimport { throwError } from 'rxjs/internal/observable/throwError';\r\n\r\ndescribe('HeaderComponent', () => {\r\n  let component: HeaderComponent;\r\n  let fixture: ComponentFixture<HeaderComponent>;\r\n  let router: Router;\r\n  let authenticateService: AuthenticateService;\r\n  let userSessionService: UserSessionService;\r\n  let apiService: ApiService;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        MatMenuModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        RouterTestingModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [HeaderComponent],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    apiService = TestBed.get(ApiService);\r\n    userSessionService = TestBed.get(UserSessionService);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(HeaderComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n  it('should be return user data', () => {\r\n    const userData: IUser = new Object();\r\n    userSessionService.currentUser.subscribe((data) => {\r\n      expect(data).toEqual(userData);\r\n    }).unsubscribe;\r\n  });\r\n\r\n  it('should show_user_settting', () => {\r\n    spyOn(component, 'show_user_settting').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.show_user_settting();\r\n    expect(component.show_user_settting).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should Logout', () => {\r\n    spyOn(component, 'Logout').and.callThrough();\r\n    spyOn(authenticateService, 'logout').and.returnValue(\r\n      of({ message: 'success' })\r\n    );\r\n    // const spy = spyOn(router, 'navigate');\r\n    // spyOn(apiService, 'setSessionUser').and.callThrough();\r\n    // spyOn(userSessionService, 'clearUserSessionData').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.Logout();\r\n    expect(component.Logout).toHaveBeenCalled();\r\n    authenticateService.logout();\r\n  });\r\n\r\n  it('Error capture for logout', () => {\r\n    // const pages = { id: '82377546-e7a2-44e6-b2d9-fa66f34b87ac' };\r\n    // spyOn(component, 'deleteRevenueDetails');\r\n    // spyOn(alertService, 'showErrorInformation');\r\n    // const xService = fixture.debugElement.injector.get(authenticateService);\r\n    spyOn(authenticateService, 'logout').and.returnValue(\r\n      throwError({ status: 404 })\r\n    );\r\n    fixture.detectChanges();\r\n    component.Logout();\r\n    // expect(alertService.showErrorInformation).toHaveBeenCalled();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\layout\\header\\header.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ElementRef' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":1,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ApiService' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":5,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[846,849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[846,849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":39,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":39,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":43,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":43,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":55,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":13}],"errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UserSessionService } from '../../../shared/services/user-session.services';\r\nimport { ApiService } from '../../../shared/services/api.service';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { AuthenticateService } from '../../services/AuthService';\r\nimport { UserResponseModel } from '../../model/loginApiResponse.model';\r\nimport get from 'lodash.get';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  @ViewChild('menu') menu: ElementRef;\r\n  loginApiResponse: UserResponseModel;\r\n\r\n  username = '';\r\n  showuser = false;\r\n  currentuser: any;\r\n  loggedUserDescription = '';\r\n  constructor(\r\n    private route: Router,\r\n    private userSessionService: UserSessionService,\r\n    private apiService: ApiService,\r\n    private authService: AuthenticateService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.userSessionService.currentUser.subscribe((res: UserResponseModel) => {\r\n      this.loginApiResponse = res;\r\n      this.loggedUserDescription = get(res, 'authorities[0].description');\r\n    });\r\n    this.username = this.loginApiResponse.userName;\r\n  }\r\n\r\n  show_user_settting() {\r\n    this.showuser = !this.showuser;\r\n  }\r\n\r\n  Logout() {\r\n    //alert(\"In logout\");\r\n    this.blockUI.start('Loading...');\r\n    this.authService.logout().subscribe(\r\n      () => {\r\n        this.apiService.setSessionUser(null);\r\n        sessionStorage.clear();\r\n        this.apiService.clearUserSessionData();\r\n        this.userSessionService.clearUserSessionData();\r\n        this.blockUI.stop();\r\n        this.route.navigate(['/login']);\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.apiService.setSessionUser(null);\r\n        sessionStorage.clear();\r\n        this.apiService.clearUserSessionData();\r\n        this.userSessionService.clearUserSessionData();\r\n        this.route.navigate(['/login']);\r\n      }\r\n    );\r\n  }\r\n\r\n  //not used anywhwre test cases commited\r\n  // userProfile() {\r\n  //   this.route.navigateByUrl('/profile');\r\n  //   this.showuser = false;\r\n  // }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\layout\\sidebar\\sidebar.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpTestingController' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SideNavItem' is defined but never used.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":21}],"errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport {\r\n  HttpClientTestingModule,\r\n  HttpTestingController\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\nimport { RouterModule, Router } from '@angular/router';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators } from '@angular/forms';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { SidebarComponent } from './sidebar.component';\r\nimport { UserSessionService } from '../../services/user-session.services';\r\nimport { SideNavItem } from '../../model/sidenavbar.model';\r\n\r\ndescribe('SidebarComponent', () => {\r\n  let component: SidebarComponent;\r\n  let fixture: ComponentFixture<SidebarComponent>;\r\n  let userSessionService: UserSessionService;\r\n  let router: Router;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [SidebarComponent],\r\n      providers: [\r\n        ApiService,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpResponse,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    userSessionService = TestBed.get(UserSessionService);\r\n    router = TestBed.inject(Router);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(SidebarComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create the app', () => {\r\n    const fixture = TestBed.createComponent(SidebarComponent);\r\n    const app = fixture.componentInstance;\r\n    expect(app).toBeTruthy();\r\n  });\r\n\r\n  it('should toggleMenu menu', () => {\r\n    spyOn(component, 'toggleMenu').and.callThrough();\r\n    component.metadataNav = false;\r\n    fixture.detectChanges();\r\n    component.toggleMenu();\r\n    expect(component.toggleMenu).toHaveBeenCalled();\r\n    // expect(component.metadataNav).toBeFalsy();\r\n  });\r\n\r\n  it('should toggleMenu menu', () => {\r\n    spyOn(component, 'toggleMenu').and.callThrough();\r\n    component.metadataNav = true;\r\n    fixture.detectChanges();\r\n    component.toggleMenu();\r\n    expect(component.toggleMenu).toHaveBeenCalled();\r\n    // expect(component.metadataNav).toBeTruthy();\r\n  });\r\n\r\n  it('should call collapse', () => {\r\n    spyOn(component, 'collapse').and.callThrough();\r\n    spyOn(userSessionService, 'clickedShortMenu').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.collapse();\r\n    expect(component.collapse).toHaveBeenCalled();\r\n    expect(userSessionService.clickedShortMenu).toHaveBeenCalled();\r\n    component.expandSidebar = true;\r\n  });\r\n\r\n  it('should call collapse', () => {\r\n    spyOn(component, 'expand').and.callThrough();\r\n    spyOn(userSessionService, 'clickedShortMenu').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.expand();\r\n    expect(component.expand).toHaveBeenCalled();\r\n    expect(userSessionService.clickedShortMenu).toHaveBeenCalled();\r\n    component.expandSidebar = false;\r\n  });\r\n\r\n  it('should call onItemSelected', () => {\r\n    // let sideNav: SideNavItem;\r\n    const sideNav = { route: '/app/dashboard' };\r\n    const spy = spyOn(router, 'navigate');\r\n    spyOn(component, 'onItemSelected').and.callThrough();\r\n    spyOn(\r\n      userSessionService,\r\n      'setDisplayRealEstateDetailsFlag'\r\n    ).and.callThrough();\r\n    fixture.detectChanges();\r\n    component.onItemSelected(sideNav);\r\n    expect(component.onItemSelected).toHaveBeenCalled();\r\n    expect(\r\n      userSessionService.setDisplayRealEstateDetailsFlag\r\n    ).toHaveBeenCalled();\r\n    expect(spy).toHaveBeenCalledWith([sideNav.route]);\r\n  });\r\n\r\n  it('should call onChildItemSelected', () => {\r\n    // let sideNav: SideNavItem;\r\n    const sideNav = { route: '/app/dashboard' };\r\n    const spy = spyOn(router, 'navigate');\r\n    spyOn(component, 'onChildItemSelected').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.onChildItemSelected(sideNav);\r\n    expect(component.onChildItemSelected).toHaveBeenCalled();\r\n    expect(spy).toHaveBeenCalledWith([sideNav.route]);\r\n  });\r\n\r\n  it('should call returnClass app/real-estate/locations', () => {\r\n    // let sideNav: SideNavItem;\r\n    const sideNav = { route: 'app/real-estate/locations' };\r\n    spyOn(component, 'returnClass').and.callThrough();\r\n    fixture.detectChanges();\r\n    // component.router.isActive('/app/dashboard', true);\r\n    component.expanded = true;\r\n    component.returnClass(sideNav);\r\n    expect(component.returnClass).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call returnClass app/real-estate/locations9', () => {\r\n    // let sideNav: SideNavItem;\r\n    const sideNav = { route: 'app/real-estate/locations9' };\r\n    spyOn(component, 'returnClass').and.callThrough();\r\n    fixture.detectChanges();\r\n    // component.router.isActive('/app/dashboard', true);\r\n    component.expanded = true;\r\n    component.returnClass(sideNav);\r\n    expect(component.returnClass).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call returnClass /app/addrevenue', () => {\r\n    // let sideNav: SideNavItem;\r\n    // router = { url: '/app/addrevenue' };\r\n    const sideNav = { route: '/app/addrevenue' };\r\n    spyOn(component, 'returnClass').and.callThrough();\r\n    fixture.detectChanges();\r\n    // component.router.isActive('/app/dashboard', true);\r\n    component.returnClass(sideNav);\r\n    expect(component.returnClass).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call returnClass /app/addrevision', () => {\r\n    // let sideNav: SideNavItem;\r\n    const sideNav = { route: '/app/addrevision' };\r\n    spyOn(component, 'returnClass').and.callThrough();\r\n    fixture.detectChanges();\r\n    // component.router.isActive('/app/dashboard', true);\r\n    component.returnClass(sideNav);\r\n    expect(component.returnClass).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call returnClass payroll_revision', () => {\r\n    // let sideNav: SideNavItem;\r\n    const sideNav = { iconName: 'payroll_revision' };\r\n    spyOn(component, 'returnClass').and.callThrough();\r\n    fixture.detectChanges();\r\n    // component.router.isActive('/app/dashboard', true);\r\n    component.returnClass(sideNav);\r\n    expect(component.returnClass).toHaveBeenCalled();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\layout\\sidebar\\sidebar.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SideNavItem' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":35,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":47,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":47,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":55,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":55,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":60,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":60,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":65,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":65,"endColumn":36},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `·`","line":67,"column":7,"nodeType":null,"endLine":67,"endColumn":7,"fix":{"range":[2017,2017],"text":" "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·queryParams:·{·revisionType:·'Payroll'·}·});············` with `␍⏎········queryParams:·{·revisionType:·'Payroll'·}␍⏎······});`","line":68,"column":49,"nodeType":null,"endLine":68,"endColumn":106,"fix":{"range":[2101,2158],"text":"\r\n        queryParams: { revisionType: 'Payroll' }\r\n      });"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `·`","line":69,"column":11,"nodeType":null,"endLine":69,"endColumn":11,"fix":{"range":[2170,2170],"text":" "}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":74,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":74,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":78,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":78,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":98,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":98,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'item' should be typed.","line":98,"column":18,"nodeType":"Identifier","messageId":"missingArgType","endLine":98,"endColumn":22}],"errorCount":3,"warningCount":14,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UserSessionService } from '../../services/user-session.services';\r\nimport { SideNavItem } from '../../../shared/model/sidenavbar.model';\r\nimport { sideNavbarList } from '../../constants/app-constants';\r\n// AppConstants\r\nimport {\r\n  revenueSourcesCheck,\r\n  adminTrainingUserCheck,\r\n  realEstateDetailsCheck\r\n} from '../../constants/utils';\r\nimport { UserResponseModel } from '../../../shared/model/loginApiResponse.model';\r\nimport get from 'lodash.get';\r\nimport { AccessToDisplaySectionEnums } from '../../../shared/constants/app-enums';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.scss']\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n  expanded = false;\r\n  newNav: boolean;\r\n  metadataNav: boolean;\r\n  loginApiResponse: UserResponseModel = null;\r\n  userAccessCode: string;\r\n  navItems: SideNavItem[] = [];\r\n  expandSidebar = false;\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    public router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.newNav = true;\r\n    this.navItems = sideNavbarList;\r\n    this.userSessionService.currentUser.subscribe(\r\n      (res: UserResponseModel) => (this.loginApiResponse = res)\r\n    );\r\n    this.userSessionService.displayRealEstateDetails.subscribe((flag) => {\r\n      this.expanded = flag;\r\n    });\r\n    this.userAccessCode = get(this.loginApiResponse, 'authorities[0].code');\r\n  }\r\n\r\n  toggleMenu() {\r\n    if (this.metadataNav === false) {\r\n      this.metadataNav = true;\r\n    } else {\r\n      this.metadataNav = false;\r\n    }\r\n  }\r\n\r\n  collapse() {\r\n    this.userSessionService.clickedShortMenu(true);\r\n    this.expandSidebar = true;\r\n  }\r\n\r\n  expand() {\r\n    this.userSessionService.clickedShortMenu(false);\r\n    this.expandSidebar = false;\r\n  }\r\n\r\n  onItemSelected(item: SideNavItem) {\r\n    this.userSessionService.setDisplayRealEstateDetailsFlag(false);\r\n    if(item.route === 'app/revisions') {\r\n      this.router.navigate(['/app/revisions'], { queryParams: { revisionType: 'Payroll' } });            \r\n    } else{\r\n      this.router.navigate([item.route]);\r\n    }\r\n  }\r\n\r\n  onChildItemSelected(item: SideNavItem) {\r\n    this.router.navigate([item.route]);\r\n  }\r\n\r\n  returnAccess = (route: SideNavItem) => {\r\n    let checkFlag = false;\r\n    switch (route.displayName) {\r\n      case AccessToDisplaySectionEnums.REVENUE_SOURCES:\r\n        checkFlag = revenueSourcesCheck(this.userAccessCode);\r\n        return checkFlag;\r\n      case AccessToDisplaySectionEnums.REAL_ESTATES_DETAILS:\r\n        checkFlag = realEstateDetailsCheck(this.userAccessCode);\r\n        return checkFlag;\r\n      case AccessToDisplaySectionEnums.LOCK_UNLOCK:\r\n        checkFlag = adminTrainingUserCheck(this.userAccessCode);\r\n        return checkFlag;\r\n      case AccessToDisplaySectionEnums.PAYROLL_REVISION:\r\n        checkFlag = adminTrainingUserCheck(this.userAccessCode);\r\n        return checkFlag;\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  returnClass = (item) => {\r\n    let classFlag = 'da-item';\r\n    if (this.router.isActive(item.route, true)) {\r\n      classFlag = `${classFlag} active`;\r\n    } else if (this.expanded) {\r\n      if (item.route === 'app/real-estate/locations') {\r\n        classFlag = `${classFlag} active`;\r\n      }\r\n    } else if (this.router?.url === '/app/addrevenue') {\r\n      if (item.route === 'app/dashboard') {\r\n        classFlag = `${classFlag} active`;\r\n      }\r\n    } else if (this.router?.url === '/app/addrevision') {\r\n      if (item.route === 'app/revisions') {\r\n        classFlag = `${classFlag} active`;\r\n      }\r\n    }\r\n    if (item.iconName === 'payroll_revision') {\r\n      classFlag = `${classFlag} da-payrevisionExtra`;\r\n    }\r\n    return classFlag;\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\model\\app-error.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'originalError' should be typed with a non-any type.","line":2,"column":22,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":2,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[62,65],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[62,65],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class AppError {\r\n  constructor(public originalError?: any) {}\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\model\\applicationModel.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[342,345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[342,345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class customModalData {\r\n  title: string;\r\n  text: string;\r\n  icon: string;\r\n  buttonText?: string;\r\n  imagePath?: string;\r\n  delete?: boolean;\r\n}\r\n\r\nexport interface BrandsModel {\r\n  code: string;\r\n  description: string;\r\n  // gLCodesDTO?: any[];\r\n  id: string;\r\n  logo: null;\r\n  // regionsDTO?: any[];\r\n  status: string;\r\n  userDTO: any[];\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\model\\brandResponse.model.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\model\\lockunlock.model.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\model\\loginApiResponse.model.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `,` with `;`","line":44,"column":20,"nodeType":null,"endLine":44,"endColumn":21,"fix":{"range":[904,905],"text":";"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `,` with `;`","line":45,"column":19,"nodeType":null,"endLine":45,"endColumn":20,"fix":{"range":[925,926],"text":";"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `,` with `;`","line":46,"column":23,"nodeType":null,"endLine":46,"endColumn":24,"fix":{"range":[950,951],"text":";"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `,` with `;`","line":47,"column":19,"nodeType":null,"endLine":47,"endColumn":20,"fix":{"range":[971,972],"text":";"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `,` with `;`","line":48,"column":16,"nodeType":null,"endLine":48,"endColumn":17,"fix":{"range":[989,990],"text":";"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1004,1007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1004,1007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `,` with `;`","line":49,"column":16,"nodeType":null,"endLine":49,"endColumn":17,"fix":{"range":[1007,1008],"text":";"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1034,1037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1034,1037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `,` with `;`","line":50,"column":28,"nodeType":null,"endLine":50,"endColumn":29,"fix":{"range":[1037,1038],"text":";"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1052,1055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1052,1055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `,` with `;`","line":51,"column":16,"nodeType":null,"endLine":51,"endColumn":17,"fix":{"range":[1055,1056],"text":";"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1071,1074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1071,1074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `,` with `;`","line":52,"column":17,"nodeType":null,"endLine":52,"endColumn":18,"fix":{"range":[1074,1075],"text":";"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1092,1095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1092,1095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `;`","line":53,"column":19,"nodeType":null,"endLine":53,"endColumn":19,"fix":{"range":[1095,1095],"text":";"}}],"errorCount":10,"warningCount":5,"fixableErrorCount":10,"fixableWarningCount":0,"source":"export interface LoginResponseModel {\r\n  accesToken: string;\r\n  refreshToken: string;\r\n  tokenType: string;\r\n  expiresIn: string;\r\n  roles: Role[];\r\n  permissions: string[];\r\n}\r\nexport interface Role {\r\n  id: string;\r\n  roleName: string;\r\n  isBaseRole: boolean;\r\n  delegatorId: string;\r\n}\r\nexport interface Permission {\r\n  personal_create: string;\r\n  read: string;\r\n  decision: string;\r\n}\r\n\r\nexport interface UserResponseModel {\r\n  access_token: string;\r\n  token_type: string;\r\n  refresh_token: string;\r\n  expires_in: number;\r\n  brandId: string;\r\n  brandCode: string;\r\n  scope: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  session_id: string;\r\n  userName: string;\r\n  authorities: AuthoritiesRole[];\r\n}\r\n\r\nexport interface AuthoritiesRole {\r\n  id: number;\r\n  name: string;\r\n  code: string;\r\n  description: string;\r\n  status: string;\r\n  usertype: string;\r\n  authority: string;\r\n  firstName: string,\r\n  lastName: string,\r\n  emailAddress: string,\r\n  userName: string,\r\n  phone: number,\r\n  rolesDTO: any,\r\n  usersLocationLinkDTO: any,\r\n  brandDTO: any,\r\n  brandCode: any,\r\n  displayName: any\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\model\\revenueSource.model.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[951,954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[951,954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2437,2440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2437,2440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2454,2457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2454,2457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2480,2483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2480,2483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":495,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":495,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11431,11434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11431,11434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":504,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":504,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11625,11628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11625,11628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":510,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":510,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11713,11716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11713,11716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":520,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":520,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11961,11964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11961,11964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class RevenueNotesDTO {\r\n  id: string;\r\n  notes: string;\r\n  revenueDTO: RevenueDTO[];\r\n  status: string;\r\n  createdDate: Date;\r\n  createdBy: string;\r\n}\r\n\r\nexport class UserLocationInclusionData {\r\n  id: string;\r\n  userDTO: UserDTO;\r\n  locationDTO: string;\r\n  status: string;\r\n}\r\n\r\nexport class RevenueDTO {\r\n  id: string;\r\n  locationDTO: LocationDTO[];\r\n  bankAccountsDTO: BankAccountsDTO[];\r\n  postedBy: UserDTO[];\r\n  postingDate: Date;\r\n  status: string;\r\n  revenueDate: Date;\r\n  amount: bigint;\r\n  numberOfDeposits: number;\r\n  submittedBy: UserDTO[];\r\n  submittedDate: Date;\r\n  reconciledDate: Date;\r\n  depositIdentifier: string;\r\n  tenderTypesDTO: TenderTypesDTO[];\r\n  notesDTO: RevenueNotesDTO[];\r\n  sourcesDTO: SourceDTO[];\r\n  markForCorrection: boolean;\r\n  bankAmount: bigint;\r\n  verificationStatus: string;\r\n  markForCorrectionDate: Date;\r\n  exportNavisionDate: Date;\r\n  exportNavisionBy: UserDTO[];\r\n  corrInc: number;\r\n  description: any;\r\n}\r\nexport class LocationDTO {\r\n  id: string;\r\n  name: string;\r\n  locationID: string;\r\n  clientLegalName: string;\r\n  address1: string;\r\n  address2: string;\r\n  city: string;\r\n  county: string;\r\n  state: string;\r\n  zipCode: string;\r\n  phone: string;\r\n  cell: string;\r\n  fax: string;\r\n  ext: string;\r\n  companyName: string;\r\n  executive: string;\r\n  serviceType: string;\r\n  contractType: string;\r\n  applicableForDarma: boolean;\r\n  noofSpaces: number;\r\n  brandCode: string;\r\n  dateOfLastMonthlyRateIncrease: string;\r\n  dateOfLastTransientRateIncrease: string;\r\n  typeOfFacility: string;\r\n  settlementDay: number;\r\n  hoursOfOperation: string;\r\n  noOfGarageLevels: string;\r\n  iconName: string;\r\n  noOfEntryLanes: string;\r\n  noOfExitLanes: string;\r\n  dueDay: string;\r\n  parcsManufacture: string;\r\n  budget: string;\r\n  status: string;\r\n  subsidyType: string;\r\n  parentLocationID: string;\r\n  parentLocationName: string;\r\n  regionDTO: RegionDTO[];\r\n  notesDTO: LocationNotesDTO[];\r\n  tenderTypesLnkDTO: TenderTypesLocationLinkDTO[];\r\n  revenueTypesLnkDTO: RevenueTypesLocationLinkDTO[];\r\n  bankAccountsLocationLinkDTO: BankAccountsLocationLinkDTO[];\r\n  burdensDTO: BurdensDTO[];\r\n  rolesAndBillingRatesDTO: PositionsAndBillingRatesDTO[];\r\n  locationContactDTO: LocationContactDTO[];\r\n  burdenInfoDTO: BurdenInfoDTO[];\r\n  exclusionBurdensDTO: ExclusionBurdensDTO[];\r\n  locationMoreInfoDTO: LocationMoreInfoDTO[];\r\n  darmaUser: UserDTO[];\r\n  brandDTO: BrandDTO[];\r\n  dataView: null;\r\n  active: any;\r\n  deleted: any;\r\n  primaryContactId: any;\r\n  tempId: string;\r\n  locationWithID: string;\r\n  locationDTO: LocationDTO;\r\n}\r\nexport class RegionDTO {\r\n  id: string;\r\n  code: string;\r\n  description: string;\r\n  logo: string;\r\n  brand: BrandDTO[];\r\n  status: string;\r\n}\r\nexport class BrandDTO {\r\n  id: string;\r\n  code: string;\r\n  description: string;\r\n  logo: string;\r\n  status: string;\r\n  regionsDTO: RegionDTO[];\r\n  gLCodesDTO: GLCodesDTO[];\r\n  userDTO: UserDTO[];\r\n}\r\nexport class GLCodesDTO {\r\n  id: string;\r\n  code: string;\r\n  description: string;\r\n  status: string;\r\n  type: string;\r\n  brandDTO: BrandDTO[];\r\n}\r\n\r\nexport class LocationNotesDTO {\r\n  id: string;\r\n  noteHeading: string;\r\n  notes: string;\r\n  locationDTO: LocationDTO[];\r\n  status: string;\r\n}\r\nexport class BurdensDTO {\r\n  id: string;\r\n  jobDescription: string;\r\n  type: string;\r\n  dPercentage: bigint;\r\n  dGL: string;\r\n  dEorC: string;\r\n  dOffsetEorC: string;\r\n  cPercentage: bigint;\r\n  cGL: string;\r\n  cEorC: string;\r\n  cOffsetEorC: string;\r\n  offsettingAccount: string;\r\n  includingTips: string;\r\n  locationDTO: LocationDTO[];\r\n  status: string;\r\n  locId: string;\r\n  intracoGLClode: string;\r\n  lSIChargeOut: string;\r\n  revPercentage: string;\r\n  rateNew: string;\r\n  locChargeOut: string;\r\n  revGl: string;\r\n  segmentCode: string;\r\n  debitAndCreditEqual: boolean;\r\n}\r\nexport class PositionsAndBillingRatesDTO {\r\n  id: string;\r\n  billingRate: bigint;\r\n  locationDTO: LocationDTO[];\r\n  positionsDTO: PositionsDTO[];\r\n  status: string;\r\n}\r\nexport class PositionsDTO {\r\n  id: string;\r\n  code: string;\r\n  description: string;\r\n  positionsAndBillingRatesDTO: PositionsAndBillingRatesDTO[];\r\n  status: string;\r\n}\r\nexport class BurdenInfoDTO {\r\n  id: string;\r\n  exclusion: boolean;\r\n  useActuals: boolean;\r\n  status: string;\r\n}\r\n\r\nexport class LocationContactDTO {\r\n  id: string;\r\n  contactType: ContactTypesDTO[];\r\n  firstName: string;\r\n  lastName: string;\r\n  emailAddress: string;\r\n  businessName: string;\r\n  address1: string;\r\n  address2: string;\r\n  city: string;\r\n  state: string;\r\n  zip: string;\r\n  phone: string;\r\n  cell: string;\r\n  fax: string;\r\n  ext: string;\r\n  prior: string;\r\n  locationDTO: LocationDTO[];\r\n  brandDTO: BrandDTO[];\r\n  status: string;\r\n}\r\nexport class ExclusionBurdensDTO {\r\n  id: string;\r\n  jobDescription: string;\r\n  type: string;\r\n  dPercentage: bigint;\r\n  dGL: string;\r\n  dEorC: string;\r\n  dOffsetEorC: string;\r\n  cPercentage: bigint;\r\n  cGL: string;\r\n  cEorC: string;\r\n  cOffsetEorC: string;\r\n  offsettingAccount: string;\r\n  includingTips: string;\r\n  locationDTO: LocationDTO[];\r\n  status: string;\r\n  mappingLocationId: string;\r\n  burdenInfoDTO: BurdenInfoDTO[];\r\n  locId: string;\r\n  intracoGLClode: string;\r\n  lSIChargeOut: string;\r\n  revPercentage: string;\r\n  rateNew: string;\r\n  locChargeOut: string;\r\n  revGl: string;\r\n  segmentCode: string;\r\n  debitAndCreditEqual: boolean;\r\n}\r\nexport class LocationMoreInfoDTO {\r\n  id: string;\r\n  contractHours: string;\r\n  managementGroup: string;\r\n  expires: string;\r\n  revisionDate: Date;\r\n  actionDate: Date;\r\n  contractPeriodFrom: Date;\r\n  contractPeriodTo: Date;\r\n  lastDateContractRevised: Date;\r\n  contractedAnnualHours: bigint;\r\n  vertical: string;\r\n  oldLocationID: string;\r\n  sVP: string;\r\n  rVP: string;\r\n  SubsidyMonthlyRate: string;\r\n  pONumber: string;\r\n  openDate: Date;\r\n  closeDate: Date;\r\n  status: string;\r\n}\r\n\r\nexport class Locations {\r\n  id: string;\r\n  locationID: string;\r\n  name: string;\r\n  locationWithID: string;\r\n  companyName?: string;\r\n}\r\nexport class filterDTO {\r\n  key: string;\r\n  operation: string;\r\n  value: string;\r\n}\r\nexport class TenderTypesLocationLinkDTO {\r\n  id: string;\r\n  locationDTO: LocationDTO[];\r\n  tenderTypesDTO: TenderTypesDTO[];\r\n  status: string;\r\n}\r\nexport class TenderTypesDTO {\r\n  id: string;\r\n  code: string;\r\n  description: string;\r\n  glCode: number;\r\n  isPCI: boolean;\r\n  status: string;\r\n  tenderTypesLnkDTO: TenderTypesLinkDTO[];\r\n  uniqueIdentifier?: string;\r\n}\r\nexport class TenderTypesLinkDTO {\r\n  id: string;\r\n  tenderTypesDTO: TenderTypesDTO[];\r\n  locationDTO: LocationDTO[];\r\n  status: string;\r\n}\r\n\r\nexport class RevenueTypesDTO {\r\n  code: string;\r\n  companyName: string;\r\n  description: string;\r\n  glNumber: number;\r\n  id: string;\r\n  oneGL: string;\r\n  ptlGLNumber?: string;\r\n  uniqueIdentifier?: string;\r\n  revenueTypesLocationLinkDTO: RevenueTypesLocationLinkDTO[];\r\n  status: string;\r\n}\r\n\r\nexport class RevenueTypesLocationLinkDTO {\r\n  id: string;\r\n  revenueTypesDTO: RevenueTypesDTO[];\r\n  locationDTO: LocationDTO[];\r\n  status: string;\r\n}\r\nexport class BankAccountsLocationLinkDTO {\r\n  id: string;\r\n  locationDTO: LocationDTO[];\r\n  bankAccountsDTO: BankAccountsDTO[];\r\n  status: string;\r\n}\r\nexport class BankAccountsDTO {\r\n  accountNumber: string;\r\n  accountType: string;\r\n  bankAccountsLocationLinkDTO: BankAccountsLocationLinkDTO[];\r\n  bankName: string;\r\n  contactTypesID: string;\r\n  description: string;\r\n  glNumber: number;\r\n  id: string;\r\n  oneGL: string;\r\n  routingNumber: number;\r\n  status: string;\r\n  brandDTO: BrandDTO;\r\n  uniqueIdentifier?: string;\r\n}\r\n\r\nexport class UserDTO {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  emailAddress: string;\r\n  userName: string;\r\n  phone: string;\r\n  status: string;\r\n  usertype: string;\r\n  rolesDTO: RoleDTO[];\r\n  usersLocationLinkDTO: UserLocationLinkDTO[];\r\n  brandDTO: BrandDTO[];\r\n  brandCode: string;\r\n  displayName: string;\r\n}\r\n\r\nexport class SourceDTO {\r\n  id: string;\r\n  amount: string;\r\n  bankAccountsDTO: BankAccountsDTO;\r\n  bankAmount: bigint; // THIS IS ONLY FOR RECONCILE PURPOSE SHOULDN,T USE ANY WHERE...\r\n  checkNumber: string;\r\n  correctiveDescr: string;\r\n  correctiveYn: string;\r\n  deferredMonth1: string;\r\n  deferredYear1: string;\r\n  deferredAmount1: string;\r\n  deferredMonth2: string;\r\n  deferredYear2: string;\r\n  deferredAmount2: string;\r\n  deferredMonth3: string;\r\n  deferredYear3: string;\r\n  deferredAmount3: string;\r\n  deferredMonth4: string;\r\n  deferredYear4: string;\r\n  deferredAmount4: string;\r\n  deferredMonth5: string;\r\n  deferredYear5: string;\r\n  deferredAmount5: string;\r\n  deferredMonth6: string;\r\n  deferredYear6: string;\r\n  deferredAmount6: string;\r\n  deferredMonth7: string;\r\n  deferredYear7: string;\r\n  deferredAmount7: string;\r\n  deferredMonth8: string;\r\n  deferredYear8: string;\r\n  deferredAmount8: string;\r\n  deferredMonth9: string;\r\n  deferredYear9: string;\r\n  deferredAmount9: string;\r\n  deferredMonth10: string;\r\n  deferredYear10: string;\r\n  deferredAmount10: string;\r\n  deferredMonth11: string;\r\n  deferredYear11: string;\r\n  deferredAmount11: string;\r\n  deferredMonth12: string;\r\n  deferredYear12: string;\r\n  deferredAmount12: string;\r\n  // differedAmounts: differedAmountDates[];\r\n  deferredYn: string;\r\n  depositIdentifier: string;\r\n  dueToLocAmount: string;\r\n  dueToLocation: string;\r\n  exportNavisionBy: UserDTO;\r\n  exportNavisionDate: Date;\r\n  locationDTO: LocationDTO;\r\n  payor: string;\r\n  pci: boolean;\r\n  postedBy: UserDTO;\r\n  postedNavisionDate: Date;\r\n  postingDate: Date;\r\n  reconciledDate: Date;\r\n  revenueDTO: RevenueDTO;\r\n  // revenueTypesDTO: RevenueTypesDTO[];\r\n  revenueTypesDTO: RevenueTypesDTO;\r\n  serviceDTO: IServiceDTO;\r\n  sourceNotesDTO: SourceNotesDTO;\r\n  sourceRevenueDate: Date;\r\n  sourceRevenueType: string;\r\n  sourceServiceName: string;\r\n  status: string;\r\n  subAccountCode: string;\r\n  submittedBy: UserDTO[];\r\n  submittedDate: Date;\r\n  tenderTypesDTO: TenderTypesDTO[];\r\n  transactionDate: string;\r\n  carCount: bigint;\r\n  taxExemption: boolean;\r\n  dataIs: { description: string };\r\n}\r\n\r\nexport class IServiceDTO {\r\n  id: string;\r\n  serviceId: string;\r\n  serviceIdName: string;\r\n  serviceType: string;\r\n  serviceGroupName: string;\r\n  realEstateName: string;\r\n  realEstateNumber: string;\r\n  realEstateId: string;\r\n  applicableForDarma: boolean;\r\n}\r\nexport class differedAmountDates {\r\n  deferredAmount: string;\r\n  deferredMonth: string;\r\n  deferredYear: string;\r\n}\r\nexport class SourceNotesDTO {\r\n  id: string;\r\n  noteHeading: string;\r\n  notes: string;\r\n  sourceDTO: SourceDTO[];\r\n  status: string;\r\n}\r\nexport class RoleDTO {\r\n  id: number;\r\n  name: string;\r\n  code: string;\r\n  usertype: string;\r\n  description: string;\r\n  users: UserDTO[];\r\n  permissionsDTO?: PermissionDTO[];\r\n}\r\n\r\nexport class PermissionDTO {\r\n  id: number;\r\n  name: string;\r\n  roles: RoleDTO[];\r\n}\r\nexport class UserLocationLinkDTO {\r\n  id: string;\r\n  userDTO: UserDTO[];\r\n  locationDTO: LocationDTO[];\r\n  status: string;\r\n}\r\nexport class ContactTypesDTO {\r\n  id: string;\r\n  code: string;\r\n  description: string;\r\n  status: string;\r\n}\r\nexport class SearchDTO {\r\n  page: number;\r\n  per_page: number;\r\n  sort: SortDTO[];\r\n}\r\nexport class SortDTO {\r\n  field: string;\r\n  direction: string;\r\n}\r\n\r\n/** New Interfaces */\r\nexport class RevenueTypesLocations {\r\n  id: string;\r\n  revenueTypesDTO: RevenueTypesDTO;\r\n  locationDTO: LocationDTO;\r\n  status: string;\r\n  serviceDTO: IServiceDTO;\r\n}\r\n\r\nexport class ITenderTypesServiceLinks {\r\n  id: string;\r\n  locationDTO: LocationContactDTO;\r\n  serviceDTO: any;\r\n  status: string;\r\n  tenderTypesDTO: {\r\n    id: string;\r\n    code: string;\r\n    description: string;\r\n    isPCI: boolean;\r\n    glCode: string;\r\n    status: string;\r\n    tenderTypesLnkDTO: any;\r\n  };\r\n}\r\n\r\nexport class IBankAccountServiceLinks {\r\n  id: string;\r\n  locationDTO: any;\r\n  serviceDTO: IServiceDTO;\r\n  status: string;\r\n  bankAccountsDTO: BankAccountsDTO;\r\n}\r\n\r\nexport interface IRevenueDTO {\r\n  id: string; // there\r\n  locationDTO: LocationDTO; // there\r\n  bankAccountsDTO: BankAccountsDTO; // there;\r\n  postedBy: any; // there\r\n  postingDate: Date; // there\r\n  status: string; // there\r\n  revenueDate: string; // there\r\n  amount: string; // there\r\n  numberOfDeposits: number; // there\r\n  submittedBy: UserDTO; // there\r\n  submittedDate: string; // there\r\n  reconciledDate: Date;\r\n  depositIdentifier: string;\r\n  tenderTypesDTO: TenderTypesDTO;\r\n  notesDTO: RevenueNotesDTO[];\r\n  sourcesDTO: SourceDTO[];\r\n  markForCorrection: boolean;\r\n  bankAmount: bigint;\r\n  verificationStatus: string;\r\n  markForCorrectionDate: Date;\r\n  exportNavisionDate: Date;\r\n  exportNavisionBy: UserDTO;\r\n  corrInc: number;\r\n  serviceDTO: IServiceDTO;\r\n  close?: boolean;\r\n  submittedByFLname?: string;\r\n  revenueSourceDetails?: SourceDTO[];\r\n}\r\n\r\nexport interface IRevisionDTO {\r\n  id: string;\r\n  amount: number;\r\n  billable: string;\r\n  service: IServiceDTO;\r\n  serviceCodes: ServiceCodesDTO;\r\n  jobCodes: JobCodesDTO;\r\n  glCodeDetails: GLCodes;\r\n  location: LocationDTO;\r\n  payDate: string;\r\n  payRevisionIdentifier: string;\r\n  payRevisionStatus: string;\r\n  approvedBy: UserDTO;\r\n  approvedOn: string;\r\n  reasonForRequest: string;\r\n  transactionType: string;\r\n  close: boolean;\r\n  brand: BrandDTO;\r\n  tenderTypes: TenderTypesDTO;\r\n  revisionType: string;\r\n  status: string;\r\n}\r\n\r\nexport class IRealEstateServicesIds {\r\n  applicableForDarma: boolean;\r\n  closeDate: Date;\r\n  id: string;\r\n  brandCode?: string;\r\n  companyId?: string;\r\n  contractType?: string;\r\n  openDate: Date;\r\n  realEstateId: string;\r\n  realEstateName: string;\r\n  realEstateNumber: string;\r\n  serviceGroupName: string;\r\n  serviceId: string;\r\n  serviceIdName: string;\r\n  serviceType: string;\r\n  serviceNameWithID?: string;\r\n}\r\n\r\nexport class ServiceCodesDTO {\r\n  id: string;\r\n  serviceIdType: string;\r\n  serviceCode: string;\r\n  serviceCodeDescription: string;\r\n}\r\n\r\nexport class JobCodesDTO {\r\n  id: string;\r\n  jobCode: string;\r\n  directCost: boolean;\r\n  indirectCost: boolean;\r\n  sGandA: boolean;\r\n  serviceCode: string;\r\n}\r\n\r\nexport class GLCodes {\r\n  id: string;\r\n  glCodes: string;\r\n  glCodesDescription: string;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\model\\roles.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\model\\sidenavbar.model.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\model\\userModel.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[85,88],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[85,88],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[190,193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[190,193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[290,293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[290,293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[356,359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[356,359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[491,494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[491,494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[507,510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[507,510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface IUser {\r\n  firstName?: string;\r\n  brandCode?: string;\r\n  brandDTO?: any;\r\n  displayName?: string;\r\n  emailAddress?: string;\r\n  id?: string;\r\n  lastName?: string;\r\n  phone?: any;\r\n  rolesDTO?: IRolesDTO[];\r\n  status?: string;\r\n  userName?: string;\r\n  usersLocationLinkDTO?: any[];\r\n  usertype?: string;\r\n  close?: boolean;\r\n  userDetails?: any;\r\n}\r\nexport interface IRolesDTO {\r\n  code?: string;\r\n  description?: string;\r\n  id?: string;\r\n  name?: string;\r\n  permissionsDTO?: any;\r\n  users?: any;\r\n  usertype?: string;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\paginatore-intl\\paginator-intl.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":18,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":18,"endColumn":50}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MatPaginatorIntl } from '@angular/material/paginator';\r\n\r\n// const dutchRangeLabel = (page: number, pageSize: number, length: number) => {\r\n//   if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\r\n\r\n//   length = Math.max(length, 0);\r\n\r\n//   const startIndex = page * pageSize;\r\n\r\n//   // If the start index exceeds the list length, do not try and fix the end index to the end.\r\n//   const endIndex = startIndex < length ?\r\n//       Math.min(startIndex + pageSize, length) :\r\n//       startIndex + pageSize;\r\n\r\n//   return `${startIndex + 1} - ${endIndex} of ${length}`;\r\n// }\r\n\r\nexport function getCustomTranslatePaginatorIntl() {\r\n  const paginatorIntl = new MatPaginatorIntl();\r\n\r\n  paginatorIntl.itemsPerPageLabel = 'Rows per page:';\r\n  // paginatorIntl.getRangeLabel = dutchRangeLabel;\r\n\r\n  return paginatorIntl;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\pipes\\status.pipe.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PipeTransform' is defined but never used.","line":1,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[156,159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[156,159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[184,187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[184,187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Pipe, PipeTransform } from '@angular/core';\r\n@Pipe({\r\n  name: 'filter'\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n  transform(items: any[], searchText: string): any[] {\r\n    if (!items) return [];\r\n    if (!searchText) return items;\r\n\r\n    searchText = searchText.toLowerCase();\r\n    return items.filter((it) => {\r\n      return it.name.toLowerCase().includes(searchText);\r\n    });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\responsive-design\\mat-grid-list-responsive\\mat-grid-list-responsive.directive.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnChanges' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnDestroy' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SimpleChanges' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Observable' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BreakpointObserver' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatGridList' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":69,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":80,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":80,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":91,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":91,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":97,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":97,"endColumn":16}],"errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Directive,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Host,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { Observable, BehaviorSubject, Subscription, merge, of } from 'rxjs';\r\nimport { filter, switchMap, map } from 'rxjs/operators';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { MatGridList } from '@angular/material/grid-list';\r\n\r\nfunction calCols(matchedBreakpoint: MatchedBreakpoint): number {\r\n  switch (matchedBreakpoint) {\r\n    case MatchedBreakpoint.XLarge:\r\n      return 5;\r\n    case MatchedBreakpoint.Large:\r\n      return 4;\r\n    case MatchedBreakpoint.Medium:\r\n      return 3;\r\n    case MatchedBreakpoint.Small:\r\n      return 2;\r\n    case MatchedBreakpoint.XSmall:\r\n    default:\r\n      return 1;\r\n  }\r\n}\r\n\r\nenum MatchedBreakpoint {\r\n  XLarge,\r\n  Large,\r\n  Medium,\r\n  Small,\r\n  XSmall\r\n}\r\n\r\n@Directive({\r\n  selector: 'mat-grid-list[responsive]',\r\n  exportAs: 'matGridListResponsive'\r\n})\r\nexport class MatGridListResponsive implements OnInit, OnChanges, OnDestroy {\r\n  @Input('responsive') responsive = false;\r\n  private responsive$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\r\n    this.responsive\r\n  );\r\n\r\n  @Output('responsiveColsChange')\r\n  colsChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  private breakPointObservable: Observable<MatchedBreakpoint>;\r\n  private breakPointObserverSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    @Host() private matGridList: MatGridList,\r\n    private breakpointObserver: BreakpointObserver\r\n  ) {\r\n    this.matGridList.cols = 1;\r\n\r\n    const buildObservable = (\r\n      alias: MatchedBreakpoint,\r\n      breakPoint: string\r\n    ): Observable<MatchedBreakpoint> =>\r\n      this.breakpointObserver.observe(breakPoint).pipe(\r\n        filter((state) => state.matches),\r\n        map((state) => alias)\r\n      );\r\n    this.breakPointObservable = merge(\r\n      buildObservable(MatchedBreakpoint.XLarge, Breakpoints.XLarge),\r\n      buildObservable(MatchedBreakpoint.Large, Breakpoints.Large),\r\n      buildObservable(MatchedBreakpoint.Medium, Breakpoints.Medium),\r\n      buildObservable(MatchedBreakpoint.Small, Breakpoints.Small),\r\n      buildObservable(MatchedBreakpoint.XSmall, Breakpoints.XSmall)\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.breakPointObserverSubscription = this.responsive$\r\n      .pipe(\r\n        switchMap((responsive) =>\r\n          responsive ? this.breakPointObservable : of(MatchedBreakpoint.XSmall)\r\n        ),\r\n        map((matchedBreakpoint) => calCols(matchedBreakpoint))\r\n      )\r\n      .subscribe((cols) => this.setCols(cols));\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.responsive) {\r\n      this.responsive$.next(changes.responsive.currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.breakPointObserverSubscription) {\r\n      this.breakPointObserverSubscription.unsubscribe();\r\n      this.breakPointObserverSubscription = undefined;\r\n    }\r\n  }\r\n\r\n  private setCols(cols: number) {\r\n    this.colsChange.emit(cols);\r\n    this.matGridList.cols = cols;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\services\\AuthService.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRevenueDTO' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BrandsModel' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpResponse' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'string' is defined but never used.","line":24,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lOCAL' is defined but never used.","line":24,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used.","line":117,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editObject' is assigned a value but never used.","line":190,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editObject' is assigned a value but never used.","line":215,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":215,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":802,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":802,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26015,26018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26015,26018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":861,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":861,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27954,27957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27954,27957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":880,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":880,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28663,28666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28663,28666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":919,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":919,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29924,29927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29924,29927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":958,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":958,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31069,31072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31069,31072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":977,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":977,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31770,31773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31770,31773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1021,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1021,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33138,33141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33138,33141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1291,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1291,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42074,42077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42074,42077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TestBed } from '@angular/core/testing';\nimport {\n  HttpClientTestingModule,\n  HttpTestingController\n} from '@angular/common/http/testing';\nimport { ApiService } from './api.service';\nimport { PersistenceService } from 'angular-persistence';\nimport { AuthenticateService } from './AuthService';\nimport {\n  IRevenueDTO,\n  LocationDTO,\n  Locations\n} from '../model/revenueSource.model';\nimport { BrandsModel } from '../model/applicationModel';\nimport { HttpResponse } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\ndescribe('AuthenticateService', () => {\n  let service: AuthenticateService;\n  const CONFIG = environment;\n\n  beforeEach(() => {\n    const apiServiceStub = () => ({ sessionUser: { access_token: {} } });\n    const persistenceServiceStub = () => ({ get: (string, lOCAL) => ({}) });\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [\n        AuthenticateService,\n        { provide: ApiService, useFactory: apiServiceStub },\n        { provide: PersistenceService, useFactory: persistenceServiceStub }\n      ]\n    });\n    service = TestBed.inject(AuthenticateService);\n  });\n\n  it('can load instance', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it(`API_USER_TYPE has default value`, () => {\n    expect(service.API_USER_TYPE).toEqual(`DARMA`);\n  });\n\n  it(`API_ORG has default value`, () => {\n    expect(service.API_ORG).toEqual(`lanier`);\n  });\n\n  describe('logout', () => {\n    it('makes expected calls', () => {\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.logout().subscribe((res) => {\n        expect(res).toEqual('');\n      });\n      const req = httpTestingController.expectOne(`${CONFIG.LOGOUT_URI}`);\n      expect(req.request.method).toEqual('DELETE');\n      req.flush('');\n      httpTestingController.verify();\n    });\n  });\n\n  describe('getLocations', () => {\n    it('makes expected calls', () => {\n      const locations = new Locations();\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getLocations().subscribe((res) => {\n        expect(res).toEqual([locations]);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.GET_ONLY_LOCATIONS}`\n      );\n      expect(req.request.method).toEqual('GET');\n      req.flush([locations]);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('getAllBrands', () => {\n    it('makes expected calls', () => {\n      let brandsDto: BrandsModel;\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getAllBrands().subscribe((res) => {\n        expect(res).toEqual([brandsDto]);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.GET_ALL_BRANDS}`\n      );\n      expect(req.request.method).toEqual('GET');\n      req.flush([brandsDto]);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('exportSourceRevenues', () => {\n    it('makes expected calls', () => {\n      // const expectedData: Blob = new Blob(['a', 'b', 'c', 'd']);\n      const reqObj = {\n        page: '1',\n        per_page: '500',\n        filterDTO: [\n          {\n            key: 'revenueDate',\n            operation: ':',\n            value: '2021-04-01T00:00:00.000_2021-04-05T00:00:00.000'\n          },\n          {\n            key: 'brand2',\n            operation: ':',\n            value: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D'\n          }\n        ],\n        sort: [\n          { field: 'revenueDate', direction: 'DESC' },\n          { field: 'revenueDate', direction: 'DESC' }\n        ]\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.exportSourceRevenues(reqObj).subscribe((res) => {\n        // expect(res).toEqual([brandsDto]);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.DARMA_BASE_URI}${CONFIG.EXPORT_SOURCE}`\n      );\n      expect(req.request.method).toEqual('POST');\n      // req.flush([brandsDto]);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('getLocationsBasedOnBrand', () => {\n    const locations = new Locations();\n    const bodyIs = {\n      id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\n      code: 'All'\n    };\n    it('makes expected calls', () => {\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getLocationsBasedOnBrand(bodyIs).subscribe((res) => {\n        expect(res).toEqual([locations]);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.BRAND_LOCATIONS}`\n      );\n\n      expect(req.request.method).toEqual('POST');\n      expect(req.request.body).toEqual(bodyIs);\n      req.flush([locations]);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('getEditRevenuesData', () => {\n    const editObject = new Object() as IRevenueDTO;\n    it('makes expected calls', () => {\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service\n        .getEditRevenuesData('ab983199-16c5-41ae-89b3-f580823793ad')\n        .subscribe((res) => {\n          expect(res).toEqual(editObject);\n        });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.DARMA_BASE_URI}${CONFIG.REVENUES}/ab983199-16c5-41ae-89b3-f580823793ad`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush(editObject);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('getEditRevenuesData', () => {\n    const editObject = new Object() as IRevenueDTO;\n    it('makes expected calls', () => {\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service\n        .getEditRevenuesData('ab983199-16c5-41ae-89b3-f580823793ad')\n        .subscribe((res) => {\n          expect(res).toEqual(editObject);\n        });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.DARMA_BASE_URI}${CONFIG.REVENUES}/ab983199-16c5-41ae-89b3-f580823793ad`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush(editObject);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('lockUnlockLocation', () => {\n    const editObject = new Object() as IRevenueDTO;\n    it('makes expected calls', () => {\n      const returnRes = {\n        id: '578c9f28-84f3-4e66-b29c-4d9f62593cab',\n        month: 3,\n        year: 2021,\n        lock: false\n      };\n      const reqObj = { month: 3, year: 2021, lock: 'false' };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.lockUnlockLocation(reqObj).subscribe((res) => {\n        expect(res).toEqual(returnRes);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.DARMA_BASE_URI}${CONFIG.LOCK_UNLOCK}`\n      );\n\n      expect(req.request.method).toEqual('POST');\n      expect(req.request.body).toEqual(reqObj);\n      req.flush(returnRes);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('lockUnlockLocation', () => {\n    const editObject = new Object() as IRevenueDTO;\n    it('makes expected calls', () => {\n      const returnRes = {\n        id: '578c9f28-84f3-4e66-b29c-4d9f62593cab',\n        month: 3,\n        year: 2021,\n        lock: false\n      };\n      const reqObj = { month: 3, year: 2021, lock: 'false' };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.lockUnlockLocation(reqObj).subscribe((res) => {\n        expect(res).toEqual(returnRes);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.DARMA_BASE_URI}${CONFIG.LOCK_UNLOCK}`\n      );\n\n      expect(req.request.method).toEqual('POST');\n      expect(req.request.body).toEqual(reqObj);\n      req.flush(returnRes);\n      httpTestingController.verify();\n    });\n  });\n\n  // Check Lockmonth\n  describe('checkLockUnlock', () => {\n    it('makes expected calls', () => {\n      const reqObj = {};\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.checkLockUnlock('2021-04-02').subscribe((res) => {\n        expect(res).toEqual('');\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.DARMA_BASE_URI}${CONFIG.CHECK_LOCK}/2021-04-02`\n      );\n\n      expect(req.request.method).toEqual('POST');\n      expect(req.request.body).toEqual(reqObj);\n      req.flush('');\n      httpTestingController.verify();\n    });\n  });\n\n  // Get services\n  describe('getServiceId', () => {\n    it('makes expected calls', () => {\n      const resObj = {\n        id: '7db85e54-a3c2-4c69-8ec1-9452d2d73fd7',\n        serviceId: 'PA-1001087',\n        serviceIdName: 'FAIRBANKS INTERNATIONAL  Parking',\n        serviceType: 'Parking',\n        serviceGroupName: null,\n        realEstateName: 'FAIRBANKS INTERNATIONAL',\n        realEstateNumber: 'US-AK-RE-1003632',\n        realEstateId: 'e6e82143-3c75-45c6-bc6c-0952cbc22cc1',\n        openDate: null,\n        closeDate: null,\n        contractType: 'LEASED',\n        companyId: 'RPS001',\n        brandCode: 'Republic Parking',\n        status: null,\n        applicableForDarma: true\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service\n        .getServiceId('e6e82143-3c75-45c6-bc6c-0952cbc22cc1')\n        .subscribe((res) => {\n          expect(res).toEqual(resObj);\n        });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.SERVCICEID_BASED_ON_LOCATION}?location_id=e6e82143-3c75-45c6-bc6c-0952cbc22cc1`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush(resObj);\n      httpTestingController.verify();\n    });\n  });\n\n  // Get services codes\n  describe('getServiceCodes', () => {\n    it('makes expected calls', () => {\n      const resObj = {\n        id: '1a09cae9-68f0-40f9-b0ee-38c501a2fa8d',\n        serviceIdType: 'Parking',\n        serviceCode: 'PA04',\n        serviceCodeDescription: 'Event'\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getServiceCodes('Parking').subscribe((res) => {\n        expect(res).toEqual(resObj);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.PAY_REVISION_BASE_URI}${CONFIG.SERVICECODE_BASED_ON_SERVICE_TYPE}?serviceId_type=Parking`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush(resObj);\n      httpTestingController.verify();\n    });\n  });\n\n  // Get services Job codes\n  describe('getJobCodes', () => {\n    it('makes expected calls', () => {\n      const resObj = {\n        id: '73ebc8a5-c742-4fd6-8b96-a37d8d7bd2aa',\n        jobCode: 'Valet Supervisor',\n        directCost: true,\n        indirectCost: false,\n        serviceCode: 'PA04',\n        sgandA: false\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getJobCodes('PA04').subscribe((res) => {\n        expect(res).toEqual(resObj);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.PAY_REVISION_BASE_URI}${CONFIG.JOBCODES_BASED_ON_SERVICE_CODE}?servicecode=PA04`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush(resObj);\n      httpTestingController.verify();\n    });\n  });\n\n  // Get getGlCodes Job codes\n  describe('getGlCodes', () => {\n    it('makes expected calls', () => {\n      const resObj = {\n        id: '0b67aa92-c465-4930-8872-542f9a3e2831',\n        glCodes: '700530',\n        glCodesDescription: 'Wages - Bonus',\n        revisionType: 'PR'\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getGlCodes('VALET').subscribe((res) => {\n        expect(res).toEqual(resObj);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.PAY_REVISION_BASE_URI}${CONFIG.GL_BASED_ON_JOB_CODE}?jobCode=VALET`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush(resObj);\n      httpTestingController.verify();\n    });\n  });\n\n  // Get getGlCodes Job codes\n  describe('searchPayRevision', () => {\n    it('makes expected calls', () => {\n      const resObj = {\n        id: 'a1ffcb97-6e60-4759-bdb9-da89c1dba188',\n        amount: 50.55,\n        billable: 'N',\n        service: {\n          id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\n          serviceId: 'PA-1000428',\n          serviceIdName: 'Bank of America Tower Parking',\n          serviceType: 'Parking',\n          serviceGroupName: 'Parking',\n          realEstateName: 'Bank of America Tower',\n          realEstateNumber: 'US-FL-RE-1003115',\n          realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\n          openDate: null,\n          closeDate: null,\n          contractType: 'MANAGED',\n          companyId: 'PK001',\n          brandCode: 'CLH (PK1)',\n          status: null,\n          applicableForDarma: true\n        },\n        serviceCodes: {\n          id: '1a09cae9-68f0-40f9-b0ee-38c501a2fa8d',\n          serviceIdType: 'Parking',\n          serviceCode: 'PA04',\n          serviceCodeDescription: 'Event'\n        },\n        jobCodes: {\n          id: '31a0941c-5bff-4b4f-b151-5a72f9ad9c8c',\n          jobCode: 'Valet Lead',\n          directCost: true,\n          indirectCost: false,\n          serviceCode: 'PA04',\n          sgandA: false\n        },\n        glCodeDetails: {\n          id: '54969372-c59a-474e-81a6-d9af488cc2a2',\n          glCodes: '700515',\n          glCodesDescription: 'Wages - Sickpay',\n          revisionType: 'PR'\n        },\n        location: {\n          id: '19b9f5d0-09f6-472a-8735-e2560e010503',\n          locationID: 'US-FL-RE-1003115',\n          name: 'Bank of America Tower',\n          clientLegalName: null,\n          address1: '101 East Kennedy Blvd',\n          address2: null,\n          city: 'TAMPA',\n          county: null,\n          state: 'FL',\n          zipCode: '33602',\n          status: 'A',\n          phone: null,\n          cell: null,\n          fax: null,\n          ext: null,\n          companyName: 'CLH (PK1)',\n          executive: null,\n          serviceType: null,\n          contractType: null,\n          applicableForDarma: true,\n          noofSpaces: null,\n          subsidyType: null,\n          parentLocationID: 'PO40001000',\n          parentLocationName: 'Bank of America Tower',\n          tenderTypesLnkDTO: [],\n          revenueTypesLnkDTO: [],\n          bankAccountsLocationLinkDTO: [],\n          burdensDTO: [],\n          darmaUser: null,\n          brandCode: 'CLH (PK1)',\n          brandDTO: {\n            id: '5ab0936a-b38d-43c2-9e58-3d4245a607ee',\n            code: 'CLH (PK1)',\n            status: 'A',\n            logo: '',\n            description: 'CLH (AmeriPark)',\n            userDTO: []\n          },\n          dataView: null,\n          hoursOfOperation: null,\n          noOfGarageLevels: null,\n          noOfEntryLanes: null,\n          noOfExitLanes: null,\n          parcsManufacture: null,\n          dateOfLastMonthlyRateIncrease: null,\n          dateOfLastTransientRateIncrease: null,\n          typeOfFacility: null,\n          dueDay: null,\n          settlementDay: null,\n          iconName: null,\n          primaryContactId: null,\n          locationNotes: null,\n          active: null,\n          deleted: null\n        },\n        payDate: '2021-04-01T05:04:00.000',\n        payRevisionIdentifier: 'PR-REEF-7e0f3b-210401170400',\n        payRevisionStatus: 'P',\n        approvedBy: null,\n        approvedOn: null,\n        reasonForRequest: 'test',\n        transactionType: 'D',\n        revisionType: 'PR',\n        brand: null,\n        tenderTypes: null,\n        status: 'X',\n        submittedBy: null\n      };\n      const reqObj = {\n        page: '1',\n        per_page: '500',\n        filterDTO: [\n          { key: 'revisionType', operation: ':', value: 'PR' },\n          {\n            key: 'payDate',\n            operation: ':',\n            value: '2021-04-01T00:00:00.000_2021-04-05T14:12:00.000'\n          }\n        ],\n        sort: []\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getListBySearch(reqObj).subscribe((res) => {\n        expect(res).toEqual(resObj);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.PAY_REVISION_BASE_URI}${CONFIG.GET_LIST_BY_SEARCH}`\n      );\n\n      expect(req.request.method).toEqual('POST');\n      expect(req.request.body).toEqual(reqObj);\n      req.flush(resObj);\n      httpTestingController.verify();\n    });\n  });\n\n  // Get all payrevisions\n  describe('getAllPayrevision', () => {\n    it('makes expected calls', () => {\n      const payloadobj = {\n        page: 1,\n        revisionType: 'PR',\n        pages: 500\n      };\n      const resObj = {\n        id: '8604a333-8a8c-4026-aa5d-253b4a61b42b',\n        amount: 144,\n        billable: 'N',\n        service: {\n          id: '7db85e54-a3c2-4c69-8ec1-9452d2d73fd7',\n          serviceId: 'PA-1001087',\n          serviceIdName: 'FAIRBANKS INTERNATIONAL  Parking',\n          serviceType: 'Parking',\n          serviceGroupName: null,\n          realEstateName: 'FAIRBANKS INTERNATIONAL',\n          realEstateNumber: 'US-AK-RE-1003632',\n          realEstateId: 'e6e82143-3c75-45c6-bc6c-0952cbc22cc1',\n          openDate: null,\n          closeDate: null,\n          contractType: 'LEASED',\n          companyId: 'RPS001',\n          brandCode: 'Republic Parking',\n          status: null,\n          applicableForDarma: true\n        },\n        serviceCodes: {\n          id: '1a09cae9-68f0-40f9-b0ee-38c501a2fa8d',\n          serviceIdType: 'Parking',\n          serviceCode: 'PA04',\n          serviceCodeDescription: 'Event'\n        },\n        jobCodes: {\n          id: 'fb2a58de-2846-4e02-ae75-b4737d3cc1d4',\n          jobCode: 'Valet Midnight',\n          directCost: true,\n          indirectCost: false,\n          serviceCode: 'PA04',\n          sgandA: false\n        },\n        glCodeDetails: {\n          id: '0b67aa92-c465-4930-8872-542f9a3e2831',\n          glCodes: '700530',\n          glCodesDescription: 'Wages - Bonus',\n          revisionType: 'PR'\n        },\n        location: {\n          id: 'e6e82143-3c75-45c6-bc6c-0952cbc22cc1',\n          locationID: 'US-AK-RE-1003632',\n          name: 'FAIRBANKS INTERNATIONAL',\n          clientLegalName: null,\n          address1: '6450 AIRPORT WAY',\n          address2: null,\n          city: 'FAIRBANKS',\n          county: null,\n          state: 'AK',\n          zipCode: '99709',\n          status: 'A',\n          phone: null,\n          cell: null,\n          fax: null,\n          ext: null,\n          companyName: 'Republic Parking',\n          executive: null,\n          serviceType: null,\n          contractType: null,\n          applicableForDarma: true,\n          noofSpaces: null,\n          subsidyType: null,\n          parentLocationID: '103-1',\n          parentLocationName: null,\n          tenderTypesLnkDTO: [],\n          revenueTypesLnkDTO: [],\n          bankAccountsLocationLinkDTO: [],\n          burdensDTO: [],\n          darmaUser: null,\n          brandCode: 'Republic Parking',\n          brandDTO: {\n            id: 'e894ba82-378d-446d-aa10-cee345d94b29',\n            code: 'Republic Parking',\n            status: 'A',\n            logo: '',\n            description: 'Republic Parking',\n            userDTO: []\n          },\n          dataView: null,\n          hoursOfOperation: null,\n          noOfGarageLevels: null,\n          noOfEntryLanes: null,\n          noOfExitLanes: null,\n          parcsManufacture: null,\n          dateOfLastMonthlyRateIncrease: null,\n          dateOfLastTransientRateIncrease: null,\n          typeOfFacility: null,\n          dueDay: null,\n          settlementDay: null,\n          iconName: null,\n          primaryContactId: null,\n          locationNotes: null,\n          active: null,\n          deleted: null\n        },\n        payDate: '2021-03-31T11:50:18.000',\n        payRevisionIdentifier: 'PR-REEF-3ac08f-210329140353',\n        payRevisionStatus: 'A',\n        approvedBy: null,\n        approvedOn: null,\n        reasonForRequest: null,\n        transactionType: 'C',\n        revisionType: 'PR',\n        brand: null,\n        tenderTypes: null,\n        status: null,\n        submittedBy: null\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getAllPayrevision(payloadobj).subscribe((res) => {\n        expect(res).toEqual(resObj);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.PAY_REVISION_BASE_URI}${CONFIG.GET_ALL_PAYREVISIONS_LIST}?payrevisionType=PR`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      // expect(req.request.body).toEqual(payloadobj);\n      req.flush(resObj);\n      httpTestingController.verify();\n    });\n  });\n\n  // getUserDetailsBasedOnLocationId\n  describe('getUserDetailsBasedOnLocationId', () => {\n    const usersdata = {\n      id: '5d89c8de-ae15-4179-8c0a-89525c96675d',\n      userDTO: {\n        id: 'ef305a2a-828f-4dd0-b471-386450d99a68',\n        firstName: 'surendra',\n        lastName: 'vemireddy',\n        emailAddress: 'surendra.vemireddy@reeftechnology.com',\n        userName: 'surendra.vemireddy',\n        phone: '',\n        status: 'A',\n        usertype: 'DARMA',\n        rolesDTO: [\n          {\n            id: 7,\n            name: null,\n            code: 'ROLE_DARMA_OWNER',\n            usertype: 'DARMA',\n            description: 'Location User',\n            users: []\n          }\n        ],\n        usersLocationLinkDTO: [\n          {\n            id: '5d89c8de-ae15-4179-8c0a-89525c96675d',\n            userDTO: null,\n            locationDTO: {\n              id: 'ce03c7bd-ed76-48c0-9960-7e521376ccf4',\n              locationID: 'US-FL-RE-1003432',\n              name: '151 Biscayne',\n              clientLegalName: null,\n              address1: '14951 Royal Oaks Lane',\n              address2: null,\n              city: 'MIAMI',\n              county: null,\n              state: 'FL',\n              zipCode: '33181',\n              status: 'A',\n              phone: null,\n              cell: null,\n              fax: null,\n              ext: null,\n              companyName: 'CLH (PK1)',\n              executive: null,\n              serviceType: null,\n              contractType: null,\n              applicableForDarma: true,\n              noofSpaces: null,\n              subsidyType: null,\n              parentLocationID: 'PO40070400',\n              parentLocationName: '151 Biscayne',\n              tenderTypesLnkDTO: [],\n              revenueTypesLnkDTO: [],\n              bankAccountsLocationLinkDTO: [],\n              burdensDTO: [],\n              darmaUser: null,\n              brandCode: 'CLH (PK1)',\n              brandDTO: {\n                id: '5ab0936a-b38d-43c2-9e58-3d4245a607ee',\n                code: 'CLH (PK1)',\n                status: 'A',\n                logo: '',\n                description: 'CLH (AmeriPark)',\n                userDTO: []\n              },\n              dataView: null,\n              hoursOfOperation: null,\n              noOfGarageLevels: null,\n              noOfEntryLanes: null,\n              noOfExitLanes: null,\n              parcsManufacture: null,\n              dateOfLastMonthlyRateIncrease: null,\n              dateOfLastTransientRateIncrease: null,\n              typeOfFacility: null,\n              dueDay: null,\n              settlementDay: null,\n              iconName: null,\n              primaryContactId: null,\n              locationNotes: null,\n              active: null,\n              deleted: null\n            },\n            status: 'A'\n          },\n          {\n            id: 'b3fd3021-0069-45df-8837-64190e60cd24',\n            userDTO: null,\n            locationDTO: {\n              id: '19b9f5d0-09f6-472a-8735-e2560e010503',\n              locationID: 'US-FL-RE-1003115',\n              name: 'Bank of America Tower',\n              clientLegalName: null,\n              address1: '101 East Kennedy Blvd',\n              address2: null,\n              city: 'TAMPA',\n              county: null,\n              state: 'FL',\n              zipCode: '33602',\n              status: 'A',\n              phone: null,\n              cell: null,\n              fax: null,\n              ext: null,\n              companyName: 'CLH (PK1)',\n              executive: null,\n              serviceType: null,\n              contractType: null,\n              applicableForDarma: true,\n              noofSpaces: null,\n              subsidyType: null,\n              parentLocationID: 'PO40001000',\n              parentLocationName: 'Bank of America Tower',\n              tenderTypesLnkDTO: [],\n              revenueTypesLnkDTO: [],\n              bankAccountsLocationLinkDTO: [],\n              burdensDTO: [],\n              darmaUser: null,\n              brandCode: 'CLH (PK1)',\n              brandDTO: {\n                id: '5ab0936a-b38d-43c2-9e58-3d4245a607ee',\n                code: 'CLH (PK1)',\n                status: 'A',\n                logo: '',\n                description: 'CLH (AmeriPark)',\n                userDTO: []\n              },\n              dataView: null,\n              hoursOfOperation: null,\n              noOfGarageLevels: null,\n              noOfEntryLanes: null,\n              noOfExitLanes: null,\n              parcsManufacture: null,\n              dateOfLastMonthlyRateIncrease: null,\n              dateOfLastTransientRateIncrease: null,\n              typeOfFacility: null,\n              dueDay: null,\n              settlementDay: null,\n              iconName: null,\n              primaryContactId: null,\n              locationNotes: null,\n              active: null,\n              deleted: null\n            },\n            status: 'A'\n          }\n        ],\n        brandDTO: null,\n        brandCode: 'CLH (PK1)',\n        displayName: 'surendra vemireddy'\n      },\n      locationDTO: null,\n      status: 'A'\n    };\n    it('makes expected calls', () => {\n      const pages = {\n        page: '1',\n        per_page: '100',\n        id: '93024f48-5bf5-4083-84b6-f6cb0f4abb96'\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service\n        .getUserDetailsBasedOnLocationId(pages.id, pages)\n        .subscribe((res: HttpResponse<any>) => {\n          expect(res.body).toEqual([usersdata]);\n        });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.USER_LOCATION_LINK}?page=1&per_page=100&location_id=93024f48-5bf5-4083-84b6-f6cb0f4abb96`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush([usersdata]);\n      httpTestingController.verify();\n    });\n\n    it('makes expected calls with out pages', () => {\n      const pages = {\n        id: '93024f48-5bf5-4083-84b6-f6cb0f4abb96'\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getUserDetailsBasedOnLocationId(pages.id).subscribe((res) => {\n        expect(res).toEqual([usersdata]);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.USER_LOCATION_LINK}?location_id=93024f48-5bf5-4083-84b6-f6cb0f4abb96`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush([usersdata]);\n      httpTestingController.verify();\n    });\n  });\n\n  // Revenue Details\n  describe('getRevenueTypeDetailsFromApi', () => {\n    const revenueData = {\n      id: '12f0913a-c47d-47a1-a943-7c0d04cba5cd',\n      revenueTypesDTO: {\n        id: '0a9540c6-0de8-4daa-bbd9-1711842ccdc7',\n        code: 'CO01',\n        description: 'Valet',\n        glNumber: '634505',\n        oneGL: null,\n        uniqueIdentifier: 'RR716',\n        revenueTypesLocationLinkDTO: [],\n        status: 'A',\n        contraGlNumber: '634515',\n        ptlGLNumber: '634511'\n      },\n      locationDTO: null,\n      status: 'A',\n      serviceDTO: null\n    };\n    it('makes expected calls', () => {\n      const pages = {\n        page: '1',\n        per_page: '100',\n        id: '93024f48-5bf5-4083-84b6-f6cb0f4abb96'\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service\n        .getRevenueTypeDetailsFromApi(pages)\n        .subscribe((res: HttpResponse<any>) => {\n          expect(res.body).toEqual([revenueData]);\n        });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.REVENUE_TYPE_SERVICEID_LINK}?page=1&per_page=100&service_id=93024f48-5bf5-4083-84b6-f6cb0f4abb96`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush([revenueData]);\n      httpTestingController.verify();\n    });\n\n    it('makes expected calls with out pages', () => {\n      const pages = {\n        id: '93024f48-5bf5-4083-84b6-f6cb0f4abb96'\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service\n        .getRevenueTypeDetailsFromApi(pages)\n        .subscribe((res: HttpResponse<any>) => {\n          expect(res.body).toEqual([revenueData]);\n        });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.REVENUE_TYPE_SERVICEID_LINK}?service_id=93024f48-5bf5-4083-84b6-f6cb0f4abb96`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush([revenueData]);\n      httpTestingController.verify();\n    });\n  });\n\n  // Get all services Are\n\n  describe('getAllLocations', () => {\n    const servicesAre = {\n      id: '7cc5c9d1-c8b2-41c8-b8f7-18f046df4418',\n      serviceId: 'PA-1000433',\n      serviceIdName: '151 Biscayne Parking',\n      serviceType: 'Parking',\n      serviceGroupName: 'Parking',\n      realEstateName: '151 Biscayne',\n      realEstateNumber: 'US-FL-RE-1003432',\n      realEstateId: 'ce03c7bd-ed76-48c0-9960-7e521376ccf4',\n      openDate: null,\n      closeDate: null,\n      contractType: 'REVENUE SHARE',\n      companyId: 'PK001',\n      brandCode: 'CLH (PK1)',\n      status: null,\n      applicableForDarma: true\n    };\n    it('makes expected calls', () => {\n      const pages = {\n        page: '1',\n        per_page: '100'\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getAllLocations(pages).subscribe((res: HttpResponse<any>) => {\n        expect(res.body).toEqual([servicesAre]);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.GET_SERVICEID}?page=1&per_page=100`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush([servicesAre]);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('getTenderDetailsfromapi', () => {\n    const tenderData = {\n      id: '0ca3a78a-487e-4e9d-b689-91bcf9cd66f4',\n      tenderTypesDTO: {\n        id: '6e7a306b-60d2-4e2b-bbcd-d5e1f2f7ea08',\n        code: 'ACH/Wire',\n        description: 'ACH/Wire',\n        uniqueIdentifier: 'RT660',\n        isPCI: true,\n        status: 'A',\n        tenderTypesLnkDTO: [],\n        glCode: '105479'\n      },\n      locationDTO: null,\n      status: 'A',\n      serviceDTO: null\n    };\n    it('makes expected calls', () => {\n      const pages = {\n        page: '1',\n        per_page: '100',\n        id: '93024f48-5bf5-4083-84b6-f6cb0f4abb96'\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service\n        .getTenderDetailsfromapi(pages)\n        .subscribe((res: HttpResponse<any>) => {\n          expect(res.body).toEqual([tenderData]);\n        });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.TENDER_TYPE_SERVICEID_LINK}?page=1&per_page=100&service_id=93024f48-5bf5-4083-84b6-f6cb0f4abb96`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush([tenderData]);\n      httpTestingController.verify();\n    });\n\n    it('makes expected calls with out pages', () => {\n      const pages = {\n        id: '93024f48-5bf5-4083-84b6-f6cb0f4abb96'\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service\n        .getTenderDetailsfromapi(pages)\n        .subscribe((res: HttpResponse<any>) => {\n          expect(res.body).toEqual([tenderData]);\n        });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.TENDER_TYPE_SERVICEID_LINK}?service_id=93024f48-5bf5-4083-84b6-f6cb0f4abb96`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush([tenderData]);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('getBankAccountDetailsfromapi', () => {\n    const bankData = {\n      id: '015e0ee5-b1ea-47eb-a3a9-c43dff5e7cad',\n      bankAccountsDTO: {\n        id: 'd47d9f54-38bc-4423-af32-abd06cc9f509',\n        contactTypesID: null,\n        bankName: 'Generic Bank Account',\n        description: null,\n        accountType: null,\n        accountNumber: null,\n        routingNumber: null,\n        glNumber: '100505',\n        oneGL: null,\n        status: 'A',\n        uniqueIdentifier: 'RB094',\n        bankAccountsLocationLinkDTO: [],\n        brandDTO: null\n      },\n      locationDTO: null,\n      serviceDTO: null,\n      status: 'A'\n    };\n    it('makes expected calls', () => {\n      const pages = {\n        page: '1',\n        per_page: '100',\n        id: '93024f48-5bf5-4083-84b6-f6cb0f4abb96'\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service\n        .getBankAccountDetailsfromapi(pages.id, pages)\n        .subscribe((res: HttpResponse<any>) => {\n          expect(res.body).toEqual([bankData]);\n        });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.BANK_ACCOUNT_SERVICEID_LINK}?page=1&per_page=100&service_id=93024f48-5bf5-4083-84b6-f6cb0f4abb96`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush([bankData]);\n      httpTestingController.verify();\n    });\n\n    it('makes expected calls with out pagination', () => {\n      const id = '93024f48-5bf5-4083-84b6-f6cb0f4abb96';\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getBankAccountDetailsfromapi(id).subscribe((res) => {\n        expect(res).toEqual([bankData]);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.LMR_BASE_URI}${CONFIG.BANK_ACCOUNT_SERVICEID_LINK}?service_id=93024f48-5bf5-4083-84b6-f6cb0f4abb96`\n      );\n\n      expect(req.request.method).toEqual('GET');\n      req.flush([bankData]);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('createRevenueAndSource', () => {\n    const saveObject = {\n      revenueDate: '2021-04-02T00:00:00.000',\n      depositIdentifier: 'PA-1000063-A9895B6C-04022021190414',\n      amount: '1',\n      status: 'S',\n      serviceDTO: {\n        id: '3622d775-1937-4539-8cd7-ecf5f7b3c996',\n        serviceId: 'PA-1000063',\n        serviceType: 'Parking'\n      },\n      locationDTO: {\n        id: '342d853d-cfed-4b30-a712-495a7c141537',\n        locationID: 'US-IL-RE-1001317'\n      },\n      bankAccountsDTO: {\n        id: '33765630-c801-4464-b7cc-5194452e8b6f',\n        uniqueIdentifier: 'RB756'\n      },\n      tenderTypesDTO: {\n        id: '6e7a306b-60d2-4e2b-bbcd-d5e1f2f7ea08',\n        uniqueIdentifier: 'RT660'\n      },\n      sourcesDTO: [\n        {\n          dueToLocation: null,\n          payor: null,\n          checkNumber: null,\n          dueToLocAmount: null,\n          serviceDTO: {\n            serviceId: 'PA-1000063',\n            serviceType: 'Parking',\n            id: '3622d775-1937-4539-8cd7-ecf5f7b3c996'\n          },\n          correctiveDescr: null,\n          correctiveYn: 'N',\n          revenueTypesDTO: {\n            id: '1a182090-e589-4ee7-aa8e-6085af31d0a6',\n            code: 'PA02',\n            description: 'Administrative Fee Income',\n            uniqueIdentifier: 'RR326'\n          },\n          locationDTO: {\n            id: '342d853d-cfed-4b30-a712-495a7c141537',\n            locationID: 'US-IL-RE-1001317'\n          },\n          amount: '1',\n          carCount: null,\n          taxExemption: null,\n          transactionDate: '2021-04-02T00:00:00.000',\n          subAccountCode: 'B',\n          status: 'S',\n          pci: false,\n          tempId: 0,\n          deferredMonth1: null,\n          deferredYear1: null,\n          deferredAmount1: null,\n          deferredYn: 'N',\n          deferredMonth2: null,\n          deferredYear2: null,\n          deferredAmount2: null,\n          deferredMonth3: null,\n          deferredYear3: null,\n          deferredAmount3: null,\n          deferredMonth4: null,\n          deferredYear4: null,\n          deferredAmount4: null,\n          deferredMonth5: null,\n          deferredYear5: null,\n          deferredAmount5: null,\n          deferredMonth6: null,\n          deferredYear6: null,\n          deferredAmount6: null,\n          deferredMonth7: null,\n          deferredYear7: null,\n          deferredAmount7: null,\n          deferredMonth8: null,\n          deferredYear8: null,\n          deferredAmount8: null,\n          deferredMonth9: null,\n          deferredYear9: null,\n          deferredAmount9: null,\n          deferredMonth10: null,\n          deferredYear10: null,\n          deferredAmount10: null,\n          deferredMonth11: null,\n          deferredYear11: null,\n          deferredAmount11: null,\n          deferredMonth12: null,\n          deferredYear12: null,\n          deferredAmount12: null\n        }\n      ],\n      submittedDate: '2021-04-02T00:00:00.000'\n    };\n    const successRes = { status: 201, message: 'Processed Successfully' };\n    it('makes expected calls', () => {\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.createRevenueAndSource(saveObject).subscribe((res) => {\n        expect(res).toEqual(successRes);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.DARMA_BASE_URI}${CONFIG.MANAGE_REVENUES}`\n      );\n\n      expect(req.request.method).toEqual('POST');\n      req.flush(successRes);\n      httpTestingController.verify();\n    });\n\n    it('makes expected calls to Update', () => {\n      saveObject['id'] = '8584547474c696g';\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.updateRevenueAndSource(saveObject).subscribe((res) => {\n        expect(res).toEqual(successRes);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.DARMA_BASE_URI}${CONFIG.MANAGE_REVENUES}`\n      );\n\n      expect(req.request.method).toEqual('PUT');\n      req.flush(successRes);\n      httpTestingController.verify();\n    });\n\n    it('makes expected calls to Delete', () => {\n      const objectIs = { id: '8584547474c696g' };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.deleteRevenueAndSource(objectIs.id).subscribe((res) => {\n        expect(res).toEqual(successRes);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.DARMA_BASE_URI}${CONFIG.MANAGE_REVENUES}/${objectIs.id}`\n      );\n\n      expect(req.request.method).toEqual('DELETE');\n      req.flush(successRes);\n      httpTestingController.verify();\n    });\n  });\n\n  describe('getRevenuesData', () => {\n    it('makes expected calls', () => {\n      const revenuesIs = {\n        id: 'ab983199-16c5-41ae-89b3-f580823793ad',\n        locationDTO: new LocationDTO(),\n        bankAccountsDTO: {\n          id: '7fd5f560-c2a7-4be3-ac7f-0ecf4eecf80a',\n          contactTypesID: null,\n          bankName: 'ACB- 3346 Peachtree',\n          description: 'ACB- 3346 Peachtree',\n          accountType: null,\n          accountNumber: '1500148919',\n          routingNumber: null,\n          glNumber: null,\n          oneGL: null,\n          status: 'A',\n          uniqueIdentifier: 'RB569',\n          bankAccountsLocationLinkDTO: [],\n          brandDTO: null\n        },\n        postedBy: null,\n        postingDate: null,\n        status: 'S',\n        revenueDate: '2021-03-31T00:00:00.000',\n        amount: 2,\n        numberOfDeposits: 1,\n        submittedBy: {\n          id: 'fc04e1db-eba7-44b5-abc0-88b09bf93d44',\n          firstName: 'Akhilesh',\n          lastName: 'Veerapareddy',\n          emailAddress: 'akhilesh.veerapareddy@reefparking.com',\n          userName: 'akhilesh.veerapareddy',\n          phone: null,\n          status: 'A',\n          usertype: 'DARMA',\n          rolesDTO: [],\n          usersLocationLinkDTO: [],\n          brandDTO: null,\n          brandCode: 'All',\n          displayName: null\n        },\n        submittedDate: '2021-03-31T00:00:00.000',\n        depositIdentifier: 'PA-1000428-E61CC75B-03312021170312',\n        exportNavisionDate: '2021-03-31T11:55:28.443',\n        exportNavisionBy: {\n          id: 'fc04e1db-eba7-44b5-abc0-88b09bf93d44',\n          firstName: 'Akhilesh',\n          lastName: 'Veerapareddy',\n          emailAddress: 'akhilesh.veerapareddy@reefparking.com',\n          userName: 'akhilesh.veerapareddy',\n          phone: null,\n          status: 'A',\n          usertype: 'DARMA',\n          rolesDTO: [],\n          usersLocationLinkDTO: [],\n          brandDTO: null,\n          brandCode: 'All',\n          displayName: null\n        },\n        tenderTypesDTO: {\n          id: '3ab65d13-1818-422c-86b5-3d45bab7c18c',\n          code: 'Amex',\n          description: 'Amex',\n          uniqueIdentifier: 'RT577',\n          isPCI: true,\n          status: 'A',\n          tenderTypesLnkDTO: [],\n          glCode: '105480'\n        },\n        sourcesDTO: [],\n        serviceDTO: {\n          id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\n          serviceId: 'PA-1000428',\n          serviceIdName: 'Bank of America Tower Parking',\n          serviceType: 'Parking',\n          serviceGroupName: 'Parking',\n          realEstateName: null,\n          realEstateNumber: null,\n          realEstateId: null,\n          openDate: null,\n          closeDate: null,\n          contractType: null,\n          companyId: null,\n          brandCode: null,\n          status: null,\n          applicableForDarma: false\n        }\n      };\n      const bodyIs = {\n        page: '1',\n        per_page: '500',\n        filterDTO: [\n          {\n            key: 'revenueDate',\n            operation: ':',\n            value: '2021-04-01T00:00:00.000_2021-04-02T00:00:00.000'\n          }\n        ],\n        sort: [{ field: 'revenueDate', direction: 'DESC' }]\n      };\n      const httpTestingController = TestBed.inject(HttpTestingController);\n      service.getRevenuesData(bodyIs).subscribe((res: HttpResponse<any>) => {\n        expect(res.body).toEqual([revenuesIs]);\n      });\n      const req = httpTestingController.expectOne(\n        `${CONFIG.DARMA_BASE_URI}${CONFIG.SEARCH_REVENUES}`\n      );\n      expect(req.request.method).toEqual('POST');\n      expect(req.request.body).toEqual(bodyIs);\n      req.flush([revenuesIs]);\n      httpTestingController.verify();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\services\\AuthService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpClient' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Observable' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ApiService' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersistenceService' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[556,559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[556,559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[577,580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[577,580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[592,595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[592,595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2006,2009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2006,2009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'user' should be typed with a non-any type.","line":75,"column":9,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":75,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2598,2601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2598,2601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2615,2618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2615,2618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2995,2998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2995,2998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3151,3154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3151,3154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3360,3363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3360,3363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'payloadObj' should be typed with a non-any type.","line":105,"column":28,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":105,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3575,3578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3575,3578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3592,3595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3592,3595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4167,4170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4167,4170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4530,4533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4530,4533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4822,4825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4822,4825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5103,5106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5103,5106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'searchRevenueObj' should be typed with a non-any type.","line":191,"column":19,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":191,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6218,6221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6218,6221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6235,6238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6235,6238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed with a non-any type.","line":201,"column":23,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":201,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6500,6503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6500,6503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6517,6520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6517,6520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'requestObj' should be typed with a non-any type.","line":209,"column":26,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":209,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6732,6735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6732,6735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6749,6752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6749,6752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'requestObj' should be typed with a non-any type.","line":218,"column":26,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":218,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6991,6994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6991,6994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7008,7011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7008,7011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'requestObj' should be typed with a non-any type.","line":228,"column":26,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":228,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7251,7254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7251,7254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7268,7271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7268,7271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'pageRequests' should be typed with a non-any type.","line":248,"column":27,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":248,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7807,7810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7807,7810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7824,7827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7824,7827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'serviceId' should be typed with a non-any type.","line":258,"column":32,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":258,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8344,8347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8344,8347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'pages' should be typed with a non-any type.","line":258,"column":48,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":258,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8357,8360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8357,8360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8374,8377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8374,8377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'locationId' should be typed with a non-any type.","line":277,"column":5,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":277,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":277,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8989,8992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8989,8992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'pages' should be typed with a non-any type.","line":278,"column":5,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":278,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":278,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9007,9010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9007,9010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9028,9031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9028,9031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'pageRequests' should be typed with a non-any type.","line":297,"column":32,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":297,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9622,9625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9622,9625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9639,9642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9639,9642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'pagesRange' should be typed with a non-any type.","line":307,"column":19,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":307,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10149,10152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10149,10152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10166,10169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10166,10169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'request' should be typed with a non-any type.","line":316,"column":24,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":316,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10461,10464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10461,10464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10478,10481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10478,10481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'requestobj' should be typed with a non-any type.","line":329,"column":22,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":329,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10796,10799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10796,10799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10813,10816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10813,10816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'revenueDate' should be typed with a non-any type.","line":337,"column":19,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":337,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11027,11030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11027,11030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11044,11047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11044,11047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'requestObj' should be typed with a non-any type.","line":347,"column":21,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":347,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":347,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11290,11293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11290,11293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":347,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11307,11310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11307,11310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'requestArr' should be typed with a non-any type.","line":356,"column":21,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":356,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":356,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11589,11592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11589,11592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":356,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11606,11609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11606,11609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'requestObj' should be typed with a non-any type.","line":366,"column":19,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":366,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":366,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11851,11854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11851,11854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":366,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11868,11871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11868,11871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":376,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12146,12149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12146,12149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":74,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { environment } from '../../../environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ApiService } from './api.service';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { StorageType } from 'angular-persistence/src/constants/persistence.storage_type';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticateService {\r\n  API_USER_TYPE = 'DARMA';\r\n  API_ORG = 'lanier';\r\n  CONFIG: any;\r\n  sessionUser: any;\r\n  token: any;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private apiService: ApiService,\r\n    private persistenceService: PersistenceService\r\n  ) {\r\n    this.CONFIG = environment;\r\n    this.token = this.apiService.sessionUser\r\n      ? this.apiService.sessionUser.access_token\r\n      : null;\r\n    if (persistenceService.get('currentUser', StorageType.LOCAL)) {\r\n      this.sessionUser = persistenceService.get(\r\n        'currentUser',\r\n        StorageType.LOCAL\r\n      );\r\n    }\r\n  }\r\n\r\n  private setLoginHead() {\r\n    const headers = {};\r\n    const basicAuthStr =\r\n      this.CONFIG.CLIENT_ID + ':' + this.CONFIG.CLIENT_SECRET;\r\n    headers['Content-Type'] = 'application/x-www-form-urlencoded';\r\n    headers['Accept'] = '*/*';\r\n    headers['API-KEY'] = this.CONFIG.API_KEY;\r\n    headers['Auth'] = 'Basic ' + btoa(basicAuthStr);\r\n    return new HttpHeaders(headers);\r\n  }\r\n\r\n  private setCommonHead(): HttpHeaders {\r\n    const headers = {};\r\n    headers['Content-Type'] = 'application/json';\r\n    headers['Accept'] = 'application/json';\r\n    headers[\r\n      'Authorization'\r\n    ] = `Bearer ${this.apiService?.sessionUser?.access_token}`;\r\n    headers['Auth'] = `Bearer ${this.apiService?.sessionUser?.access_token}`;\r\n    headers['API-KEY'] = this.CONFIG.API_KEY;\r\n    headers['x-session-id'] = this.apiService?.sessionUser?.session_id;\r\n    return new HttpHeaders(headers);\r\n  }\r\n\r\n  private setHeaders(options: any): HttpHeaders {\r\n    const headersConfig = {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      Authorization: 'Bearer ' + this.apiService?.sessionUser?.access_token,\r\n      'API-KEY': this.CONFIG.API_KEY,\r\n      'x-session-id': this.apiService?.sessionUser?.session_id\r\n    };\r\n    if (options.multipartFormData) {\r\n      headersConfig['Content-Type'] = 'application/x-www-form-urlencoded';\r\n    }\r\n    if (options.zipOption) {\r\n      headersConfig['Accept'] = 'application/zip';\r\n    }\r\n    return new HttpHeaders(headersConfig);\r\n  }\r\n\r\n  login(user: any): Observable<any> {\r\n    const passEncode = encodeURIComponent(user.password);\r\n    const tData = `username=${user.username}&password=${passEncode}&grant_type=password&scope=${this.API_USER_TYPE}&user_type=${this.API_USER_TYPE}&companyName=reef`;\r\n    return this.http\r\n      .post(this.CONFIG.LOGIN_URI, tData, { headers: this.setLoginHead() })\r\n      .pipe();\r\n  }\r\n\r\n  logout(): Observable<any> {\r\n    return this.http\r\n      .delete(this.CONFIG.LOGOUT_URI, { headers: this.setCommonHead() })\r\n      .pipe();\r\n  }\r\n\r\n  getLocations(): Observable<any> {\r\n    return this.http\r\n      .get(`${this.CONFIG.LMR_BASE_URI}${this.CONFIG.GET_ONLY_LOCATIONS}`, {\r\n        headers: this.setCommonHead()\r\n      })\r\n      .pipe();\r\n  }\r\n\r\n  getAllBrands(): Observable<any> {\r\n    return this.http\r\n      .get(`${this.CONFIG.LMR_BASE_URI}${this.CONFIG.GET_ALL_BRANDS}`, {\r\n        headers: this.setCommonHead()\r\n      })\r\n      .pipe();\r\n  }\r\n\r\n  getLocationsBasedOnBrand(payloadObj: any): Observable<any> {\r\n    return this.http\r\n      .post(\r\n        `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.BRAND_LOCATIONS}`,\r\n        payloadObj,\r\n        {\r\n          headers: this.setCommonHead()\r\n        }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  // getdddueLocations(): Observable<any> {\r\n  //   return this.http\r\n  //     .get(\r\n  //       this.CONFIG.LMR_BASE_URI +\r\n  //         this.CONFIG.GET_DUEFORLOCATION +\r\n  //         '?page=1&per_page=2000',\r\n  //       { headers: this.setCommonHead() }\r\n  //     )\r\n  //     .pipe();\r\n  // }\r\n\r\n  getServiceId(locationId: string): Observable<any> {\r\n    return this.http\r\n      .get(\r\n        this.CONFIG.LMR_BASE_URI +\r\n          this.CONFIG.SERVCICEID_BASED_ON_LOCATION +\r\n          // '?page=1&per_page=500&location_id=' +\r\n          '?location_id=' +\r\n          locationId,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  getServiceCodes(serviceType: string): Observable<any> {\r\n    return this.http\r\n      .get(\r\n        `${this.CONFIG.PAY_REVISION_BASE_URI}${this.CONFIG.SERVICECODE_BASED_ON_SERVICE_TYPE}?serviceId_type=${serviceType}`,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  getJobCodes(serviceCode: string): Observable<any> {\r\n    return this.http\r\n      .get(\r\n        `${this.CONFIG.PAY_REVISION_BASE_URI}${this.CONFIG.JOBCODES_BASED_ON_SERVICE_CODE}?servicecode=${serviceCode}`,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  getGlCodes(jobCode: string): Observable<any> {\r\n    return this.http\r\n      .get(\r\n        `${this.CONFIG.PAY_REVISION_BASE_URI}${this.CONFIG.GL_BASED_ON_JOB_CODE}?jobCode=${jobCode}`,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  // // un used API\r\n  // searchPayRevision(searchRevisionObj: any): Observable<any> {\r\n  //   return this.http\r\n  //     .post(\r\n  //       `${this.CONFIG.PAY_REVISION_BASE_URI}${this.CONFIG.SEARCH_PAYREVISION}`,\r\n  //       searchRevisionObj,\r\n  //       { headers: this.setCommonHead() }\r\n  //     )\r\n  //     .pipe();\r\n  // }\r\n\r\n  // getUserDetails(requestedPages: any): Observable<any> {\r\n  //   return this.http\r\n  //     .get(\r\n  //       `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.GET_USERS}?page=${requestedPages.page}&per_page=${requestedPages.per_page}&brandCode=Lanier&userType=DARMA`,\r\n  //       // this.CONFIG.LMR_BASE_URI +\r\n  //       // this.CONFIG.GET_USERS +\r\n  //       // '?page=1&per_page=500&brandCode=Lanier&userType=DARMA',\r\n  //       { headers: this.setCommonHead(), observe: 'response' }\r\n  //     )\r\n  //     .pipe();\r\n  // }\r\n\r\n  getRevenuesData(searchRevenueObj: any): Observable<any> {\r\n    return this.http\r\n      .post(\r\n        `${this.CONFIG.DARMA_BASE_URI}${this.CONFIG.SEARCH_REVENUES}`,\r\n        searchRevenueObj,\r\n        { headers: this.setCommonHead(), observe: 'response' }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  getEditRevenuesData(id: any): Observable<any> {\r\n    return this.http\r\n      .get(this.CONFIG.DARMA_BASE_URI + this.CONFIG.REVENUES + '/' + id, {\r\n        headers: this.setCommonHead()\r\n      })\r\n      .pipe();\r\n  }\r\n\r\n  createRevenueAndSource(requestObj: any): Observable<any> {\r\n    return this.http\r\n      .post(\r\n        this.CONFIG.DARMA_BASE_URI + this.CONFIG.MANAGE_REVENUES,\r\n        requestObj,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n  updateRevenueAndSource(requestObj: any): Observable<any> {\r\n    return this.http\r\n      .put(\r\n        this.CONFIG.DARMA_BASE_URI + this.CONFIG.MANAGE_REVENUES,\r\n        requestObj,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  deleteRevenueAndSource(requestObj: any): Observable<any> {\r\n    return this.http\r\n      .delete(\r\n        this.CONFIG.DARMA_BASE_URI +\r\n          this.CONFIG.MANAGE_REVENUES +\r\n          '/' +\r\n          requestObj,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  // refreshToken(refreshToken: string): Observable<any> {\r\n  //   const params = 'refreshToken=' + refreshToken;\r\n  //   return this.http.post(\r\n  //     `${this.CONFIG.DARMA_BASE_URI + this.CONFIG.REFRESH_TOKEN_API}`,\r\n  //     params\r\n  //   );\r\n  // }\r\n\r\n  getTenderDetailsfromapi(pageRequests: any): Observable<any> {\r\n    const URLIS =\r\n      pageRequests && pageRequests.page\r\n        ? `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.TENDER_TYPE_SERVICEID_LINK}?page=${pageRequests.page}&per_page=${pageRequests.per_page}&service_id=${pageRequests.id}`\r\n        : `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.TENDER_TYPE_SERVICEID_LINK}?service_id=${pageRequests.id}`;\r\n    return this.http\r\n      .get(`${URLIS}`, { headers: this.setCommonHead(), observe: 'response' })\r\n      .pipe();\r\n  }\r\n\r\n  getBankAccountDetailsfromapi(serviceId: any, pages?: any): Observable<any> {\r\n    if (pages) {\r\n      return this.http\r\n        .get(\r\n          `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.BANK_ACCOUNT_SERVICEID_LINK}?page=${pages.page}&per_page=${pages.per_page}&service_id=${serviceId}`,\r\n          { headers: this.setCommonHead(), observe: 'response' }\r\n        )\r\n        .pipe();\r\n    } else {\r\n      return this.http\r\n        .get(\r\n          `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.BANK_ACCOUNT_SERVICEID_LINK}?service_id=${serviceId}`,\r\n          { headers: this.setCommonHead() }\r\n        )\r\n        .pipe();\r\n    }\r\n  }\r\n\r\n  getUserDetailsBasedOnLocationId(\r\n    locationId: any,\r\n    pages?: any\r\n  ): Observable<any> {\r\n    if (pages) {\r\n      return this.http\r\n        .get(\r\n          `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.USER_LOCATION_LINK}?page=${pages.page}&per_page=${pages.per_page}&location_id=${locationId}`,\r\n          { headers: this.setCommonHead(), observe: 'response' }\r\n        )\r\n        .pipe();\r\n    } else {\r\n      return this.http\r\n        .get(\r\n          `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.USER_LOCATION_LINK}?location_id=${locationId}`,\r\n          { headers: this.setCommonHead() }\r\n        )\r\n        .pipe();\r\n    }\r\n  }\r\n\r\n  getRevenueTypeDetailsFromApi(pageRequests: any): Observable<any> {\r\n    const URLIS =\r\n      pageRequests && pageRequests.page\r\n        ? `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.REVENUE_TYPE_SERVICEID_LINK}?page=${pageRequests.page}&per_page=${pageRequests.per_page}&service_id=${pageRequests.id}`\r\n        : `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.REVENUE_TYPE_SERVICEID_LINK}?service_id=${pageRequests.id}`;\r\n    return this.http\r\n      .get(`${URLIS}`, { headers: this.setCommonHead(), observe: 'response' })\r\n      .pipe();\r\n  }\r\n\r\n  getAllLocations(pagesRange: any): Observable<any> {\r\n    return this.http\r\n      .get(\r\n        `${this.CONFIG.LMR_BASE_URI}${this.CONFIG.GET_SERVICEID}?page=${pagesRange.page}&per_page=${pagesRange.per_page}`,\r\n        { headers: this.setCommonHead(), observe: 'response' }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  exportSourceRevenues(request: any): Observable<any> {\r\n    return this.http\r\n      .post(\r\n        `${this.CONFIG.DARMA_BASE_URI + this.CONFIG.EXPORT_SOURCE}`,\r\n        request,\r\n        {\r\n          headers: this.setHeaders({ multipartFormData: false }),\r\n          responseType: 'blob'\r\n        }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  lockUnlockLocation(requestobj: any): Observable<any> {\r\n    return this.http\r\n      .post(this.CONFIG.DARMA_BASE_URI + this.CONFIG.LOCK_UNLOCK, requestobj, {\r\n        headers: this.setCommonHead()\r\n      })\r\n      .pipe();\r\n  }\r\n\r\n  checkLockUnlock(revenueDate: any): Observable<any> {\r\n    return this.http\r\n      .post(\r\n        this.CONFIG.DARMA_BASE_URI + this.CONFIG.CHECK_LOCK + '/' + revenueDate,\r\n        {},\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  getAllPayrevision(requestObj: any): Observable<any> {\r\n    return this.http\r\n      .get(\r\n        `${this.CONFIG.PAY_REVISION_BASE_URI}${this.CONFIG.GET_ALL_PAYREVISIONS_LIST}?payrevisionType=${requestObj.revisionType}`,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  createNewRevision(requestArr: any): Observable<any> {\r\n    return this.http\r\n      .post(\r\n        this.CONFIG.PAY_REVISION_BASE_URI + this.CONFIG.ADD_NEW_REVISION,\r\n        requestArr,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  getListBySearch(requestObj: any): Observable<any> {\r\n    return this.http\r\n      .post(\r\n        this.CONFIG.PAY_REVISION_BASE_URI + this.CONFIG.GET_LIST_BY_SEARCH,\r\n        requestObj,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n\r\n  getGLCodesByRevisionType(revisionType: string): Observable<any> {\r\n    return this.http\r\n      .get(\r\n        `${this.CONFIG.PAY_REVISION_BASE_URI}${this.CONFIG.GL_CODES_BY_REVISION_TYPE}?payrevisionType=${revisionType}`,\r\n        { headers: this.setCommonHead() }\r\n      )\r\n      .pipe();\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\services\\api.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpClient' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersistenceService' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[676,679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[676,679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[703,706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[703,706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[731,734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[731,734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":30,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":30,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'user' should be typed with a non-any type.","line":30,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":30,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1025,1028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1025,1028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":37,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":37,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":43,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":43,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1574,1577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1574,1577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used.","line":61,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1877,1880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1877,1880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2050,2053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2050,2053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2705,2708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2705,2708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":96,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":96,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'body' should be typed with a non-any type.","line":96,"column":9,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":96,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2765,2768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2765,2768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":104,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":104,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":112,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":112,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'routeLink' should be typed.","line":112,"column":12,"nodeType":"Identifier","messageId":"missingArgType","endLine":112,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":118,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":118,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'routeLink' should be typed.","line":118,"column":25,"nodeType":"Identifier","messageId":"missingArgType","endLine":118,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed.","line":118,"column":36,"nodeType":"Identifier","messageId":"missingArgType","endLine":118,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":122,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":122,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'routeLink' should be typed.","line":122,"column":22,"nodeType":"Identifier","messageId":"missingArgType","endLine":122,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed.","line":122,"column":33,"nodeType":"Identifier","messageId":"missingArgType","endLine":122,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'level' should be typed.","line":122,"column":37,"nodeType":"Identifier","messageId":"missingArgType","endLine":122,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'currentStatus' should be typed.","line":122,"column":44,"nodeType":"Identifier","messageId":"missingArgType","endLine":122,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":126,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":126,"endColumn":45},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'routeLink' should be typed.","line":126,"column":25,"nodeType":"Identifier","messageId":"missingArgType","endLine":126,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed.","line":126,"column":36,"nodeType":"Identifier","messageId":"missingArgType","endLine":126,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'name' should be typed.","line":126,"column":40,"nodeType":"Identifier","messageId":"missingArgType","endLine":126,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":130,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":130,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'routeLink' should be typed.","line":130,"column":27,"nodeType":"Identifier","messageId":"missingArgType","endLine":130,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed.","line":130,"column":38,"nodeType":"Identifier","messageId":"missingArgType","endLine":130,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'name' should be typed.","line":130,"column":42,"nodeType":"Identifier","messageId":"missingArgType","endLine":130,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'approval' should be typed.","line":130,"column":48,"nodeType":"Identifier","messageId":"missingArgType","endLine":130,"endColumn":56}],"errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport 'rxjs/add/observable/throw';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Router } from '@angular/router';\r\nimport { PersistenceService } from 'angular-persistence';\r\n// import { UserSessionService } from '../../shared/services/user-session.services';\r\nimport { StorageType } from 'angular-persistence/src/constants/persistence.storage_type';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  CONFIG: any;\r\n  public userObject: any;\r\n  public sessionUser: any;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router,\r\n    private persistenceService: PersistenceService\r\n  ) {\r\n    this.CONFIG = environment;\r\n    this.sessionUser = persistenceService.get('currentUser', StorageType.LOCAL);\r\n  }\r\n\r\n  public setSessionUser(user: any) {\r\n    this.sessionUser = user;\r\n    this.persistenceService.set('currentUser', user, {\r\n      type: StorageType.LOCAL\r\n    });\r\n  }\r\n\r\n  public clearUserSessionData() {\r\n    if (this.persistenceService.get('currentUser', StorageType.LOCAL)) {\r\n      this.persistenceService.removeAll(StorageType.LOCAL);\r\n    }\r\n  }\r\n\r\n  getLoggedInUserObject() {\r\n    if (this.userObject === undefined) {\r\n      this.userObject = JSON.parse(sessionStorage.getItem('userObject'));\r\n    }\r\n    return this.userObject;\r\n  }\r\n\r\n  private LoginsetHeaders(options: any): HttpHeaders {\r\n    const headersConfig = {\r\n      Accept: 'application/json'\r\n    };\r\n\r\n    if (!options.multipartFormData) {\r\n      headersConfig['Content-Type'] = 'application/x-www-form-urlencoded';\r\n    }\r\n    return new HttpHeaders(headersConfig);\r\n  }\r\n\r\n  private LogOutsetHeaders(options: any): HttpHeaders {\r\n    const headersConfig = {\r\n      Accept: 'application/json'\r\n    };\r\n    return new HttpHeaders(headersConfig);\r\n  }\r\n\r\n  private setHeaders(options: any): HttpHeaders {\r\n    const headersConfig = {\r\n      Accept: 'application/json'\r\n    };\r\n\r\n    if (!options.multipartFormData) {\r\n      headersConfig['Content-Type'] = 'application/json';\r\n    }\r\n\r\n    if (options.zipOption) {\r\n      headersConfig['Accept'] = 'application/zip';\r\n    }\r\n\r\n    if (\r\n      sessionStorage.getItem('authToken') &&\r\n      sessionStorage.getItem('authToken') != 'undefined'\r\n    ) {\r\n      const authToken = JSON.parse(sessionStorage.getItem('authToken'));\r\n      headersConfig['Authorization'] = `Bearer ${authToken.access_token}`;\r\n    }\r\n\r\n    return new HttpHeaders(headersConfig);\r\n  }\r\n\r\n  private formatErrors(error: any) {\r\n    return throwError(error);\r\n  }\r\n\r\n  login(body: any) {\r\n    return this.http\r\n      .post(`${this.CONFIG.BASE_API + this.CONFIG.LOGIN_API}`, body, {\r\n        headers: this.LoginsetHeaders({ multipartFormData: false })\r\n      })\r\n      .catch(this.formatErrors);\r\n  }\r\n\r\n  logout() {\r\n    return this.http\r\n      .post(`${this.CONFIG.BASE_API + this.CONFIG.LOG_OUT_API}`, '', {\r\n        headers: this.LogOutsetHeaders({ multipartFormData: true })\r\n      })\r\n      .catch(this.formatErrors);\r\n  }\r\n\r\n  redirect(routeLink) {\r\n    this.router.navigate([routeLink]);\r\n  }\r\n\r\n  /* ----- Start of Navigating with params----- */\r\n\r\n  redirectWithOneParams(routeLink, id) {\r\n    this.router.navigate([routeLink, id]); // navigate and send data from one component to second component\r\n  }\r\n\r\n  redirectWithParams(routeLink, id, level, currentStatus) {\r\n    this.router.navigate([routeLink, id, level, currentStatus]); // navigate and send data from one component to second component\r\n  }\r\n\r\n  redirectWithTwoParams(routeLink, id, name) {\r\n    this.router.navigate([routeLink, id, name]); // navigate and send data from one component to second component\r\n  }\r\n\r\n  redirectWithThreeParams(routeLink, id, name, approval) {\r\n    this.router.navigate([routeLink, id, name, approval]); // navigate and send data from one component to second component\r\n  }\r\n  /* ----- End of Navigating with params----- */\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\services\\sweet-alert.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDialog' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[433,436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[433,436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":17,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":17,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'error' should be typed with a non-any type.","line":17,"column":31,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":17,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[590,593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[590,593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":67,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'error' should be typed with a non-any type.","line":67,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":67,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2339,2342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2339,2342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\r\nimport { UserSessionService } from './user-session.services';\r\nimport { Subject } from 'rxjs';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { customModalData } from '../model/applicationModel';\r\nimport { DialogDataExampleDialog } from '../common-components/custom-model/custom-dialog';\r\n\r\n@Injectable()\r\nexport class SweetAlertService {\r\n  private subject = new Subject<any>();\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  public showErrorInformation(error: any) {\r\n    const modalData = new customModalData();\r\n    switch (error.status) {\r\n      case 401: {\r\n        modalData.title = 'UNAUTHORIZED ACCESS';\r\n        modalData.text = 'Invalid Client Credentials, Please Login!';\r\n        modalData.icon = 'error';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n        this.userSessionService.clearUserSessionData();\r\n        this.userSessionService.userAccess();\r\n        break;\r\n      }\r\n\r\n      case 403: {\r\n        modalData.title = 'ACCESS DENIED';\r\n        modalData.text = 'Invalid Client Credentials, Please Login!';\r\n        modalData.icon = 'error';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n        break;\r\n      }\r\n\r\n      case 422: {\r\n        modalData.title = 'Locked';\r\n        modalData.text = 'This month is locked!';\r\n        modalData.icon = 'success';\r\n        modalData.imagePath = 'assets/images/popup_images/success_popup.png';\r\n        break;\r\n      }\r\n      case 503: {\r\n        modalData.title = 'System Temporarily Unavailable';\r\n        modalData.text =\r\n          'System undergoing maintenance or is otherwise temporarily unavailable!';\r\n        modalData.icon = 'error';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n        break;\r\n      }\r\n      default: {\r\n        modalData.title = 'Request processing error';\r\n        modalData.text = 'Request processing error, Please try later!';\r\n        modalData.icon = 'error';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n      }\r\n    }\r\n    if (modalData.title) {\r\n      this.dialog.open(DialogDataExampleDialog, {\r\n        data: modalData\r\n      });\r\n    }\r\n  }\r\n\r\n  public showErrorLogin(error: any) {\r\n    const modalData = new customModalData();\r\n    switch (error.status) {\r\n      case 401: {\r\n        modalData.title = 'UNAUTHORIZED ACCESS';\r\n        modalData.text = 'Invalid Client Credentials, Please Login!';\r\n        modalData.icon = 'error';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n        break;\r\n      }\r\n\r\n      case 403: {\r\n        modalData.title = 'ACCESS DENIED';\r\n        modalData.text = 'Invalid Client Credentials, Please Login!';\r\n        modalData.icon = 'error';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n        break;\r\n      }\r\n\r\n      case 503: {\r\n        modalData.title = 'System Temporarily Unavailable';\r\n        modalData.text =\r\n          'System undergoing maintenance or is otherwise temporarily unavailable!';\r\n        modalData.icon = 'error';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n        break;\r\n      }\r\n\r\n      case 500: {\r\n        modalData.title = 'Request processing error';\r\n        modalData.text = 'Request processing error, Please try later!';\r\n        modalData.icon = 'error';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n        break;\r\n      }\r\n\r\n      case 406: {\r\n        modalData.title = 'Not Acceptable';\r\n        modalData.text = \"Request's are not accepting for now!\";\r\n        modalData.icon = 'error';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n        break;\r\n      }\r\n      default: {\r\n        modalData.title = 'Invalid Login!';\r\n        modalData.text = 'Please check your Username and Password';\r\n        modalData.icon = 'error';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n      }\r\n    }\r\n    if (modalData.title) {\r\n      this.dialog.open(DialogDataExampleDialog, {\r\n        data: modalData\r\n      });\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\services\\user-session.services.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'string' is defined but never used.","line":11,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sESSION' is defined but never used.","line":11,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'string' is defined but never used.","line":12,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tempSection' is defined but never used.","line":12,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'object' is defined but never used.","line":12,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sESSION' is defined but never used.","line":13,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'array' is defined but never used.","line":17,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":23}],"errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TestBed } from '@angular/core/testing';\nimport { PersistenceService } from 'angular-persistence';\nimport { Router } from '@angular/router';\nimport { UserSessionService } from './user-session.services';\n\ndescribe('UserSessionService', () => {\n  let service: UserSessionService;\n\n  beforeEach(() => {\n    const persistenceServiceStub = () => ({\n      get: (string, sESSION) => ({}),\n      set: (string, tempSection, object) => ({}),\n      removeAll: (sESSION) => ({})\n    });\n    const routerStub = () => ({\n      events: { subscribe: (f) => f({}) },\n      navigate: (array) => ({})\n    });\n    TestBed.configureTestingModule({\n      providers: [\n        UserSessionService,\n        { provide: PersistenceService, useFactory: persistenceServiceStub },\n        { provide: Router, useFactory: routerStub }\n      ]\n    });\n    spyOn(UserSessionService.prototype, 'setSelectedSection');\n    spyOn(UserSessionService.prototype, 'setUserLanguage');\n    service = TestBed.inject(UserSessionService);\n  });\n\n  it('can load instance', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('constructor', () => {\n    it('makes expected calls', () => {\n      expect(\n        UserSessionService.prototype.setSelectedSection\n      ).toHaveBeenCalled();\n      expect(UserSessionService.prototype.setUserLanguage).toHaveBeenCalled();\n    });\n  });\n\n  describe('getSelectedSection', () => {\n    it('makes expected calls', () => {\n      const persistenceServiceStub: PersistenceService = TestBed.inject(\n        PersistenceService\n      );\n      spyOn(persistenceServiceStub, 'get').and.callThrough();\n      service.getSelectedSection();\n      expect(persistenceServiceStub.get).toHaveBeenCalled();\n    });\n  });\n\n  describe('clearUserSessionData', () => {\n    it('makes expected calls', () => {\n      const persistenceServiceStub: PersistenceService = TestBed.inject(\n        PersistenceService\n      );\n      spyOn(persistenceServiceStub, 'get').and.callThrough();\n      spyOn(persistenceServiceStub, 'removeAll').and.callThrough();\n      service.clearUserSessionData();\n      expect(persistenceServiceStub.get).toHaveBeenCalled();\n      expect(persistenceServiceStub.removeAll).toHaveBeenCalled();\n    });\n  });\n\n  describe('userAccess', () => {\n    it('makes expected calls', () => {\n      const persistenceServiceStub: PersistenceService = TestBed.inject(\n        PersistenceService\n      );\n      const routerStub: Router = TestBed.inject(Router);\n      spyOn(persistenceServiceStub, 'get').and.callThrough();\n      spyOn(routerStub, 'navigate').and.callThrough();\n      service.userAccess();\n      expect(persistenceServiceStub.get).toHaveBeenCalled();\n      // expect(routerStub.navigate).toHaveBeenCalled();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\services\\user-session.services.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersistenceService' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Event' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":5,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BrandsModel' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IUser' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[551,554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[551,554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[668,671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[668,671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[883,886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[883,886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[995,998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[995,998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1241,1244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1241,1244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1373,1376],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1373,1376],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1579,1582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1579,1582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1739,1742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1739,1742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1889,1892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1889,1892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2034,2037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2034,2037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2196,2199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2196,2199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2550,2553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2550,2553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":116,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":116,"endColumn":47},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":123,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":123,"endColumn":61},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'revenue' should be typed with a non-any type.","line":123,"column":45,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":123,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4859,4862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4859,4862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":130,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":130,"endColumn":55},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":137,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":137,"endColumn":60},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'location' should be typed with a non-any type.","line":137,"column":43,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":137,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5301,5304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5301,5304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":144,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":144,"endColumn":62},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":151,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":151,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'revenues' should be typed with a non-any type.","line":151,"column":31,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":151,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5771,5774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5771,5774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":158,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":158,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'garage' should be typed with a non-any type.","line":158,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":158,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5969,5972],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5969,5972],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":162,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":162,"endColumn":43},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":169,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":169,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'role' should be typed with a non-any type.","line":169,"column":28,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":169,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6322,6325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6322,6325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":176,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":176,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed.","line":176,"column":34,"nodeType":"Identifier","messageId":"missingArgType","endLine":176,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":183,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":183,"endColumn":62},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'allDeptSectionList' should be typed with a non-any type.","line":183,"column":35,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":183,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6709,6712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6709,6712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":187,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":187,"endColumn":59},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'deptSection' should be typed with a non-any type.","line":187,"column":39,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":187,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6838,6841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6838,6841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":191,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":191,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'tempSection' should be typed with a non-any type.","line":191,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":191,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6956,6959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6956,6959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":198,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":198,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":202,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":202,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":208,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":208,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed with a non-any type.","line":208,"column":33,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":208,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7468,7471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7468,7471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":215,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":215,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'userlan' should be typed with a non-any type.","line":215,"column":19,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":215,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7648,7651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7648,7651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":222,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":222,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":231,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":231,"endColumn":15}],"errorCount":0,"warningCount":57,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n// Subject, Observable\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Event, NavigationEnd, Router } from '@angular/router';\r\nimport { StorageType } from 'angular-persistence/src/constants/persistence.storage_type';\r\nimport { BrandsModel } from '../model/applicationModel';\r\nimport { IUser } from '../model/userModel';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserSessionService {\r\n  private userLanguage = new BehaviorSubject<any>([]);\r\n  public selectedLanguage = this.userLanguage.asObservable();\r\n  public loginSource = new BehaviorSubject<any>({});\r\n  public login = this.loginSource.asObservable();\r\n  public userSource = new BehaviorSubject<IUser>({});\r\n  public currentUser = this.userSource.asObservable();\r\n  public roleSource = new BehaviorSubject<any>({});\r\n  public currentRole = this.roleSource.asObservable();\r\n  public sectionSource = new BehaviorSubject<any>({});\r\n  public currentSection = this.sectionSource.asObservable();\r\n  public pendingItems = new BehaviorSubject<string>('');\r\n  public pendingDetails = this.pendingItems.asObservable();\r\n  public allDeptsSectionsSource = new BehaviorSubject<any>({});\r\n  public deptSectionList = this.loginSource.asObservable();\r\n  public currentUserDeptSectionSource = new BehaviorSubject<any>({});\r\n  public currentUserDeptSection = this.userSource.asObservable();\r\n  public currentUrl = new BehaviorSubject<string>(undefined);\r\n  /** Revenues */\r\n  public setAllRevenues = new BehaviorSubject<any>({});\r\n  public allRevenues = this.setAllRevenues.asObservable();\r\n\r\n  /** Correction Revenue */\r\n  public setCorrectionNeededRevenue = new BehaviorSubject<any>(null);\r\n  public correctionNeededRevenue = this.setCorrectionNeededRevenue.asObservable();\r\n\r\n  public transactionIdSource = new BehaviorSubject<any>({});\r\n  public transactionSourceId = this.transactionIdSource.asObservable();\r\n\r\n  public setVisibleRealEstateDetails = new BehaviorSubject<any>('');\r\n  public displayRealEstateDetails = this.setVisibleRealEstateDetails.asObservable();\r\n\r\n  public setSelectedRealEstateLocationIs = new BehaviorSubject<any>({});\r\n  public selectedRealEstateLocationIs = this.setSelectedRealEstateLocationIs.asObservable();\r\n\r\n  /** set All brands */\r\n  public setReefBrands = new BehaviorSubject<BrandsModel[]>([]);\r\n  public allReefBrands = this.setReefBrands.asObservable();\r\n\r\n  /** side bar short menu selection */\r\n  public setShortMenuSelection = new BehaviorSubject<any>(false);\r\n  public shortMenuSelectionIs = this.setShortMenuSelection.asObservable();\r\n\r\n  constructor(\r\n    private persistenceService: PersistenceService,\r\n    private router: Router\r\n  ) {\r\n    /*TODO*/\r\n    this.router.events.subscribe((event: Event) => {\r\n      if (event instanceof NavigationEnd) {\r\n        this.currentUrl.next(event.urlAfterRedirects);\r\n      }\r\n    });\r\n    if (this.persistenceService.get('currentUser', StorageType.SESSION)) {\r\n      this.setCurrentUser(\r\n        this.persistenceService.get('currentUser', StorageType.SESSION)\r\n      );\r\n      this.setAllReefBrands(\r\n        this.persistenceService.get('allReefBrands', StorageType.SESSION)\r\n      );\r\n      this.setSourceRevenues(\r\n        this.persistenceService.get('allRevenues', StorageType.SESSION)\r\n      );\r\n      this.setCurrentRole(\r\n        this.persistenceService.get('currentRole', StorageType.SESSION)\r\n      );\r\n      this.setLoginDetails(\r\n        this.persistenceService.get('login', StorageType.SESSION)\r\n      );\r\n      this.sendPendingRequestId(\r\n        this.persistenceService.get('pendingDetails', StorageType.SESSION)\r\n      );\r\n      this.setSelectedSection(\r\n        this.persistenceService.get('selectedSection', StorageType.SESSION)\r\n      );\r\n      this.setSelectedRevenueForCorrection(\r\n        this.persistenceService.get(\r\n          'correctionNeededRevenue',\r\n          StorageType.SESSION\r\n        )\r\n      );\r\n      this.setDisplayRealEstateDetailsFlag(\r\n        this.persistenceService.get(\r\n          'displayRealEstateDetails',\r\n          StorageType.SESSION\r\n        )\r\n      );\r\n      this.setSelectedRealEstateLocation(\r\n        this.persistenceService.get(\r\n          'selectedRealEstateLocationIs',\r\n          StorageType.SESSION\r\n        )\r\n      );\r\n    }\r\n    if (this.persistenceService.get('selectedLanguage', StorageType.LOCAL)) {\r\n      this.setUserLanguage(\r\n        this.persistenceService.get('selectedLanguage', StorageType.LOCAL)\r\n      );\r\n    } else {\r\n      this.setUserLanguage('english');\r\n    }\r\n  }\r\n\r\n  public clickedShortMenu = (flag: boolean) => {\r\n    this.setShortMenuSelection.next(flag);\r\n    this.persistenceService.set('shortMenuSelectionIs', flag, {\r\n      type: StorageType.SESSION\r\n    });\r\n  };\r\n\r\n  public setSelectedRevenueForCorrection = (revenue: any) => {\r\n    this.setCorrectionNeededRevenue.next(revenue);\r\n    this.persistenceService.set('correctionNeededRevenue', revenue, {\r\n      type: StorageType.SESSION\r\n    });\r\n  };\r\n\r\n  public setAllReefBrands = (brands: BrandsModel[]) => {\r\n    this.setReefBrands.next(brands);\r\n    this.persistenceService.set('allReefBrands', brands, {\r\n      type: StorageType.SESSION\r\n    });\r\n  };\r\n\r\n  public setSelectedRealEstateLocation = (location: any) => {\r\n    this.setSelectedRealEstateLocationIs.next(location);\r\n    this.persistenceService.set('selectedRealEstateLocationIs', location, {\r\n      type: StorageType.SESSION\r\n    });\r\n  };\r\n\r\n  public setDisplayRealEstateDetailsFlag = (flag: boolean) => {\r\n    this.setVisibleRealEstateDetails.next(flag);\r\n    this.persistenceService.set('displayRealEstateDetails', flag, {\r\n      type: StorageType.SESSION\r\n    });\r\n  };\r\n\r\n  public setSourceRevenues = (revenues: any) => {\r\n    this.setAllRevenues.next(revenues);\r\n    this.persistenceService.set('allRevenues', revenues, {\r\n      type: StorageType.SESSION\r\n    });\r\n  };\r\n\r\n  public setLoginDetails = (garage: any) => {\r\n    this.loginSource.next(garage);\r\n    this.persistenceService.set('login', garage, { type: StorageType.SESSION });\r\n  };\r\n  public setCurrentUser = (user: IUser) => {\r\n    this.userSource.next(user);\r\n    this.persistenceService.set('currentUser', user, {\r\n      type: StorageType.SESSION\r\n    });\r\n  };\r\n\r\n  public setCurrentRole = (role: any) => {\r\n    this.roleSource.next(role);\r\n    this.persistenceService.set('currentRole', role, {\r\n      type: StorageType.SESSION\r\n    });\r\n  };\r\n\r\n  public sendPendingRequestId = (id) => {\r\n    this.pendingItems.next(id);\r\n    this.persistenceService.set('pendingDetails', id, {\r\n      type: StorageType.SESSION\r\n    });\r\n  };\r\n\r\n  public setAllDeptSectionList = (allDeptSectionList: any) => {\r\n    this.allDeptsSectionsSource.next(allDeptSectionList);\r\n  };\r\n\r\n  public setCurrentUserDeptSection = (deptSection: any) => {\r\n    this.currentUserDeptSectionSource.next(deptSection);\r\n  };\r\n\r\n  public setSelectedSection(tempSection: any) {\r\n    this.sectionSource.next(tempSection);\r\n    this.persistenceService.set('selectedSection', tempSection, {\r\n      type: StorageType.SESSION\r\n    });\r\n  }\r\n\r\n  public getSelectedSection() {\r\n    return this.persistenceService.get('selectedSection', StorageType.SESSION);\r\n  }\r\n\r\n  public clearUserSessionData() {\r\n    if (this.persistenceService.get('currentUser', StorageType.SESSION)) {\r\n      this.persistenceService.removeAll(StorageType.SESSION);\r\n    }\r\n  }\r\n\r\n  public setTransactionSourceId(id: any) {\r\n    this.transactionIdSource.next(id);\r\n    this.persistenceService.set('transactionId', id, {\r\n      type: StorageType.SESSION\r\n    });\r\n  }\r\n\r\n  setUserLanguage(userlan: any) {\r\n    this.userLanguage.next(userlan);\r\n    this.persistenceService.set('selectedLanguage', userlan, {\r\n      type: StorageType.LOCAL\r\n    });\r\n  }\r\n\r\n  public clearTempDate() {\r\n    this.setCurrentUser({});\r\n    this.setCurrentRole({});\r\n    this.setLoginDetails({});\r\n    this.setSelectedSection({});\r\n    this.clearUserSessionData();\r\n  }\r\n\r\n  /* sets the user access */\r\n  userAccess() {\r\n    if (!this.persistenceService.get('currentUser', StorageType.SESSION)) {\r\n      this.clearTempDate();\r\n      localStorage.clear();\r\n      sessionStorage.clear();\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\shared\\shared.module.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\login-layout\\login-layout-routing.module.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Routes' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginLayoutRoutingModule {}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\login-layout\\login-layout.module.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\login-layout\\login\\login.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'async' is defined but never used.","line":2,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fakeAsync' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tick' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DebugElement' is defined but never used.","line":20,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateLoader' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createTranslateLoader' is defined but never used.","line":34,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Subscription' is defined but never used.","line":36,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'throwError' is defined but never used.","line":37,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'from' is defined but never used.","line":37,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BlockUIService' is defined but never used.","line":38,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is defined but never used.","line":46,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is defined but never used.","line":50,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":93,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":94,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":95,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userSessionService' is assigned a value but never used.","line":96,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'alertService' is assigned a value but never used.","line":97,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is assigned a value but never used.","line":116,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is assigned a value but never used.","line":132,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":132,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is assigned a value but never used.","line":139,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is assigned a value but never used.","line":147,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is assigned a value but never used.","line":155,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":155,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is assigned a value but never used.","line":163,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is assigned a value but never used.","line":171,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":13}],"errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  async,\r\n  ComponentFixture,\r\n  TestBed,\r\n  fakeAsync,\r\n  tick,\r\n  inject\r\n} from '@angular/core/testing';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { LoginComponent } from './login.component';\r\nimport { RouterModule, Router } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport {\r\n  HttpClient,\r\n  HttpClientModule,\r\n  HttpHandler\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { NO_ERRORS_SCHEMA, DebugElement } from '@angular/core';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\r\nimport { By } from '@angular/platform-browser';\r\nimport {\r\n  HttpClientTestingModule,\r\n  HttpTestingController\r\n} from '@angular/common/http/testing';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport {\r\n  TranslateModule,\r\n  TranslateLoader,\r\n  TranslateService\r\n} from '@ngx-translate/core';\r\nimport { createTranslateLoader } from 'src/app/app.module';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { throwError, from } from 'rxjs';\r\nimport { BlockUIModule, BlockUIService } from 'ng-block-ui';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { UserResponseModel } from 'src/app/shared/model/loginApiResponse.model';\r\nimport { of } from 'rxjs/internal/observable/of';\r\n\r\ndescribe('LoginComponent', () => {\r\n  let component: LoginComponent;\r\n  let fixture: ComponentFixture<LoginComponent>;\r\n  let apiService: ApiService;\r\n  let authenticateService: AuthenticateService;\r\n  let alertService: SweetAlertService;\r\n  let httpMock: HttpTestingController;\r\n  let de: DebugElement;\r\n  let router: Router;\r\n  let httpClient: HttpClient;\r\n  let userSessionService: UserSessionService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [LoginComponent],\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot(),\r\n        BlockUIModule.forRoot(),\r\n        RouterTestingModule.withRoutes([\r\n          { path: 'login', component: LoginComponent }\r\n        ])\r\n      ],\r\n      schemas: [NO_ERRORS_SCHEMA],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        {\r\n          provide: TranslateService\r\n        },\r\n        SweetAlertService,\r\n        UserSessionService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    });\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance;\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    httpMock = TestBed.get(HttpTestingController);\r\n    router = TestBed.inject(Router);\r\n    httpClient = TestBed.get(HttpClient);\r\n    userSessionService = TestBed.get(AuthenticateService);\r\n    alertService = TestBed.get(SweetAlertService);\r\n  });\r\n\r\n  // afterEach(() => {\r\n  //   httpMock.verify();\r\n  // });\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('h1 tag', () => {\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance; // BannerComponent test instance\r\n    const de = fixture.debugElement.query(By.css('h1'));\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should translate the language service', inject(\r\n    [TranslateService],\r\n    (service: TranslateService) => {\r\n      expect(service).toBeTruthy();\r\n      expect(service.currentLang).toBeTruthy();\r\n    }\r\n  ));\r\n\r\n  it('h2 tag', () => {\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance; // BannerComponent test instance\r\n    // query for the title <h1> by CSS element selector\r\n    const de = fixture.debugElement.query(By.css('h2'));\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('input tag in exampleModalLabel', () => {\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance; // BannerComponent test instance\r\n    const de = fixture.debugElement.query(By.css('input'));\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('p tag', () => {\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance; // BannerComponent test instance\r\n    // query for the title <h1> by CSS element selector\r\n    const de = fixture.debugElement.query(By.css('p'));\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('mat-label tag', () => {\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance; // BannerComponent test instance\r\n    // query for the title <h1> by CSS element selector\r\n    const de = fixture.debugElement.query(By.css('mat-label'));\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('form tag', () => {\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance; // BannerComponent test instance\r\n    // query for the title <h1> by CSS element selector\r\n    const de = fixture.debugElement.query(By.css('form'));\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('mat-grid-list tag', () => {\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance; // BannerComponent test instance\r\n    // query for the title <h1> by CSS element selector\r\n    const de = fixture.debugElement.query(By.css('mat-grid-list'));\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  /*it('should display my-image.png', () => {\r\n    const fixture = TestBed.createComponent(LoginComponent);\r\n    const compiled = fixture.debugElement.nativeElement;\r\n    const imgElement = compiled.querySelector('div.da-logo>img');\r\n    if (imgElement) {\r\n      const rectangle = imgElement.getBoundingClientRect();\r\n      setTimeout(() => {\r\n        expect(rectangle.height).toBeGreaterThan(0);\r\n        expect(rectangle.width).toBeGreaterThan(0);\r\n      }, 10000);\r\n    } else {\r\n      window.alert('should display my-image.png: failed');\r\n    }\r\n  }); */\r\n\r\n  it('should trigger triggerLoginOnEnter', () => {\r\n    const event = {\r\n      keyCode: 13\r\n    };\r\n    // event.preventDefault = jest.fn();\r\n    spyOn(component, 'triggerLoginOnEnter').and.callThrough();\r\n    spyOn(component, 'doLogin').and.callThrough();\r\n    // component.simulate('triggerLoginOnEnter', { preventDefault: jest.fn() });\r\n    fixture.detectChanges();\r\n    component.triggerLoginOnEnter();\r\n    component.loginForm.patchValue({\r\n      username: 'akhilesh.veerapareddy@reefparking.com'\r\n    });\r\n    component.loginForm.patchValue({ password: 'U53R@67ERca9M@2' });\r\n    expect(component.triggerLoginOnEnter).toHaveBeenCalled();\r\n    expect(event.keyCode).toEqual(13);\r\n    expect(component.loginForm.valid).toBeTruthy();\r\n    component.doLogin();\r\n    expect(component.doLogin).toHaveBeenCalled();\r\n  });\r\n\r\n  it('Should call login API', () => {\r\n    const returnedObj = {\r\n      access_token: '736e53ea-f3cd-4947-b473-25b53b63e39f',\r\n      token_type: 'bearer',\r\n      refresh_token: 'b5b3b980-a020-4a2e-80d6-a93844ceea45',\r\n      expires_in: 39076,\r\n      scope: 'DARMA',\r\n      firstName: 'Vasim',\r\n      lastName: 'Mujawar',\r\n      brandId: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n      session_id: '0CC1EB6086E8D251C16997AE0763C6B3',\r\n      userName: 'vasim.mujawar',\r\n      authorities: [\r\n        {\r\n          id: 3,\r\n          name: null,\r\n          code: 'ROLE_DARMA_ADMIN',\r\n          description: 'Site Administrator',\r\n          status: 'A',\r\n          usertype: 'DARMA',\r\n          authority: 'ROLE_DARMA_ADMIN',\r\n          firstName: 'Vasim',\r\n          lastName: 'Mujawar',\r\n          emailAddress: 'string',\r\n          userName: 'vasim.mujawar',\r\n          phone: 1123,\r\n          rolesDTO: {},\r\n          usersLocationLinkDTO: {},\r\n          brandDTO: {},\r\n          brandCode: 'All',\r\n          displayName: 'vasim'\r\n        }\r\n      ],\r\n      brandCode: 'All'\r\n    };\r\n    spyOn(component, 'doLogin').and.callThrough();\r\n    spyOn(authenticateService, 'login').and.returnValue(of(returnedObj));\r\n    // spyOn(userSessionService, 'setLoginDetails').and.callThrough();\r\n    // spyOn(userSessionService, 'setCurrentUser').and.callThrough();\r\n    // spyOn(apiService, 'setSessionUser').and.callThrough();\r\n    spyOn(component, 'getSetAllBrands').and.callThrough();\r\n    // const spy = spyOn(router, 'navigate');\r\n    fixture.detectChanges();\r\n    component.loginForm.patchValue({\r\n      username: 'akhilesh.veerapareddy@reefparking.com'\r\n    });\r\n    component.loginForm.patchValue({ password: 'U53R@67ERca9M@2' });\r\n    component.doLogin();\r\n    component.blockUI.start('Logging....');\r\n    expect(component.doLogin).toHaveBeenCalled();\r\n    authenticateService.login(component.loginForm.value);\r\n    expect(authenticateService.login).toHaveBeenCalled();\r\n    expect(component.loginResponse).toEqual(returnedObj);\r\n    component.getSetAllBrands();\r\n    expect(component.getSetAllBrands).toHaveBeenCalled();\r\n    component.blockUI.stop();\r\n  });\r\n\r\n  it('Should call brands API', () => {\r\n    const brandObj = [\r\n      {\r\n        id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n        code: 'All',\r\n        status: 'A',\r\n        logo: null,\r\n        description: 'Lanier',\r\n        userDTO: []\r\n      }\r\n    ];\r\n    spyOn(component, 'getSetAllBrands').and.callThrough();\r\n    spyOn(authenticateService, 'getAllBrands').and.returnValue(of(brandObj));\r\n    component.getSetAllBrands();\r\n    expect(authenticateService.getAllBrands).toHaveBeenCalled();\r\n  });\r\n\r\n  // it('Error capture for Error', () => {\r\n  //   spyOn(alertService, 'showErrorInformation').and.callThrough();\r\n  //   spyOn(authenticateService, 'getAllBrands').and.returnValue(\r\n  //     throwError({ status: 404 })\r\n  //   );\r\n  //   fixture.detectChanges();\r\n  //   component.getSetAllBrands();\r\n  //   expect(alertService.showErrorInformation).toHaveBeenCalled();\r\n  // });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\login-layout\\login\\login.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ApiService' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":8,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateService' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BrandsModel' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1158,1161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1158,1161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1180,1183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1180,1183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":60,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":60,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed with a non-any type.","line":60,"column":23,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":60,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2251,2254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2251,2254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":72,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":12},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":94,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":94,"endColumn":20}],"errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { UserResponseModel } from 'src/app/shared/model/loginApiResponse.model';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\n// import { PersistenceService } from 'angular-persistence';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BrandsModel } from 'src/app/shared/model/applicationModel';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  loginForm: FormGroup;\r\n  loginResponse: UserResponseModel;\r\n  private CONFIG: any;\r\n  subscription: any;\r\n  emailPattern = '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,4}$';\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    // private persistent: PersistenceService,\r\n    private router: Router,\r\n    private userSessionService: UserSessionService,\r\n    private authService: AuthenticateService,\r\n    private alertService: SweetAlertService,\r\n    private translate: TranslateService\r\n  ) {\r\n    this.CONFIG = environment;\r\n    userSessionService.userAccess();\r\n    userSessionService.clearUserSessionData();\r\n    userSessionService.clearTempDate();\r\n    sessionStorage.clear();\r\n\r\n    //added for translate\r\n    this.userSessionService.selectedLanguage.subscribe((data) => {\r\n      this.translate.use(data);\r\n      this.translate.setDefaultLang(data);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      username: new FormControl('', [\r\n        Validators.required,\r\n        Validators.pattern(this.emailPattern)\r\n      ]),\r\n      password: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  triggerLoginOnEnter(event?: any) {\r\n    if (event && event.keyCode === 13) {\r\n      // Cancel the default action, if needed\r\n      // event.preventDefault();\r\n      // Trigger the button element with a click\r\n      if (this.loginForm.valid) {\r\n        this.doLogin();\r\n      }\r\n      // return false;\r\n    }\r\n  }\r\n\r\n  doLogin() {\r\n    const loginValue = this.loginForm?.value;\r\n    this.blockUI.start('Logging....');\r\n    this.authService.login(loginValue).subscribe(\r\n      (response: UserResponseModel) => {\r\n        this.loginResponse = response;\r\n        this.userSessionService.setLoginDetails(this.loginResponse);\r\n        this.userSessionService.setCurrentUser(this.loginResponse);\r\n        this.apiService.setSessionUser(this.loginResponse);\r\n        if (this.loginResponse.brandCode === 'All') {\r\n          this.getSetAllBrands();\r\n        }\r\n        this.blockUI.stop(); // Stop blocking\r\n        this.router.navigate(['/app/']);\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorLogin(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getSetAllBrands() {\r\n    this.blockUI.start();\r\n    this.authService.getAllBrands().subscribe(\r\n      (brands: BrandsModel[]) => {\r\n        this.blockUI.stop();\r\n        this.userSessionService.setAllReefBrands(brands);\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorLogin(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\component-layout\\component-layout.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpTestingController' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":11}],"errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators } from '@angular/forms';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ComponentLayoutComponent } from './component-layout.component';\r\n\r\ndescribe('ComponentLayoutComponent', () => {\r\n  let component: ComponentLayoutComponent;\r\n  let fixture: ComponentFixture<ComponentLayoutComponent>;\r\n  let router: Router;\r\n  let userSessionService: UserSessionService;\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [ComponentLayoutComponent],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    userSessionService = TestBed.get(UserSessionService);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(ComponentLayoutComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call use-session to get sidebar expand flag', () => {\r\n    const mockResponse = false;\r\n    fixture.detectChanges();\r\n    userSessionService.shortMenuSelectionIs.subscribe((data) => {\r\n      expect(data).toBe(mockResponse);\r\n    });\r\n  });\r\n\r\n  it('div tag', () => {\r\n    fixture = TestBed.createComponent(ComponentLayoutComponent);\r\n    component = fixture.componentInstance; // BannerComponent test instance\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('router-outlet tag', () => {\r\n    fixture = TestBed.createComponent(ComponentLayoutComponent);\r\n    component = fixture.componentInstance; // BannerComponent test instance\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\component-layout\\component-layout.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":28}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\n\r\n@Component({\r\n  selector: 'app-component-layout',\r\n  templateUrl: './component-layout.component.html',\r\n  styleUrls: ['./component-layout.component.scss']\r\n})\r\nexport class ComponentLayoutComponent {\r\n  expandCollapse = false;\r\n  constructor(private userSessionService: UserSessionService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.userSessionService.shortMenuSelectionIs.subscribe((flag: boolean) => {\r\n      this.expandCollapse = flag;\r\n    });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\dashboard\\dashboard.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpTestingController' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRevenueDTO' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'throwError' is defined but never used.","line":37,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'alertService' is assigned a value but never used.","line":74,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'revuenueObj' is assigned a value but never used.","line":277,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":277,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'revuenueObj' is assigned a value but never used.","line":319,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":319,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":550,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":550,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20507,20510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20507,20510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":555,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":555,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20763,20766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20763,20766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {\r\n  BankAccountsDTO,\r\n  LocationDTO,\r\n  Locations,\r\n  RevenueTypesDTO,\r\n  SourceDTO,\r\n  TenderTypesDTO,\r\n  UserDTO,\r\n  IRealEstateServicesIds,\r\n  IRevenueDTO\r\n} from 'src/app/shared/model/revenueSource.model';\r\nimport { DashboardComponent } from './dashboard.component';\r\nimport * as moment from 'moment';\r\nimport { of } from 'rxjs/internal/observable/of';\r\nimport { throwError } from 'rxjs/internal/observable/throwError';\r\n\r\ndescribe('DashboardComponent', () => {\r\n  let component: DashboardComponent;\r\n  let fixture: ComponentFixture<DashboardComponent>;\r\n  let router: Router;\r\n  let authenticateService: AuthenticateService;\r\n  let userSessionService: UserSessionService;\r\n  let alertService: SweetAlertService;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [DashboardComponent],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    userSessionService = TestBed.get(UserSessionService);\r\n    alertService = TestBed.get(SweetAlertService);\r\n    router = TestBed.inject(Router);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(DashboardComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should clear the search filters to intial', () => {\r\n    component.requestRevenueObj = {\r\n      page: '1',\r\n      per_page: '500',\r\n      filterDTO: [],\r\n      sort: []\r\n    };\r\n    spyOn(component, 'resetRequestRevenueObj').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.resetRequestRevenueObj();\r\n    expect(component.resetRequestRevenueObj).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should set source total amount', () => {\r\n    const sourceObj = new SourceDTO();\r\n    spyOn(component, 'getSourceAmountTotal').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.getSourceAmountTotal(sourceObj);\r\n    expect(component.getSourceAmountTotal).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should display popover reset Filters', () => {\r\n    component.tableData.data = [];\r\n    component.revenueSearchForm.reset({\r\n      revenueFromDate: new Date(\r\n        moment().startOf('month').format('YYYY-MM-DD hh:mm')\r\n      ),\r\n      revenueToDate: new Date(moment().format('YYYY-MM-DD hh:mm'))\r\n    });\r\n    spyOn(component, 'resetFilters').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.resetFilters(component.revenueSearchForm);\r\n  });\r\n\r\n  it('should edit revenue details', () => {\r\n    const revuenueObj = {\r\n      amount: 93,\r\n      bankAccountsDTO: new BankAccountsDTO(),\r\n      bankAmount: 5,\r\n      corrInc: null,\r\n      depositIdentifier: 'PA-1000063-A2A14CF3-03122021110346',\r\n      exportNavisionBy: new UserDTO(),\r\n      exportNavisionDate: '2021-03-12T05:45:03.864',\r\n      id: '6ae35731-6155-49b0-b285-9df8ac47d493',\r\n      locationDTO: new LocationDTO(),\r\n      markForCorrection: false,\r\n      markForCorrectionDate: null,\r\n      notesDTO: [],\r\n      numberOfDeposits: 4,\r\n      postedBy: null,\r\n      postingDate: null,\r\n      reconciledDate: null,\r\n      revenueDate: '2021-03-12T00:00:00.000',\r\n      serviceDTO: new IRealEstateServicesIds(),\r\n      sourcesDTO: [],\r\n      status: 'S',\r\n      submittedBy: new UserDTO(),\r\n      submittedDate: '2021-03-12T00:00:00.000',\r\n      tenderTypesDTO: new TenderTypesDTO(),\r\n      verificationStatus: null\r\n    };\r\n    const spy = spyOn(router, 'navigate');\r\n    spyOn(component, 'editRevenueDetails').and.callThrough();\r\n    spyOn(\r\n      userSessionService,\r\n      'setSelectedRevenueForCorrection'\r\n    ).and.callThrough();\r\n    spyOn(authenticateService, 'getEditRevenuesData').and.returnValue(\r\n      of(revuenueObj)\r\n    );\r\n    fixture.detectChanges();\r\n    component.editRevenueDetails(revuenueObj, false);\r\n    expect(component.editRevenueDetails).toHaveBeenCalled();\r\n    expect(authenticateService.getEditRevenuesData).toHaveBeenCalled();\r\n    expect(component.revenueLocResponse).toEqual(revuenueObj);\r\n    component.revenueLocResponse['isCorrection'] = false;\r\n    expect(spy).toHaveBeenCalledWith(['/app/addrevenue']);\r\n  });\r\n\r\n  it('should display popover return DifferMonth Data', () => {\r\n    const dataIs = new SourceDTO();\r\n    const revenueTypesDTO = new RevenueTypesDTO();\r\n    revenueTypesDTO.description = 'deferred monthly';\r\n    dataIs.revenueTypesDTO = revenueTypesDTO;\r\n    spyOn(component, 'returnIsDifferMonth').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.returnIsDifferMonth(dataIs);\r\n    expect(component.returnIsDifferMonth).toHaveBeenCalled();\r\n  });\r\n\r\n  // it('should hide popover with other revenuew Data', () => {\r\n  //   const dataIs = new SourceDTO();\r\n  //   const revenueTypesDTO = new RevenueTypesDTO();\r\n  //   revenueTypesDTO.description = 'car';\r\n  //   dataIs.revenueTypesDTO = revenueTypesDTO;\r\n  //   spyOn(component, 'returnIsDifferMonth').and.callThrough();\r\n  //   fixture.detectChanges();\r\n  //   component.returnIsDifferMonth(dataIs);\r\n  //   expect(component.returnIsDifferMonth).toHaveBeenCalled();\r\n  // });\r\n\r\n  it('should return Due to location Data', () => {\r\n    // let revenueData: IRevenueDTO[];\r\n    spyOn(component, 'filterTableData').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.tableData.filterPredicate;\r\n  });\r\n\r\n  it('should go to add revenue section', () => {\r\n    spyOn(component, 'addRevenue').and.callThrough();\r\n    const spy = spyOn(router, 'navigate');\r\n    spyOn(\r\n      userSessionService,\r\n      'setSelectedRevenueForCorrection'\r\n    ).and.callThrough();\r\n    fixture.detectChanges();\r\n    component.addRevenue();\r\n    expect(component.addRevenue).toHaveBeenCalled();\r\n    expect(\r\n      userSessionService.setSelectedRevenueForCorrection\r\n    ).toHaveBeenCalled();\r\n    expect(spy).toHaveBeenCalledWith(['/app/addrevenue']);\r\n  });\r\n\r\n  it('should filter table data', () => {\r\n    const dataIs = new SourceDTO();\r\n    const revenueTypesDTO = new RevenueTypesDTO();\r\n    revenueTypesDTO.description = 'due to location monthly';\r\n    dataIs.revenueTypesDTO = revenueTypesDTO;\r\n    spyOn(component, 'returnIsDifferMonth').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.returnIsDifferMonth(dataIs);\r\n    expect(component.returnIsDifferMonth).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should searchRevenues', () => {\r\n    spyOn(component, 'searchRevenues').and.callThrough();\r\n    spyOn(component, 'resetRequestRevenueObj').and.callThrough();\r\n    spyOn(component, 'filterDTOObjCreation').and.callThrough();\r\n    spyOn(component, 'getLoadRevenuesInitData').and.callThrough();\r\n    const brandType = {\r\n      code: 'All',\r\n      description: 'Lanier',\r\n      id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n      logo: null,\r\n      status: 'A'\r\n    };\r\n    const serviceId = {\r\n      applicableForDarma: true,\r\n      brandCode: 'CLH (PK1)',\r\n      closeDate: null,\r\n      companyId: 'PK001',\r\n      contractType: 'MANAGED',\r\n      id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n      openDate: null,\r\n      realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n      realEstateName: 'Bank of America Tower',\r\n      realEstateNumber: 'US-FL-RE-1003115',\r\n      serviceGroupName: 'Parking',\r\n      serviceId: 'PA-1000428',\r\n      serviceIdName: 'Bank of America Tower Parking',\r\n      serviceNameWithID:\r\n        'PA-1000428 - Bank of America Tower Parking(US-FL-RE-1003115)',\r\n      serviceType: 'Parking'\r\n    };\r\n    const formGroup = new FormGroup({\r\n      brandType: new FormControl(brandType),\r\n      revenueDepositIdentifier: new FormControl('25245'),\r\n      revenueLocation: new FormControl([new Locations()]),\r\n      revenueServiceId: new FormControl([serviceId]),\r\n      revenueFromDate: new FormControl('2021-03-12T05:45:03.864'),\r\n      revenueToDate: new FormControl('2021-03-18T05:45:03.864')\r\n    });\r\n    // };\r\n    component.totalRevenues = [];\r\n    component.tableData.data = [];\r\n    component.resetRequestRevenueObj();\r\n    component.filterDTOObjCreation();\r\n    component.getLoadRevenuesInitData(component.requestRevenueObj, false);\r\n    component.requestRevenueObj.page = '1';\r\n    component.requestRevenueObj.per_page = '500';\r\n    fixture.detectChanges();\r\n    component.searchRevenues(formGroup);\r\n    expect(component.resetRequestRevenueObj).toHaveBeenCalled();\r\n    expect(component.filterDTOObjCreation).toHaveBeenCalled();\r\n    expect(component.getLoadRevenuesInitData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should search data', () => {\r\n    const revuenueObj = [\r\n      {\r\n        amount: 93,\r\n        bankAccountsDTO: new BankAccountsDTO(),\r\n        bankAmount: 5,\r\n        corrInc: null,\r\n        depositIdentifier: 'PA-1000063-A2A14CF3-03122021110346',\r\n        exportNavisionBy: new UserDTO(),\r\n        exportNavisionDate: '2021-03-12T05:45:03.864',\r\n        id: '6ae35731-6155-49b0-b285-9df8ac47d493',\r\n        locationDTO: new LocationDTO(),\r\n        markForCorrection: false,\r\n        markForCorrectionDate: null,\r\n        notesDTO: [],\r\n        numberOfDeposits: 4,\r\n        postedBy: null,\r\n        postingDate: null,\r\n        reconciledDate: null,\r\n        revenueDate: '2021-03-12T00:00:00.000',\r\n        serviceDTO: new IRealEstateServicesIds(),\r\n        sourcesDTO: [],\r\n        status: 'S',\r\n        submittedBy: new UserDTO(),\r\n        submittedDate: '2021-03-12T00:00:00.000',\r\n        tenderTypesDTO: new TenderTypesDTO(),\r\n        verificationStatus: null\r\n      }\r\n    ];\r\n    const searchObj = {\r\n      page: '1',\r\n      per_page: '500',\r\n      filterDTO: [],\r\n      sort: []\r\n    };\r\n    spyOn(component, 'SearchRevenue').and.callThrough();\r\n    spyOn(component, 'getRevenuesInitData').and.callThrough();\r\n    component.SearchRevenue();\r\n    component.getRevenuesInitData();\r\n    component.getLoadRevenuesInitData(searchObj, false);\r\n  });\r\n\r\n  it('should call revenues data by filters', () => {\r\n    const revuenueObj = [\r\n      {\r\n        amount: 93,\r\n        bankAccountsDTO: new BankAccountsDTO(),\r\n        bankAmount: 5,\r\n        corrInc: null,\r\n        depositIdentifier: 'PA-1000063-A2A14CF3-03122021110346',\r\n        exportNavisionBy: new UserDTO(),\r\n        exportNavisionDate: '2021-03-12T05:45:03.864',\r\n        id: '6ae35731-6155-49b0-b285-9df8ac47d493',\r\n        locationDTO: new LocationDTO(),\r\n        markForCorrection: false,\r\n        markForCorrectionDate: null,\r\n        notesDTO: [],\r\n        numberOfDeposits: 4,\r\n        postedBy: null,\r\n        postingDate: null,\r\n        reconciledDate: null,\r\n        revenueDate: '2021-03-12T00:00:00.000',\r\n        serviceDTO: new IRealEstateServicesIds(),\r\n        sourcesDTO: [],\r\n        status: 'S',\r\n        submittedBy: new UserDTO(),\r\n        submittedDate: '2021-03-12T00:00:00.000',\r\n        tenderTypesDTO: new TenderTypesDTO(),\r\n        verificationStatus: null\r\n      }\r\n    ];\r\n    const searchObj = {\r\n      page: '1',\r\n      per_page: '500',\r\n      filterDTO: [\r\n        {\r\n          key: 'revenueDate',\r\n          operation: ':',\r\n          value: '2021-03-01T00:00:00.000_2021-03-13T00:00:00.000'\r\n        }\r\n      ],\r\n      sort: [{ field: 'revenueDate', direction: 'DESC' }]\r\n    };\r\n    spyOn(component, 'getRevenuesInitData').and.callThrough();\r\n    spyOn(component, 'getLoadRevenuesInitData').and.callThrough();\r\n    component.getRevenuesInitData();\r\n    component.getLoadRevenuesInitData(searchObj, false);\r\n    // authenticateService.getRevenuesData(searchObj).subscribe(\r\n    //   (data) => {\r\n    //     expect(data).toEqual(revuenueObj);\r\n    //   },\r\n    //   (err) => {\r\n    //     return err;\r\n    //   }\r\n    // );\r\n  });\r\n\r\n  // It should call nextpage\r\n  it('should search next page data', () => {\r\n    spyOn(component, 'nextPageData').and.callThrough();\r\n    spyOn(component, 'getNextData').and.callThrough();\r\n    const pageIndex = 1;\r\n    const pageSize = 1;\r\n    fixture.detectChanges();\r\n    const object = {\r\n      pageIndex: 1,\r\n      pageSize: 2,\r\n      previousPageIndex: 2,\r\n      length: 2\r\n    };\r\n    component.nextPageData(object);\r\n    expect(component.nextPageData).toHaveBeenCalled();\r\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\r\n  });\r\n\r\n  it('should search next page data else', () => {\r\n    spyOn(component, 'nextPageData').and.callThrough();\r\n    // spyOn(component, 'getNextData').and.callThrough();\r\n    fixture.detectChanges();\r\n    const object = {\r\n      pageIndex: 1,\r\n      pageSize: 2,\r\n      previousPageIndex: 1,\r\n      length: 2\r\n    };\r\n    component.nextPageData(object);\r\n    expect(component.nextPageData).toHaveBeenCalled();\r\n    // component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\r\n  });\r\n\r\n  it('should search table data', () => {\r\n    spyOn(component, 'applyFilter').and.callThrough();\r\n    fixture.detectChanges();\r\n    const searchString = 'test';\r\n    component.applyFilter(searchString);\r\n  });\r\n\r\n  it('should onOutSideClick', () => {\r\n    spyOn(component, 'onOutSideClick').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.onOutSideClick();\r\n    expect(component.onOutSideClick).toHaveBeenCalled();\r\n  });\r\n\r\n  // it('should revenueExportExcel', () => {\r\n  //   const serviceIdDetails = {\r\n  //     filterDTO: [],\r\n  //     page: '1',\r\n  //     per_page: '500',\r\n  //     sort: []\r\n  //   };\r\n  //   spyOn(component, 'revenueExportExcel').and.callThrough();\r\n  //   spyOn(authenticateService, 'exportSourceRevenues').and.callThrough();\r\n  //   fixture.detectChanges();\r\n  //   component.revenueExportExcel();\r\n  //   expect(component.revenueExportExcel).toHaveBeenCalled();\r\n  //   expect(authenticateService.exportSourceRevenues).toHaveBeenCalled();\r\n  //   // component.tenderTypes = serviceIdDetails;\r\n  //   // expect(component.tenderTypes).toEqual(serviceIdDetails);\r\n  // });\r\n\r\n  // it('should onToggleChange', () => {\r\n  //   const row = {\r\n  //     amount: 5,\r\n  //     bankAccountsDTO: {id: \"33765630-c801-4464-b7cc-5194452e8b6f\", contactTypesID: null, bankName: \"ACB - 1861 International Drive CC\", description: \"ACB - 1861 International Drive CC\", accountType: null},\r\n  //     bankAmount: null,\r\n  //     close: true,\r\n  //     corrInc: null,\r\n  //     depositIdentifier: \"PA-1000063-C4BF9947-03142021160399\",\r\n  //     exportNavisionBy: {id: \"636dc1e2-5da6-4455-8799-85a34b173520\", firstName: \"Vasim\", lastName: \"Mujawar\", emailAddress: \"vasim.mujawar@reeftechnology.com\", userName: \"vasim.mujawar\"},\r\n  //     exportNavisionDate: \"2021-03-14T12:50:17.407\",\r\n  //     id: \"bd4ee957-a39a-41ca-979d-12666a169972\",\r\n  //     locationDTO: {id: \"342d853d-cfed-4b30-a712-495a7c141537\", locationID: \"US-IL-RE-1001317\", name: \"East West University Lot\", clientLegalName: null, address1: \"801 S. Wabash\"},\r\n  //     markForCorrection: false,\r\n  //     markForCorrectionDate: null,\r\n  //     notesDTO: [],\r\n  //     numberOfDeposits: 2,\r\n  //     postedBy: null,\r\n  //     postingDate: null,\r\n  //     reconciledDate: null,\r\n  //     revenueDate: \"2021-03-14T00:00:00.000\",\r\n  //     revenueSourceDetails: {id: \"bd4ee957-a39a-41ca-979d-12666a169972\", locationDTO: {…}, bankAccountsDTO: {…}, postedBy: null, postingDate: null},\r\n  //     serviceDTO: {id: \"3622d775-1937-4539-8cd7-ecf5f7b3c996\", serviceId: \"PA-1000063\", serviceIdName: \"East West University Lot\", serviceType: \"Parking\", serviceGroupName: \"Parking\"},\r\n  //     sourcesDTO: [],\r\n  //     status: \"S\",\r\n  //     submittedBy: {id: \"636dc1e2-5da6-4455-8799-85a34b173520\", firstName: \"Vasim\", lastName: \"Mujawar\", emailAddress: \"vasim.mujawar@reeftechnology.com\", userName: \"vasim.mujawar\"},\r\n  //     submittedDate: \"2021-03-14T00:00:00.000\",\r\n  //     tenderTypesDTO: {id: \"6e7a306b-60d2-4e2b-bbcd-d5e1f2f7ea08\", code: \"ACH/Wire\", description: \"ACH/Wire\", uniqueIdentifier: \"RT660\", isPCI: true},\r\n  //     verificationStatus: null,\r\n  //         }\r\n  //   const cdk ={\r\n  //     opened: true,\r\n  //     row: {id: \"bd4ee957-a39a-41ca-979d-12666a169972\", locationDTO: {}, bankAccountsDTO: {}, postedBy: null, postingDate: null},\r\n  //     tRef: {},\r\n  //     toggleChange: {EventEmitter: {},\r\n  //     vcRef: { ViewContainerRef: {},\r\n  //     __ngContext__:[]\r\n  //   }}\r\n  // }\r\n  // spyOn(component, 'onToggleChange').and.callThrough();\r\n  //   fixture.detectChanges();\r\n  //   component.onToggleChange(cdk,row);\r\n  //   expect(component.onToggleChange).toHaveBeenCalled();\r\n\r\n  // });\r\n\r\n  it('should filterTableData', () => {\r\n    spyOn(component, 'filterTableData').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.filterTableData();\r\n    expect(component.filterTableData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should sortingData', () => {\r\n    spyOn(component, 'sortingData').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.sortingData();\r\n    expect(component.sortingData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should printPage', () => {\r\n    spyOn(component, 'printPage').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.printPage();\r\n    expect(component.printPage).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should deleteRevenueDetails', () => {\r\n    const revenueService = { id: '82377546-e7a2-44e6-b2d9-fa66f34b87ac' };\r\n    spyOn(component, 'deleteRevenueDetails').and.callThrough();\r\n    spyOn(authenticateService, 'deleteRevenueAndSource').and.returnValue(\r\n      of({ message: 'Success' })\r\n    );\r\n    // spyOn(authenticateService, 'createRevenueAndSource').and.callThrough();\r\n\r\n    fixture.detectChanges();\r\n    component.deleteRevenueDetails(revenueService);\r\n    expect(component.deleteRevenueDetails).toHaveBeenCalled();\r\n    expect(authenticateService.deleteRevenueAndSource).toHaveBeenCalled();\r\n  });\r\n\r\n  // it('Error capture for getPreviousHistory', () => {\r\n  //   const revenueService = { id: '82377546-e7a2-44e6-b2d9-fa66f34b87ac' };\r\n  //   // spyOn(component, 'deleteRevenueDetails');\r\n  //   spyOn(alertService, 'showErrorInformation');\r\n  //   // const xService = fixture.debugElement.injector.get(authenticateService);\r\n  //   spyOn(authenticateService, 'deleteRevenueAndSource').and.returnValue(\r\n  //     throwError({ status: 404 })\r\n  //   );\r\n  //   component.deleteRevenueDetails(revenueService);\r\n  //   expect(alertService.showErrorInformation).toHaveBeenCalled();\r\n  // });\r\n\r\n  it('should call delete', () => {\r\n    const revenueService = { id: '82377546-e7a2-44e6-b2d9-fa66f34b87ac' };\r\n    spyOn(component, 'delete').and.callThrough();\r\n    component.delete(revenueService);\r\n    expect(component.delete).toHaveBeenCalled();\r\n  });\r\n\r\n  it('Should call getLoadRevenuesInitData', () => {\r\n    const object = {\r\n      page: '1',\r\n      per_page: '500',\r\n      filterDTO: [\r\n        {\r\n          key: 'revenueDate',\r\n          operation: ':',\r\n          value: '2021-03-01T00:00:00.000_2021-03-22T00:00:00.000'\r\n        }\r\n      ],\r\n      sort: [{ field: 'revenueDate', direction: 'DESC' }]\r\n    };\r\n    let data: IRevenueDTO;\r\n    const headers = new HttpResponse<any>();\r\n    // headers.set('body', [data]);\r\n    headers.headers.set('X-Total-Count', '6');\r\n    spyOn(component, 'getLoadRevenuesInitData').and.callThrough();\r\n    spyOn(authenticateService, 'getRevenuesData').and.returnValue(\r\n      of(new HttpResponse<any>())\r\n    );\r\n    fixture.detectChanges();\r\n    component.getLoadRevenuesInitData(object, true);\r\n    expect(authenticateService.getRevenuesData).toHaveBeenCalled();\r\n    component.totalRevenues = [data];\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\dashboard\\dashboard.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChangeDetectorRef' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Renderer2' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":23,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRevenueDTO' is defined but never used.","line":27,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatPaginator' is defined but never used.","line":31,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PageEvent' is defined but never used.","line":31,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CdkDetailRowDirective' is defined but never used.","line":32,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDialog' is defined but never used.","line":33,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BrandsModel' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpResponse' is defined but never used.","line":43,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":44,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2668,2671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2668,2671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3183,3186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3183,3186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3242,3245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3242,3245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3271,3274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3271,3274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3358,3361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3358,3361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3376,3379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3376,3379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3412,3415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3412,3415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3438,3441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3438,3441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3466,3469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3466,3469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3484,3487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3484,3487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3505,3508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3505,3508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3913,3916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3913,3916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3949,3952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3949,3952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4026,4029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4026,4029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4059,4062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4059,4062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4951,4954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4951,4954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":158,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":158,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'search' should be typed.","line":158,"column":21,"nodeType":"Identifier","messageId":"missingArgType","endLine":158,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'data' should be typed.","line":158,"column":29,"nodeType":"Identifier","messageId":"missingArgType","endLine":158,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'key' should be typed.","line":158,"column":35,"nodeType":"Identifier","messageId":"missingArgType","endLine":158,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":171,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":171,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":179,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":179,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'source' should be typed.","line":179,"column":23,"nodeType":"Identifier","messageId":"missingArgType","endLine":179,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":211,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":211,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":233,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":233,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'loadRevenueDetails' should be typed with a non-any type.","line":233,"column":27,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":233,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7528,7531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7528,7531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'value' should be typed.","line":233,"column":52,"nodeType":"Identifier","messageId":"missingArgType","endLine":233,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":233,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":233,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7726,7729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7726,7729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":272,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":272,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":286,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":286,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":298,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":298,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":313,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":313,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'currentSize' should be typed.","line":313,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":313,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'offset' should be typed.","line":313,"column":28,"nodeType":"Identifier","messageId":"missingArgType","endLine":313,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'limit' should be typed.","line":313,"column":36,"nodeType":"Identifier","messageId":"missingArgType","endLine":313,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":342,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11450,11453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11450,11453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":366,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":366,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":371,"column":25,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":371,"endColumn":75},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'startDate' should be typed with a non-any type.","line":371,"column":35,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":371,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12425,12428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12425,12428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'enddate' should be typed with a non-any type.","line":371,"column":51,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":371,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12439,12442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12439,12442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'days' should be typed with a non-any type.","line":371,"column":65,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":371,"endColumn":74},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12450,12453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12450,12453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":381,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":381,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":513,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":513,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":524,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":524,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'revenueObj' should be typed with a non-any type.","line":524,"column":22,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":524,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":524,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":524,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17441,17444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17441,17444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'isCorrection' should be typed with a non-any type.","line":524,"column":39,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":524,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":524,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":524,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17460,17463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17460,17463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":545,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":545,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'revenueObj' should be typed.","line":545,"column":10,"nodeType":"Identifier","messageId":"missingArgType","endLine":545,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":563,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":563,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'revenueObj' should be typed with a non-any type.","line":563,"column":24,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":563,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":563,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":563,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18733,18736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18733,18736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'response' is defined but never used.","line":566,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":566,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is defined but never used.","line":576,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":576,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":587,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":587,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":616,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":616,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":625,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":625,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'RevenueSources' should be typed.","line":625,"column":24,"nodeType":"Identifier","messageId":"missingArgType","endLine":625,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":635,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":635,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'formDataIs' should be typed.","line":635,"column":16,"nodeType":"Identifier","messageId":"missingArgType","endLine":635,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":640,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":640,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":644,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":644,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'row' should be typed.","line":653,"column":55,"nodeType":"Identifier","messageId":"missingArgType","endLine":653,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":681,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":681,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'sourceObject' should be typed with a non-any type.","line":681,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":681,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":681,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":681,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22136,22139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22136,22139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":711,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":711,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'filterValue' should be typed.","line":711,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":711,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":715,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":715,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":723,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":723,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":729,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":729,"endColumn":20}],"errorCount":0,"warningCount":93,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { UserSessionService } from '../../../shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  trigger,\r\n  style,\r\n  state,\r\n  animate,\r\n  transition,\r\n  query,\r\n  stagger\r\n} from '@angular/animations';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport * as moment from 'moment';\r\nimport { Subject } from 'rxjs';\r\nimport { IRevenueDTO } from 'src/app/shared/model/revenueSource.model';\r\n// material dependencies\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { CdkDetailRowDirective } from '../../../shared/directives/table-expandable-row-directive';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { DialogDataExampleDialog } from '../../../shared/common-components/custom-model/custom-dialog';\r\nimport {\r\n  customModalData,\r\n  BrandsModel\r\n} from '../../../shared/model/applicationModel';\r\nimport {\r\n  displayedDashBoardColumns,\r\n  displayDashboardRevenueDetailsColumns\r\n} from '../../../shared/constants/app-constants';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { UserResponseModel } from 'src/app/shared/model/loginApiResponse.model';\r\nimport get from 'lodash.get';\r\n// import { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\r\n      state('expanded', style({ height: '*' })),\r\n      transition(\r\n        'expanded <=> collapsed',\r\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')\r\n      )\r\n    ]),\r\n    trigger('logoAni', [\r\n      transition('* => *', [\r\n        query(':enter', style({ opacity: 0 }), { optional: true }),\r\n        query(\r\n          ':enter',\r\n          stagger('100ms', [animate('1s', style({ opacity: 1 }))]),\r\n          { optional: true }\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  @ViewChild(MatTable) _matTable: MatTable<any>;\r\n  @ViewChild('paginator2', { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  @Input() singleChildRowDetail: boolean;\r\n  public searchRevenue = false;\r\n  responsive = true;\r\n  cols = 1;\r\n  displayedColumns = displayedDashBoardColumns;\r\n  totalRevenues: IRevenueDTO[] = [];\r\n  openedRow: CdkDetailRowDirective;\r\n  tableData = new MatTableDataSource<IRevenueDTO>([]);\r\n  loggedUserDetails: UserResponseModel = null;\r\n  BrandResponse: BrandsModel[] = [];\r\n  revenueLocResponse: any;\r\n  revenueSearchForm: FormGroup;\r\n  finalServiceType: any[] = [];\r\n  subscription: any;\r\n  requestRevenueObj: {\r\n    page: string;\r\n    per_page: string;\r\n    filterDTO: any[];\r\n    sort: any[];\r\n  };\r\n  deleteSubscription: any;\r\n  userSubscription: any;\r\n  expandedRevenueObj: any;\r\n  apiCalls: any[] = [];\r\n  role: any;\r\n\r\n  /** New changes */\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n  public startDateIs = new Date(\r\n    moment().startOf('month').format('YYYY-MM-DD hh:mm')\r\n  );\r\n  public endDateIs = new Date(moment().format('YYYY-MM-DD hh:mm'));\r\n  displayRevenueDetailsColumns = displayDashboardRevenueDetailsColumns;\r\n  public monthOptionsIs: any[] = [];\r\n  public dueToOptions: any[] = [];\r\n  public displaySearchInput = false;\r\n  public selectedObjects: any[] = [];\r\n  getallbrandtypes: any[];\r\n  searchFormDataIs: FormGroup;\r\n  search = '';\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private renderer: Renderer2,\r\n    private authService: AuthenticateService,\r\n    public alertService: SweetAlertService,\r\n    private router: Router,\r\n    private changeDetect: ChangeDetectorRef,\r\n    private dialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.revenueSearchForm = new FormGroup({\r\n      brandId: new FormControl(''),\r\n      revenueLocation: new FormControl(null),\r\n      revenueServiceId: new FormControl([]),\r\n      revenueFromDate: new FormControl(this.startDateIs, Validators.required),\r\n      revenueToDate: new FormControl(this.endDateIs, Validators.required),\r\n      revenueDepositIdentifier: new FormControl(''),\r\n      locFilterCtrl: new FormControl('')\r\n    });\r\n\r\n    this.userSessionService.currentUser.subscribe(\r\n      (res: any) => (this.loggedUserDetails = res)\r\n    );\r\n    this.userSessionService.allReefBrands.subscribe(\r\n      (response: BrandsModel[]) => (this.BrandResponse = response)\r\n    );\r\n\r\n    this.role = get(this.loggedUserDetails, 'authorities[0].code');\r\n    this.resetRequestRevenueObj();\r\n    this.getRevenuesInitData();\r\n  }\r\n\r\n  // ngAfterViewInit() {\r\n  //   this.tableData.paginator = this.paginator;\r\n  //   this.changeDetect.detectChanges();\r\n  // }\r\n\r\n  nestedFilterCheck(search, data, key) {\r\n    if (typeof data[key] === 'object') {\r\n      for (const k in data[key]) {\r\n        if (data[key][k] !== null) {\r\n          search = this.nestedFilterCheck(search, data[key], k);\r\n        }\r\n      }\r\n    } else {\r\n      search += data[key];\r\n    }\r\n    return search;\r\n  }\r\n\r\n  SearchRevenue() {\r\n    this.getRevenuesInitData();\r\n  }\r\n\r\n  /**\r\n   * check differ Monthly\r\n   */\r\n\r\n  returnIsDifferMonth(source) {\r\n    const revenueTypesDTOContainsDiffer =\r\n      source &&\r\n      source.revenueTypesDTO &&\r\n      (source.revenueTypesDTO.description as string);\r\n    const objectIs = { flag: false, dueToFlag: false, differFlag: false };\r\n    if (\r\n      revenueTypesDTOContainsDiffer &&\r\n      revenueTypesDTOContainsDiffer\r\n        .toLocaleLowerCase()\r\n        .includes('deferred monthly')\r\n    ) {\r\n      objectIs.flag = true;\r\n      objectIs.dueToFlag = false;\r\n      objectIs.differFlag = true;\r\n    } else if (\r\n      revenueTypesDTOContainsDiffer &&\r\n      revenueTypesDTOContainsDiffer\r\n        .toLocaleLowerCase()\r\n        .includes('due to location')\r\n    ) {\r\n      objectIs.flag = true;\r\n      objectIs.differFlag = false;\r\n      objectIs.dueToFlag = true;\r\n    } else {\r\n      objectIs.flag = false;\r\n      objectIs.differFlag = false;\r\n      objectIs.dueToFlag = false;\r\n    }\r\n    return objectIs;\r\n  }\r\n\r\n  getRevenuesInitData() {\r\n    if (this.startDateIs && this.endDateIs) {\r\n      const revenueStart = moment(this.startDateIs).format(\r\n        'YYYY-MM-DDT00:00:00.000'\r\n      );\r\n      const revenueEnd = moment(this.endDateIs).format(\r\n        'YYYY-MM-DDT00:00:00.000'\r\n      );\r\n      const revenueDateFilter = {\r\n        key: 'revenueDate',\r\n        operation: ':',\r\n        value: `${revenueStart}_${revenueEnd}`\r\n      };\r\n      this.requestRevenueObj['filterDTO'].push(revenueDateFilter);\r\n    }\r\n    const SortDTO = {\r\n      field: 'revenueDate',\r\n      direction: 'DESC'\r\n    };\r\n    this.requestRevenueObj['sort'].push(SortDTO);\r\n    this.getLoadRevenuesInitData(this.requestRevenueObj, true);\r\n  }\r\n  getLoadRevenuesInitData(loadRevenueDetails: any, value) {\r\n    this.blockUI.start('Loading....');\r\n    this.totalRevenues = [];\r\n    this.tableData.data = [];\r\n    this.authService.getRevenuesData(loadRevenueDetails).subscribe(\r\n      (data: any) => {\r\n        this.totalRevenues = data?.body as IRevenueDTO[];\r\n        this.totalRevenues.length = Number(data?.headers?.get('X-Total-Count'));\r\n        if (this.totalRevenues.length > 0) {\r\n          this.totalRevenues.forEach((revenue: IRevenueDTO) => {\r\n            revenue.close = false;\r\n            revenue.revenueDate = moment(revenue.revenueDate).format(\r\n              'MM/DD/YYYY'\r\n            );\r\n            revenue.submittedDate = moment(revenue.submittedDate).format(\r\n              'MM/DD/YYYY'\r\n            );\r\n            revenue.status = revenue?.status === 'S' ? 'Submitted' : 'Entered';\r\n            revenue.submittedByFLname = `${revenue?.submittedBy?.firstName} ${revenue?.submittedBy?.lastName}`;\r\n            // return revenue;\r\n          });\r\n        }\r\n        this.tableData = new MatTableDataSource<IRevenueDTO>(\r\n          this.totalRevenues\r\n        );\r\n        this.tableData.paginator = this.paginator;\r\n        this.filterTableData();\r\n        this.sortingData();\r\n        this.tableData.sort = this.sort;\r\n        this.changeDetect.detectChanges();\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  nextPageData(event: PageEvent) {\r\n    const pageIndex = event.pageIndex;\r\n    const pageSize = event.pageSize;\r\n    const previousIndex = event.previousPageIndex;\r\n    const previousSize = pageSize * pageIndex;\r\n    if (pageIndex !== previousIndex) {\r\n      this.getNextData(\r\n        previousSize,\r\n        (pageIndex + 1).toString(),\r\n        pageSize.toString()\r\n      );\r\n    }\r\n  }\r\n\r\n  filterTableData() {\r\n    this.tableData.filterPredicate = (data, filter: string) => {\r\n      const accumulator = (currentTerm, key) => {\r\n        return this.nestedFilterCheck(currentTerm, data, key);\r\n      };\r\n      const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\r\n      // Transform the filter by converting it to lowercase and removing whitespace.\r\n      const transformedFilter = filter.trim().toLowerCase();\r\n      return dataStr.indexOf(transformedFilter) !== -1;\r\n    };\r\n  }\r\n\r\n  sortingData() {\r\n    this.tableData.sortingDataAccessor = (item, property) => {\r\n      switch (property) {\r\n        case 'locationDTO.locationID':\r\n          return item.locationDTO.locationID;\r\n        case 'serviceDTO.serviceId':\r\n          return item.serviceDTO.serviceId;\r\n        case 'tenderTypesDTO.code':\r\n          return item.tenderTypesDTO.code;\r\n        default:\r\n          return item[property];\r\n      }\r\n    };\r\n  }\r\n\r\n  getNextData(currentSize, offset, limit) {\r\n    this.blockUI.start('Loading....');\r\n    const revenueFromDate =\r\n      this.searchFormDataIs && this.searchFormDataIs.value.revenueFromDate;\r\n    const revenueToDate =\r\n      this.searchFormDataIs && this.searchFormDataIs.value.revenueToDate;\r\n    if (revenueFromDate && revenueToDate) {\r\n      const revenueStart = moment(revenueFromDate).format(\r\n        'YYYY-MM-DDT00:00:00.000'\r\n      );\r\n      const revenueEnd = moment(revenueToDate).format(\r\n        'YYYY-MM-DDT00:00:00.000'\r\n      );\r\n      const revenueDateFilter = {\r\n        key: 'revenueDate',\r\n        operation: ':',\r\n        value: `${revenueStart}_${revenueEnd}`\r\n      };\r\n      this.requestRevenueObj['filterDTO'].push(revenueDateFilter);\r\n    }\r\n    const SortDTO = {\r\n      field: 'revenueDate',\r\n      direction: 'DESC'\r\n    };\r\n    this.requestRevenueObj['sort'].push(SortDTO);\r\n    this.requestRevenueObj.page = offset;\r\n    this.requestRevenueObj.per_page = limit;\r\n    // this.blockUI.start('Loading....');\r\n    this.authService.getRevenuesData(this.requestRevenueObj).subscribe(\r\n      (data: any) => {\r\n        this.totalRevenues.length = currentSize;\r\n        this.totalRevenues.push(...(data['body'] as IRevenueDTO[]));\r\n        this.totalRevenues.length = data.headers.get('X-Total-Count');\r\n        this.totalRevenues.forEach((revenue: IRevenueDTO) => {\r\n          revenue.close = false;\r\n        });\r\n        this.tableData = new MatTableDataSource<IRevenueDTO>(\r\n          this.totalRevenues\r\n        );\r\n        this.tableData.paginator = this.paginator;\r\n        this.filterTableData();\r\n        this.sortingData();\r\n        this.tableData.sort = this.sort;\r\n        this.changeDetect.detectChanges();\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  addRevenue() {\r\n    this.userSessionService.setSelectedRevenueForCorrection(null);\r\n    this.router.navigate(['/app/addrevenue']);\r\n  }\r\n\r\n  dateRangeValidation = function (startDate: any, enddate: any, days: any) {\r\n    const from = moment(startDate, 'MM/DD/YYYY');\r\n    const to = moment(enddate, 'MM/DD/YYYY');\r\n    const duration = to.diff(from, 'days');\r\n    if (duration > days) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n  filterDTOObjCreation() {\r\n    this.requestRevenueObj.filterDTO = [];\r\n    let location_id;\r\n    let service_id;\r\n    const revenueFromDate = this.searchFormDataIs\r\n      ? this.searchFormDataIs.value.revenueFromDate\r\n      : new Date(moment().startOf('month').format('YYYY-MM-DD hh:mm'));\r\n    const revenueToDate = this.searchFormDataIs\r\n      ? this.searchFormDataIs.value.revenueToDate\r\n      : new Date(moment().format('YYYY-MM-DD hh:mm'));\r\n\r\n    if (\r\n      this.dateRangeValidation(revenueFromDate, revenueToDate, 365) == false\r\n    ) {\r\n      this.blockUI.stop();\r\n      const modalData = new customModalData();\r\n      modalData.icon = 'error';\r\n      modalData.text = 'Date range should be less than a year';\r\n      modalData.title = 'Invalid Date Range';\r\n      modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n      this.dialog.open(DialogDataExampleDialog, {\r\n        data: modalData\r\n      });\r\n      return false;\r\n    }\r\n    if (\r\n      this.searchFormDataIs &&\r\n      this.searchFormDataIs.value &&\r\n      this.searchFormDataIs.value.revenueLocation &&\r\n      this.searchFormDataIs.value.revenueLocation.length > 0\r\n    ) {\r\n      this.searchFormDataIs.value.revenueLocation.forEach((element) => {\r\n        if (location_id) {\r\n          location_id += '__' + element.id;\r\n        } else {\r\n          location_id = element.id;\r\n        }\r\n      });\r\n      const locationIdFilter = {\r\n        key: 'location_id',\r\n        operation: ':',\r\n        value: location_id\r\n      };\r\n      this.requestRevenueObj['filterDTO'].push(locationIdFilter);\r\n    }\r\n    if (\r\n      this.searchFormDataIs &&\r\n      this.searchFormDataIs.value &&\r\n      this.searchFormDataIs.value.revenueServiceId &&\r\n      this.searchFormDataIs.value.revenueServiceId.length > 0\r\n    ) {\r\n      this.searchFormDataIs.value.revenueServiceId.forEach((element) => {\r\n        if (service_id) {\r\n          service_id += '__' + element.id;\r\n        } else {\r\n          service_id = element.id;\r\n        }\r\n      });\r\n      const serviceIdFilter = {\r\n        key: 'service_id',\r\n        operation: ':',\r\n        value: service_id\r\n      };\r\n      this.requestRevenueObj['filterDTO'].push(serviceIdFilter);\r\n    }\r\n    if (revenueFromDate != '' && revenueToDate != '') {\r\n      const revenueDateFilter = {\r\n        key: 'revenueDate',\r\n        operation: ':',\r\n        value:\r\n          moment(revenueFromDate).format('YYYY-MM-DDT00:00:00.000') +\r\n          '_' +\r\n          moment(revenueToDate).format('YYYY-MM-DDT00:00:00.000')\r\n      };\r\n      this.requestRevenueObj['filterDTO'].push(revenueDateFilter);\r\n    }\r\n    if (\r\n      this.searchFormDataIs &&\r\n      this.searchFormDataIs.value &&\r\n      this.searchFormDataIs.value.revenueDepositIdentifier\r\n    ) {\r\n      const depositIdentifierFilter = {\r\n        key: 'depositIdentifier',\r\n        operation: ':',\r\n        value: this.searchFormDataIs.value.revenueDepositIdentifier\r\n      };\r\n      this.requestRevenueObj['filterDTO'].push(depositIdentifierFilter);\r\n    }\r\n\r\n    if (this.loggedUserDetails.brandCode !== 'All') {\r\n      const brandFilter = {\r\n        key: 'brand',\r\n        operation: ':',\r\n        value: this.loggedUserDetails.brandId\r\n      };\r\n      this.requestRevenueObj['filterDTO'].push(brandFilter);\r\n    } else {\r\n      let brandString;\r\n      let brandID;\r\n      if (\r\n        (this.searchFormDataIs &&\r\n          this.searchFormDataIs.value &&\r\n          this.searchFormDataIs.value.brandType &&\r\n          this.searchFormDataIs.value.brandType.code === 'All') ||\r\n        !this.searchFormDataIs ||\r\n        (this.searchFormDataIs && !this.searchFormDataIs.value.brandType)\r\n      ) {\r\n        brandString = 'brand2';\r\n        brandID = this.loggedUserDetails.brandId;\r\n      } else {\r\n        brandString = 'brand';\r\n        brandID =\r\n          this.searchFormDataIs &&\r\n          this.searchFormDataIs.value &&\r\n          this.searchFormDataIs.value.brandType &&\r\n          this.searchFormDataIs.value.brandType.id;\r\n      }\r\n      const brandFilter = {\r\n        key: brandString,\r\n        operation: ':',\r\n        value: brandID\r\n      };\r\n      this.requestRevenueObj['filterDTO'].push(brandFilter);\r\n    }\r\n\r\n    const SortDTO = {\r\n      field: 'revenueDate',\r\n      direction: 'DESC'\r\n    };\r\n    this.requestRevenueObj['sort'].push(SortDTO);\r\n  }\r\n\r\n  searchRevenues(formDataIs: FormGroup) {\r\n    this.resetRequestRevenueObj();\r\n    this.searchFormDataIs = formDataIs;\r\n    this.totalRevenues = [];\r\n    this.tableData.data = [];\r\n    this.filterDTOObjCreation();\r\n    this.requestRevenueObj.page = '1';\r\n    this.requestRevenueObj.per_page = '500';\r\n    this.getLoadRevenuesInitData(this.requestRevenueObj, false);\r\n  }\r\n\r\n  editRevenueDetails(revenueObj: any, isCorrection: any) {\r\n    this.blockUI.start('Loading....');\r\n    this.subscription = this.authService\r\n      .getEditRevenuesData(revenueObj.id)\r\n      .subscribe(\r\n        (response) => {\r\n          this.revenueLocResponse = response;\r\n          this.revenueLocResponse['isCorrection'] = isCorrection;\r\n          this.userSessionService.setSelectedRevenueForCorrection(\r\n            this.revenueLocResponse\r\n          );\r\n          this.router.navigate(['/app/addrevenue']);\r\n          this.blockUI.stop();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  delete(revenueObj) {\r\n    const modalData = new customModalData();\r\n    modalData.icon = 'warning';\r\n    modalData.text = 'Are you sure, It will delete Revenue!';\r\n    modalData.title = 'Are you sure';\r\n    modalData.delete = true;\r\n    modalData.imagePath = 'assets/images/popup_images/delete_image.png';\r\n    modalData.buttonText = 'Yes';\r\n    const dialogRef = this.dialog.open(DialogDataExampleDialog, {\r\n      data: modalData\r\n    });\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        this.deleteRevenueDetails(revenueObj);\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteRevenueDetails(revenueObj: any) {\r\n    this.blockUI.start('Loading....');\r\n    this.authService.deleteRevenueAndSource(revenueObj.id).subscribe(\r\n      (response) => {\r\n        this.blockUI.stop();\r\n        const modalData = new customModalData();\r\n        modalData.icon = 'success';\r\n        modalData.text = 'Record Deleted Successfully!';\r\n        modalData.title = 'Success';\r\n        modalData.imagePath = 'assets/images/popup_images/success_popup.png';\r\n        const dialogRef = this.dialog.open(DialogDataExampleDialog, {\r\n          data: modalData\r\n        });\r\n        dialogRef.afterClosed().subscribe((result) => {\r\n          this.getRevenuesInitData();\r\n        });\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  revenueExportExcel() {\r\n    const displayfileName = 'RevenueAndSources.xlsx';\r\n    this.blockUI.start('Loading....');\r\n    this.filterDTOObjCreation();\r\n    this.subscription = this.authService\r\n      .exportSourceRevenues(this.requestRevenueObj)\r\n      .subscribe(\r\n        (data) => {\r\n          this.blockUI.stop();\r\n          const dataType = data.type;\r\n          const binaryData = [];\r\n          binaryData.push(data);\r\n          const downloadLink = document.createElement('a');\r\n          downloadLink.href = window.URL.createObjectURL(\r\n            new Blob(binaryData, { type: dataType })\r\n          );\r\n          downloadLink.setAttribute('download', displayfileName);\r\n          document.body.appendChild(downloadLink);\r\n          downloadLink.click();\r\n\r\n          this.resetRequestRevenueObj();\r\n          this.subscription.unsubscribe();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n  }\r\n  resetRequestRevenueObj() {\r\n    this.requestRevenueObj = {\r\n      page: '1',\r\n      per_page: '500',\r\n      filterDTO: [],\r\n      sort: []\r\n    };\r\n  }\r\n\r\n  getSourceAmountTotal(RevenueSources) {\r\n    let total = 0;\r\n    if (RevenueSources && RevenueSources.length > 0) {\r\n      RevenueSources.forEach((element) => {\r\n        total = total + element.amount;\r\n      });\r\n    }\r\n    return total;\r\n  }\r\n\r\n  resetFilters(formDataIs) {\r\n    this.tableData.data = [];\r\n    this.searchRevenues(formDataIs);\r\n  }\r\n\r\n  printPage() {\r\n    window.print();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n    if (this.userSubscription) {\r\n      this.userSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /** Expand row details */\r\n  onToggleChange(cdkDetailRow: CdkDetailRowDirective, row): void {\r\n    if (\r\n      this.singleChildRowDetail &&\r\n      this.openedRow &&\r\n      this.openedRow.expended\r\n    ) {\r\n      this.openedRow.toggle();\r\n    }\r\n    if (!row.close) {\r\n      this.blockUI.start();\r\n      this.authService.getEditRevenuesData(row.id).subscribe(\r\n        (data) => {\r\n          row.revenueSourceDetails = data;\r\n          row.close = true;\r\n          this.changeDetect.detectChanges();\r\n          this.blockUI.stop();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n    } else {\r\n      row.close = false;\r\n    }\r\n    this.openedRow = cdkDetailRow.expended ? cdkDetailRow : undefined;\r\n  }\r\n  /** return month/year */\r\n  getListOfDifferAmounts = (sourceObject: any) => {\r\n    if (this.returnIsDifferMonth(sourceObject).differFlag) {\r\n      this.monthOptionsIs = [];\r\n      for (let i = 1; i <= 12; i++) {\r\n        if (sourceObject['deferredAmount' + i]) {\r\n          const data = { year_month: null, amount: null };\r\n          data.year_month = `${sourceObject[`deferredMonth${i}`]}/${\r\n            sourceObject[`deferredYear${i}`]\r\n          }`;\r\n          data.amount = `${sourceObject[`deferredAmount${i}`]}`;\r\n          this.monthOptionsIs.push(data);\r\n        }\r\n      }\r\n    } else if (this.returnIsDifferMonth(sourceObject).dueToFlag) {\r\n      this.dueToOptions = [];\r\n      const dueToLocData = {\r\n        dueToLocation: '',\r\n        amount: '',\r\n        payor: '',\r\n        checkNumber: ''\r\n      };\r\n      dueToLocData.amount = sourceObject.amount;\r\n      dueToLocData.dueToLocation = sourceObject.dueToLocation;\r\n      dueToLocData.payor = sourceObject.payor;\r\n      dueToLocData.checkNumber = sourceObject.checkNumber;\r\n      this.dueToOptions.push(dueToLocData);\r\n    }\r\n  };\r\n\r\n  /** Filter Table */\r\n  applyFilter(filterValue) {\r\n    this.tableData.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  showSearchInput(e: MouseEvent) {\r\n    this.displaySearchInput = true;\r\n    setTimeout(() => {\r\n      this.renderer.selectRootElement('#search').focus();\r\n    });\r\n    e.stopPropagation();\r\n  }\r\n\r\n  onOutSideClick() {\r\n    if (!this.search) {\r\n      this.displaySearchInput = false;\r\n    }\r\n  }\r\n\r\n  roleCheck = () => {\r\n    const flag =\r\n      this.role === 'ROLE_DARMA_ADMIN' || this.role === 'ROLE_DARMA_OWNER'\r\n        ? false\r\n        : true;\r\n    return flag;\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\dashboard\\dashboard.module.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\dashboard\\search-revenue\\search-revenue.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BrandsModel' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'throwError' is defined but never used.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userSessionService' is assigned a value but never used.","line":67,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'alertService' is assigned a value but never used.","line":68,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":69,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":70,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":71,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is assigned a value but never used.","line":72,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":15}],"errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { SearchRevenueComponent } from './search-revenue.component';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators } from '@angular/forms';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { Locations } from 'src/app/shared/model/revenueSource.model';\r\nimport { forkJoin } from 'rxjs/internal/observable/forkJoin';\r\nimport { BrandsModel } from 'src/app/shared/model/applicationModel';\r\nimport { of } from 'rxjs/internal/observable/of';\r\nimport * as moment from 'moment';\r\nimport { throwError } from 'rxjs/internal/observable/throwError';\r\n\r\ndescribe('SearchRevenueComponent', () => {\r\n  let component: SearchRevenueComponent;\r\n  let fixture: ComponentFixture<SearchRevenueComponent>;\r\n  let apiService: ApiService;\r\n  let authenticateService: AuthenticateService;\r\n  let userSessionService: UserSessionService;\r\n  let alertService: SweetAlertService;\r\n  let httpMock: HttpTestingController;\r\n  let router: Router;\r\n  let httpClient: HttpClient;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [SearchRevenueComponent],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    userSessionService = TestBed.get(UserSessionService);\r\n    alertService = TestBed.get(SweetAlertService);\r\n    httpMock = TestBed.get(HttpTestingController);\r\n    router = TestBed.inject(Router);\r\n    httpClient = TestBed.get(HttpClient);\r\n    apiService = TestBed.get(ApiService);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(SearchRevenueComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  /*it('should call use-session to get brands data', () => {\r\n    const brandDataIs: BrandsModel[] = [];\r\n    fixture.detectChanges();\r\n    userSessionService.allReefBrands.subscribe((data) => {\r\n      expect(data).toBe(brandDataIs);\r\n    }).unsubscribe;\r\n  }); */\r\n\r\n  it('should get locations Based on brand', () => {\r\n    const locationObj = [new Locations()];\r\n    spyOn(component, 'getLocationsBasedOnBrand').and.callThrough();\r\n    spyOn(authenticateService, 'getLocationsBasedOnBrand').and.returnValue(\r\n      of(locationObj)\r\n    );\r\n    fixture.detectChanges();\r\n    const brandType = {\r\n      id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n      code: 'All'\r\n    };\r\n    component.loggedUserDetails = { brandCode: 'All' };\r\n    component.revenueSearchForm.patchValue({ brandType });\r\n    component.getLocationsBasedOnBrand();\r\n    expect(component.getLocationsBasedOnBrand).toHaveBeenCalled();\r\n    expect(authenticateService.getLocationsBasedOnBrand).toHaveBeenCalled();\r\n    expect(component.realEstateLocations).toEqual(locationObj);\r\n  });\r\n\r\n  it('should filter locationData proper', () => {\r\n    const locationObj = [new Locations()];\r\n    spyOn(component, 'filterLocations').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.filterLocations();\r\n    component.realEstateLocations = locationObj;\r\n    component.revenueSearchForm.patchValue({ locFilterCtrl: 'test' });\r\n    expect(component.filterLocations).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call disabled dropdown based on flag1', () => {\r\n    // const flagIs = true;\r\n    spyOn(component, 'returnDisabledDropdown').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.revenueSearchForm.patchValue({ brandType: '555' });\r\n    component.loggedUserDetails = { brandCode: 'All' };\r\n    // component.loggedUserDetails.brandCode === 'All';\r\n    const result = component.returnDisabledDropdown();\r\n    expect(result).toBeFalsy();\r\n  });\r\n\r\n  it('should call disabled dropdown based on flag2', () => {\r\n    // const flagIs = true;\r\n    spyOn(component, 'returnDisabledDropdown').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.revenueSearchForm.patchValue({ brandType: null });\r\n    // component.loggedUserDetails.brandCode === 'All';\r\n    component.loggedUserDetails = { brandCode: 'All' };\r\n    const result = component.returnDisabledDropdown();\r\n    expect(result).toBeTruthy();\r\n  });\r\n\r\n  it('should reset all filters', () => {\r\n    // const flagIs = true;\r\n    spyOn(component, 'resetFilters').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.serviceTypesByRealEstates = [];\r\n    component.revenueSearchForm.reset({\r\n      revenueFromDate: new Date(\r\n        moment().startOf('month').format('YYYY-MM-DD hh:mm')\r\n      ),\r\n      revenueToDate: new Date(moment().format('YYYY-MM-DD hh:mm'))\r\n    });\r\n    component.resetFilters();\r\n    expect(component.resetFilters).toHaveBeenCalled();\r\n    component.resetRevenueFilters.emit(component.revenueSearchForm);\r\n  });\r\n\r\n  it('should search revenues', () => {\r\n    spyOn(component, 'searchRevenues').and.callThrough();\r\n    // spyOn(component.searchRevenuesFromChild, '').and.callThrough()\r\n    fixture.detectChanges();\r\n    const brandType = {\r\n      code: 'All',\r\n      description: 'Lanier',\r\n      id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n      logo: null,\r\n      status: 'A'\r\n    };\r\n    const serviceId = {\r\n      applicableForDarma: true,\r\n      brandCode: 'CLH (PK1)',\r\n      closeDate: null,\r\n      companyId: 'PK001',\r\n      contractType: 'MANAGED',\r\n      id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n      openDate: null,\r\n      realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n      realEstateName: 'Bank of America Tower',\r\n      realEstateNumber: 'US-FL-RE-1003115',\r\n      serviceGroupName: 'Parking',\r\n      serviceId: 'PA-1000428',\r\n      serviceIdName: 'Bank of America Tower Parking',\r\n      serviceNameWithID:\r\n        'PA-1000428 - Bank of America Tower Parking(US-FL-RE-1003115)',\r\n      serviceType: 'Parking'\r\n    };\r\n    component.revenueSearchForm.patchValue({\r\n      brandType,\r\n      revenueDepositIdentifier: '25485582',\r\n      revenueLocation: [new Locations()],\r\n      revenueServiceId: [serviceId],\r\n      revenueFromDate: '2021-03-12T05:45:03.864',\r\n      revenueToDate: '2021-03-18T05:45:03.864'\r\n    });\r\n    component.searchRevenues();\r\n    component.searchRevenuesFromChild.emit(component.revenueSearchForm);\r\n    expect(component.searchRevenues).toHaveBeenCalled();\r\n    // expect(\r\n    //   component.searchRevenuesFromChild.emit(component.revenueSearchForm)\r\n    // ).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should filter location data', () => {\r\n    const object = [\r\n      {\r\n        id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n        serviceId: 'PA-1000428',\r\n        serviceIdName: 'Bank of America Tower Parking',\r\n        serviceType: 'Parking',\r\n        serviceGroupName: 'Parking',\r\n        realEstateName: 'Bank of America Tower',\r\n        realEstateNumber: 'US-FL-RE-1003115',\r\n        realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        openDate: null,\r\n        closeDate: null,\r\n        contractType: 'MANAGED',\r\n        companyId: 'PK001',\r\n        brandCode: 'CLH (PK1)',\r\n        applicableForDarma: true,\r\n        checked: false\r\n      },\r\n      {\r\n        id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd25',\r\n        serviceId: 'PA-1000428',\r\n        serviceIdName: 'Bank of America Tower Parking',\r\n        serviceType: 'Parking',\r\n        serviceGroupName: 'Parking',\r\n        realEstateName: 'Bank of America Tower',\r\n        realEstateNumber: 'US-FL-RE-1003115',\r\n        realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        openDate: null,\r\n        closeDate: null,\r\n        contractType: 'MANAGED',\r\n        companyId: 'PK001',\r\n        brandCode: 'CLH (PK1)',\r\n        applicableForDarma: true,\r\n        checked: false\r\n      }\r\n    ];\r\n    spyOn(component, 'getChangeLocationvalue').and.callThrough();\r\n    spyOn(authenticateService, 'getServiceId')\r\n      .and.callThrough()\r\n      .and.returnValue(\r\n        of({\r\n          message: 'success'\r\n        })\r\n      );\r\n    fixture.detectChanges();\r\n    component.apiCalls = [];\r\n    component.revenueSearchForm.patchValue({\r\n      revenueLocation: object\r\n    });\r\n    component.getChangeLocationvalue();\r\n    expect(component.getChangeLocationvalue).toHaveBeenCalled();\r\n    expect(authenticateService.getServiceId).toHaveBeenCalled();\r\n    component.apiCalls = [\r\n      expect(authenticateService.getServiceId).toHaveBeenCalled(),\r\n      expect(authenticateService.getServiceId).toHaveBeenCalled()\r\n    ];\r\n    forkJoin(component.apiCalls);\r\n  });\r\n\r\n  // it('Error capture Error case', () => {\r\n  //   // const pages = { id: '82377546-e7a2-44e6-b2d9-fa66f34b87ac' };\r\n  //   // spyOn(component, 'deleteRevenueDetails');\r\n  //   spyOn(alertService, 'showErrorInformation');\r\n  //   // const xService = fixture.debugElement.injector.get(authenticateService);\r\n  //   spyOn(authenticateService, 'getServiceId').and.returnValue(\r\n  //     throwError({ status: 404 })\r\n  //   );\r\n  //   // fixture.detectChanges();\r\n  //   component.getChangeLocationvalue();\r\n  //   expect(alertService.showErrorInformation).toHaveBeenCalled();\r\n  // });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\dashboard\\search-revenue\\search-revenue.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnDestroy' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChangeDetectorRef' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":26,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatCalendar' is defined but never used.","line":30,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDatepicker' is defined but never used.","line":30,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDateFormats' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Locations' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatSelect' is defined but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BrandsModel' is defined but never used.","line":47,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2693,2696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2693,2696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2786,2789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2786,2789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2810,2813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2810,2813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2865,2868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2865,2868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2889,2892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2889,2892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3178,3181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3178,3181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3237,3240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3237,3240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3266,3269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3266,3269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3308,3311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3308,3311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3363,3366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3363,3366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3390,3393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3390,3393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3500,3503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3500,3503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3533,3536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3533,3536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":154,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":154,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":158,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":158,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":169,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":169,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":209,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":209,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7413,7416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7413,7416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":230,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":230,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'arrayList' is assigned a value but never used.","line":232,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7838,7841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7838,7841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8234,8237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8234,8237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":283,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":283,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":287,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":287,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":356,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":356,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":363,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":363,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":368,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":368,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":377,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":377,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mode' is defined but never used.","line":377,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":377,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":381,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":381,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":393,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":393,"endColumn":16}],"errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  // Input,\r\n  ChangeDetectionStrategy,\r\n  Inject,\r\n  OnDestroy,\r\n  ChangeDetectorRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { UserSessionService } from '../../../../shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\n// import { Router } from '@angular/router';\r\nimport {\r\n  trigger,\r\n  style,\r\n  state,\r\n  animate,\r\n  transition,\r\n  query,\r\n  stagger\r\n} from '@angular/animations';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport * as moment from 'moment';\r\nimport get from 'lodash.get';\r\nimport { MatCalendar, MatDatepicker } from '@angular/material/datepicker';\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_FORMATS,\r\n  MatDateFormats\r\n} from '@angular/material/core';\r\nimport {\r\n  Locations\r\n  // IRevenueDTO\r\n} from 'src/app/shared/model/revenueSource.model';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\n// material dependencies\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { MATERIAL_DATEPICKER_FORMATS } from 'src/app/shared/constants/app-constants';\r\nimport { Subject, forkJoin } from 'rxjs';\r\nimport { BrandsModel } from 'src/app/shared/model/applicationModel';\r\n\r\nclass CustomDateAdapter extends MomentDateAdapter {\r\n  getDayOfWeekNames() {\r\n    return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-search-revenue',\r\n  templateUrl: './search-revenue.component.html',\r\n  styleUrls: ['./search-revenue.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\r\n      state('expanded', style({ height: '*' })),\r\n      transition(\r\n        'expanded <=> collapsed',\r\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')\r\n      )\r\n    ]),\r\n    trigger('logoAni', [\r\n      transition('* => *', [\r\n        query(':enter', style({ opacity: 0 }), { optional: true }),\r\n        query(\r\n          ':enter',\r\n          stagger('100ms', [animate('1s', style({ opacity: 1 }))]),\r\n          { optional: true }\r\n        )\r\n      ])\r\n    ])\r\n  ],\r\n  providers: [\r\n    { provide: DateAdapter, useClass: CustomDateAdapter },\r\n    { provide: MAT_DATE_FORMATS, useValue: MATERIAL_DATEPICKER_FORMATS }\r\n  ]\r\n})\r\nexport class SearchRevenueComponent implements OnInit {\r\n  [x: string]: any;\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  @Output()\r\n  searchRevenuesFromChild: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() resetRevenueFilters: EventEmitter<any> = new EventEmitter<any>();\r\n  @ViewChild('locationSelect') locationSelect: MatSelect;\r\n  revenueSearchForm: FormGroup;\r\n  public startDateIs = new Date(\r\n    moment().startOf('month').format('YYYY-MM-DD hh:mm')\r\n  );\r\n  public endDateIs = new Date(moment().format('YYYY-MM-DD hh:mm'));\r\n  loggedUserDetails: any = null;\r\n  brandResponse: BrandsModel[] = [];\r\n  role: any;\r\n  realEstateLocations: any[] = [];\r\n  serviceTypesByRealEstates: any[] = [];\r\n  public filteredLocations: ReplaySubject<any[]> = new ReplaySubject<any[]>(1);\r\n  private _onDestroy = new Subject<void>();\r\n  exampleHeader = searchCalenderHeader;\r\n  apiCalls: any[] = [];\r\n  finalServiceType: any[] = [];\r\n  expandCollapse = false;\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private alertService: SweetAlertService,\r\n    private authService: AuthenticateService,\r\n    private changeDetect: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // this.getLoadInitLocations();\r\n    this.revenueSearchForm = new FormGroup({\r\n      brandType: new FormControl(null),\r\n      revenueLocation: new FormControl([]),\r\n      revenueServiceId: new FormControl([]),\r\n      revenueFromDate: new FormControl(this.startDateIs, Validators.required),\r\n      revenueToDate: new FormControl(this.endDateIs, Validators.required),\r\n      revenueDepositIdentifier: new FormControl(''),\r\n      locFilterCtrl: new FormControl('')\r\n    });\r\n\r\n    this.userSessionService.shortMenuSelectionIs.subscribe((flag: boolean) => {\r\n      this.expandCollapse = flag;\r\n    });\r\n\r\n    this.userSessionService.currentUser.subscribe(\r\n      (res) => (this.loggedUserDetails = res)\r\n    );\r\n    this.userSessionService.allReefBrands.subscribe(\r\n      (response: BrandsModel[]) => {\r\n        this.brandResponse = response;\r\n      }\r\n    );\r\n\r\n    this.role = get(this.loggedUserDetails, 'authorities[0].code');\r\n    if (this.loggedUserDetails.brandCode !== 'All') {\r\n      this.getLocationsBasedOnBrand();\r\n    }\r\n\r\n    /** New changes */\r\n    this.revenueSearchForm.controls.locFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterLocations();\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setInitialValue();\r\n  }\r\n\r\n  returnDisabledDropdown() {\r\n    let flagIs = false;\r\n    if (\r\n      !this.revenueSearchForm.controls.brandType.value &&\r\n      this.loggedUserDetails.brandCode === 'All'\r\n    ) {\r\n      flagIs = true;\r\n    }\r\n    return flagIs;\r\n  }\r\n\r\n  getLocationsBasedOnBrand() {\r\n    this.blockUI.start('Loading....');\r\n    const payloadObj = { id: '', code: '' };\r\n    if (this.loggedUserDetails.brandCode === 'All') {\r\n      payloadObj.id = this.revenueSearchForm.value.brandType.id;\r\n      payloadObj.code = this.revenueSearchForm.value.brandType.code;\r\n    } else {\r\n      payloadObj.id = this.loggedUserDetails.brandId;\r\n      payloadObj.code = this.loggedUserDetails.brandCode;\r\n    }\r\n    this.authService.getLocationsBasedOnBrand(payloadObj).subscribe(\r\n      (response: Locations[]) => {\r\n        this.realEstateLocations = response;\r\n        for (const user of this.realEstateLocations) {\r\n          user.locationWithID = user.locationID + ' - ' + user.name;\r\n        }\r\n        this.filteredLocations.next(this.realEstateLocations.slice());\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private setInitialValue() {\r\n    this.filteredLocations\r\n      .pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // setting the compareWith property to a comparison function\r\n        // triggers initializing the selection according to the initial value of\r\n        // the form control (i.e. _initializeSelection())\r\n        // this needs to be done after the filteredBanks are loaded initially\r\n        // and after the mat-option elements are available\r\n        this.locationSelect.compareWith = (a: Locations, b: Locations) =>\r\n          a && b && a.id === b.id;\r\n      });\r\n  }\r\n\r\n  filterLocations() {\r\n    if (!this.realEstateLocations) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.revenueSearchForm?.controls?.locFilterCtrl?.value;\r\n    if (!search) {\r\n      this.filteredLocations.next(this.realEstateLocations.slice());\r\n      return;\r\n    } else {\r\n      search = search.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredLocations.next(\r\n      this.realEstateLocations.filter(\r\n        (location: any) =>\r\n          location?.locationWithID?.toLowerCase().indexOf(search) > -1\r\n      )\r\n    );\r\n  }\r\n\r\n  getChangeLocationvalue() {\r\n    const arrays = [];\r\n    const arrayList = [];\r\n    this.blockUI.start('Loading....');\r\n    this.apiCalls.length = 0;\r\n    this.apiCalls = [];\r\n    this.finalServiceType.length = 0;\r\n    this.finalServiceType = [];\r\n    this.revenueSearchForm.controls.revenueLocation.value.map((object: any) => {\r\n      if (object && !object.checked) {\r\n        object.checked = true;\r\n      }\r\n    });\r\n    this.revenueSearchForm.controls.revenueLocation.value.forEach((element) => {\r\n      if (element.id) {\r\n        this.apiCalls.push(this.authService.getServiceId(element.id));\r\n      }\r\n    });\r\n    if (this.apiCalls.length > 0) {\r\n      forkJoin(this.apiCalls).subscribe(\r\n        (response: any) => {\r\n          if (response.length > 0) {\r\n            response.forEach((data) => {\r\n              Array.prototype.push.apply(arrays, data);\r\n            });\r\n            this.serviceTypesByRealEstates = arrays;\r\n            for (const item of this.serviceTypesByRealEstates) {\r\n              item.serviceNameWithID =\r\n                item.serviceId +\r\n                ' - ' +\r\n                item.serviceIdName +\r\n                '(' +\r\n                item.realEstateNumber +\r\n                ')';\r\n            }\r\n            this.blockUI.stop();\r\n          }\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n    }\r\n    if (\r\n      this.revenueSearchForm.value.revenueLocation &&\r\n      this.revenueSearchForm.controls.revenueLocation.value.length === 0\r\n    ) {\r\n      this.serviceTypesByRealEstates = [];\r\n    }\r\n    this.blockUI.stop();\r\n  }\r\n\r\n  searchRevenues() {\r\n    this.searchRevenuesFromChild.emit(this.revenueSearchForm);\r\n  }\r\n\r\n  resetFilters() {\r\n    this.serviceTypesByRealEstates = [];\r\n    this.revenueSearchForm.reset({\r\n      revenueFromDate: new Date(\r\n        moment().startOf('month').format('YYYY-MM-DD hh:mm')\r\n      ),\r\n      revenueToDate: new Date(moment().format('YYYY-MM-DD hh:mm'))\r\n    });\r\n    this.resetRevenueFilters.emit(this.revenueSearchForm);\r\n  }\r\n}\r\n\r\n/** Custom header component for datepicker. */\r\n@Component({\r\n  selector: 'example-header',\r\n  styles: [\r\n    `\r\n      .example-header {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 0.5em;\r\n      }\r\n\r\n      .example-header-label {\r\n        flex: 1;\r\n        height: 1em;\r\n        font-weight: 500;\r\n        text-align: center;\r\n      }\r\n\r\n      .example-double-arrow .mat-icon {\r\n        margin: -22%;\r\n      }\r\n    `\r\n  ],\r\n  template: `\r\n    <div class=\"example-header\">\r\n      <button mat-icon-button (click)=\"previousClicked()\">\r\n        <mat-icon>keyboard_arrow_left</mat-icon>\r\n      </button>\r\n      <span\r\n        role=\"button\"\r\n        (click)=\"openaYear('year')\"\r\n        class=\"example-header-label cursor-pointer\"\r\n        >{{ periodLabel }}</span\r\n      >\r\n\r\n      <button mat-icon-button (click)=\"nextClicked()\">\r\n        <mat-icon>keyboard_arrow_right</mat-icon>\r\n      </button>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class searchCalenderHeader<D> implements OnDestroy {\r\n  private _destroyed = new Subject<void>();\r\n\r\n  constructor(\r\n    private _datePicker: MatDatepicker<D>,\r\n    private _calendar: MatCalendar<D>,\r\n    private _dateAdapter: DateAdapter<D>,\r\n    @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n    cdr: ChangeDetectorRef\r\n  ) {\r\n    _calendar.stateChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => cdr.markForCheck());\r\n  }\r\n\r\n  public todayClicked() {\r\n    this._calendar.activeDate = this._dateAdapter.today();\r\n    this._calendar._dateSelected(this._calendar.activeDate);\r\n    this._datePicker.select(this._dateAdapter.today());\r\n    this._datePicker.close();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  get periodLabel() {\r\n    return this._dateAdapter\r\n      .format(\r\n        this._calendar.activeDate,\r\n        this._dateFormats.display.monthYearLabel\r\n      )\r\n      .toLocaleUpperCase();\r\n  }\r\n\r\n  public openaYear(mode: 'month' | 'year') {\r\n    this._calendar.currentView = 'multi-year';\r\n  }\r\n\r\n  previousClicked() {\r\n    // mode: 'month' | 'year' | 'multi-year'\r\n    let mode = 'month';\r\n    if (this._calendar.currentView === 'multi-year') {\r\n      mode = 'year';\r\n    }\r\n    this._calendar.activeDate =\r\n      mode === 'month'\r\n        ? this._dateAdapter.addCalendarMonths(this._calendar.activeDate, -1)\r\n        : this._dateAdapter.addCalendarYears(this._calendar.activeDate, -1);\r\n  }\r\n\r\n  nextClicked() {\r\n    // mode: 'month' | 'year' | 'multi-year'\r\n    let mode = 'month';\r\n    if (this._calendar.currentView === 'multi-year') {\r\n      mode = 'year';\r\n    }\r\n    this._calendar.activeDate =\r\n      mode === 'month'\r\n        ? this._dateAdapter.addCalendarMonths(this._calendar.activeDate, 1)\r\n        : this._dateAdapter.addCalendarYears(this._calendar.activeDate, 1);\r\n  }\r\n}\r\n\r\n/**  Copyright 2019 Google LLC. All Rights Reserved.\r\n    Use of this source code is governed by an MIT-style license that\r\n    can be found in the LICENSE file at http://angular.io/license */\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\location.module.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\locations.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":63,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is assigned a value but never used.","line":64,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockResponse' is assigned a value but never used.","line":103,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'paginationPages' is assigned a value but never used.","line":166,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":166,"endColumn":26}],"errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { LocationsComponent } from './locations.component';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators } from '@angular/forms';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { of } from 'rxjs/internal/observable/of';\r\nimport { throwError } from 'rxjs/internal/observable/throwError';\r\n\r\ndescribe('LocationsComponent', () => {\r\n  let component: LocationsComponent;\r\n  let fixture: ComponentFixture<LocationsComponent>;\r\n  let apiService: ApiService;\r\n  let alertService: SweetAlertService;\r\n  let authenticateService: AuthenticateService;\r\n  let httpMock: HttpTestingController;\r\n  let router: Router;\r\n  let httpClient: HttpClient;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        BrowserAnimationsModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [LocationsComponent],\r\n      providers: [\r\n        ApiService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    alertService = TestBed.get(SweetAlertService);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    httpMock = TestBed.get(HttpTestingController);\r\n    router = TestBed.inject(Router);\r\n    httpClient = TestBed.get(HttpClient);\r\n    apiService = TestBed.get(ApiService);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(LocationsComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    fixture.detectChanges();\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should redirect the user to proper navigation when clicked on dashboard page', () => {\r\n    const spy = spyOn(router, 'navigate');\r\n    const mockResponse = [\r\n      {\r\n        applicableForDarma: true,\r\n        brandCode: 'CLH (PK1)',\r\n        closeDate: null,\r\n        companyId: 'PK001,',\r\n        contractType: 'SUBSIDY',\r\n        id: '8915445a-5e3a-474a-88a8-829b61a2d6d4',\r\n        openDate: null,\r\n        realEstateId: '0b892a00-34bc-4c06-9bcc-65d6c17aad3f',\r\n        realEstateName: 'Cite',\r\n        realEstateNumber: 'US-FL-RE-1003421',\r\n        serviceGroupName: 'Parking',\r\n        serviceId: 'PA-1000429',\r\n        serviceIdName: 'Cite Events Parking',\r\n        serviceType: 'Parking'\r\n      }\r\n    ];\r\n    component.getLocationDetails(mockResponse);\r\n    expect(spy).toHaveBeenCalledWith(['app/real-estate/location/bank-details']);\r\n  });\r\n\r\n  it('should call all services method and return locations', () => {\r\n    const mockResponse = [\r\n      {\r\n        applicableForDarma: true,\r\n        brandCode: 'CLH (PK1)',\r\n        closeDate: null,\r\n        companyId: 'PK001,',\r\n        contractType: 'SUBSIDY',\r\n        id: '8915445a-5e3a-474a-88a8-829b61a2d6d4',\r\n        openDate: null,\r\n        realEstateId: '0b892a00-34bc-4c06-9bcc-65d6c17aad3f',\r\n        realEstateName: 'Cite',\r\n        realEstateNumber: 'US-FL-RE-1003421',\r\n        serviceGroupName: 'Parking',\r\n        serviceId: 'PA-1000429',\r\n        serviceIdName: 'Cite Events Parking',\r\n        serviceType: 'Parking'\r\n      }\r\n    ];\r\n    component.pages.page = '1';\r\n    component.pages.per_page = '500';\r\n    spyOn(component, 'getAllLocationsIS').and.callThrough();\r\n    spyOn(authenticateService, 'getAllLocations').and.returnValue(\r\n      of({ message: 'success' })\r\n    );\r\n    fixture.detectChanges();\r\n    component.getAllLocationsIS(component.pages);\r\n    expect(component.getAllLocationsIS).toHaveBeenCalled();\r\n    expect(authenticateService.getAllLocations).toHaveBeenCalled();\r\n    // expect(component.locations).toBe(mockResponse);\r\n  });\r\n\r\n  it('should search table data', () => {\r\n    const searchString = 'test';\r\n    spyOn(component, 'applyFilter').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.applyFilter(searchString);\r\n  });\r\n\r\n  // It should call nextpage\r\n  it('should search next page data', () => {\r\n    const mockResponse = [\r\n      {\r\n        applicableForDarma: true,\r\n        brandCode: 'CLH (PK1)',\r\n        closeDate: null,\r\n        companyId: 'PK001,',\r\n        contractType: 'SUBSIDY',\r\n        id: '8915445a-5e3a-474a-88a8-829b61a2d6d4',\r\n        openDate: null,\r\n        realEstateId: '0b892a00-34bc-4c06-9bcc-65d6c17aad3f',\r\n        realEstateName: 'Cite',\r\n        realEstateNumber: 'US-FL-RE-1003421',\r\n        serviceGroupName: 'Parking',\r\n        serviceId: 'PA-1000429',\r\n        serviceIdName: 'Cite Events Parking',\r\n        serviceType: 'Parking'\r\n      }\r\n    ];\r\n    spyOn(component, 'nextPageData').and.callThrough();\r\n    spyOn(component, 'getNextData').and.callThrough();\r\n    spyOn(authenticateService, 'getAllLocations').and.returnValue(\r\n      of({ message: 'success' })\r\n    );\r\n    const paginationPages = { page: '1', per_page: '500' };\r\n    const pageIndex = 1;\r\n    const pageSize = 1;\r\n    fixture.detectChanges();\r\n    const object = {\r\n      pageIndex: 1,\r\n      pageSize: 2,\r\n      previousPageIndex: 2,\r\n      length: 2\r\n    };\r\n    // component.locations =\r\n    component.nextPageData(object);\r\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\r\n    // component.getAllLocationsIS(paginationPages);\r\n    expect(component.nextPageData).toHaveBeenCalled();\r\n    expect(component.getNextData).toHaveBeenCalled();\r\n    expect(authenticateService.getAllLocations).toHaveBeenCalled();\r\n    component.locations = mockResponse;\r\n    // expect(component.locations).toEqual(mockResponse);\r\n    // authenticateService.getAllLocations(paginationPages).subscribe((data) => {\r\n    //   expect(data).toBe(mockResponse);\r\n    // }).unsubscribe;\r\n  });\r\n\r\n  it('should onOutSideClick', () => {\r\n    spyOn(component, 'onOutSideClick').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.onOutSideClick();\r\n    expect(component.onOutSideClick).toHaveBeenCalled();\r\n  });\r\n  it('should call with string onOutSideClick', () => {\r\n    spyOn(component, 'onOutSideClick').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.search = 'test';\r\n    component.onOutSideClick();\r\n    expect(component.onOutSideClick).toHaveBeenCalled();\r\n  });\r\n  it('should call showSearchInput', () => {\r\n    const event = {\r\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n      stopPropagation: () => {}\r\n    };\r\n    spyOn(component, 'showSearchInput').and.callThrough();\r\n    const stopPropagationSpy = spyOn(event, 'stopPropagation');\r\n    component.displaySearchInput = true;\r\n    component.showSearchInput(event);\r\n    expect(component.showSearchInput).toHaveBeenCalled();\r\n    expect(stopPropagationSpy).toHaveBeenCalled();\r\n  });\r\n\r\n  it('Error capture for getPreviousHistory', () => {\r\n    component.pages.page = '1';\r\n    component.pages.per_page = '500';\r\n    spyOn(alertService, 'showErrorInformation');\r\n    spyOn(authenticateService, 'getAllLocations').and.returnValue(\r\n      throwError({ status: 404 })\r\n    );\r\n    const pageIndex = 1;\r\n    const pageSize = 1;\r\n    fixture.detectChanges();\r\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\r\n    expect(alertService.showErrorInformation).toHaveBeenCalled();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\locations.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":2,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Renderer2' is defined but never used.","line":2,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpResponse' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":9,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateService' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRealEstateServicesIds' is defined but never used.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatPaginator' is defined but never used.","line":20,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PageEvent' is defined but never used.","line":20,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2517,2520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2517,2520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3138,3141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3138,3141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4555,4558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4555,4558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { Component, OnInit, ViewChild, Renderer2 } from '@angular/core';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { Router } from '@angular/router';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\n// import { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\n// import { Subject } from 'rxjs';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  servicesColumnsIs,\r\n  paginationPages\r\n} from '../../../shared/constants/app-constants';\r\n/** New Changes */\r\nimport { IRealEstateServicesIds } from '../../../shared/model/revenueSource.model';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-locations',\r\n  templateUrl: './locations.component.html',\r\n  styleUrls: ['./locations.component.scss']\r\n})\r\nexport class LocationsComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  locations: IRealEstateServicesIds[] = [];\r\n  isLocationDetails: boolean;\r\n  /** New changes */\r\n  @ViewChild('paginatorPos', { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  displayedServicesColumns: string[] = servicesColumnsIs;\r\n  public servicesAre = new MatTableDataSource<IRealEstateServicesIds>([]);\r\n  public displaySearchInput = false;\r\n  pages = paginationPages;\r\n  search = '';\r\n  constructor(\r\n    private authService: AuthenticateService,\r\n    private alertService: SweetAlertService,\r\n    private renderer: Renderer2,\r\n    private router: Router,\r\n    private translate: TranslateService,\r\n    private userSessionService: UserSessionService\r\n  ) {\r\n    this.userSessionService.selectedLanguage.subscribe((data) => {\r\n      this.translate.use(data);\r\n      this.translate.setDefaultLang(data);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.isLocationDetails = false;\r\n    this.getAllLocationsIS(this.pages);\r\n  }\r\n\r\n  getAllLocationsIS(pagesRange) {\r\n    this.blockUI.start('Loading....');\r\n    this.authService\r\n      .getAllLocations(pagesRange)\r\n      .pipe(take(1))\r\n      .subscribe(\r\n        (data: any) => {\r\n          this.locations = data?.body as IRealEstateServicesIds[];\r\n          this.locations.length =\r\n            data && Number(data?.headers?.get('X-Total-Count')) | 0;\r\n          this.servicesAre = new MatTableDataSource<IRealEstateServicesIds>(\r\n            this.locations\r\n          );\r\n          this.servicesAre.paginator = this.paginator;\r\n          this.servicesAre.sort = this.sort;\r\n          this.blockUI.stop();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  getLocationDetails(location: any) {\r\n    this.isLocationDetails = true;\r\n    this.userSessionService.setSelectedRealEstateLocation(location);\r\n    this.userSessionService.setDisplayRealEstateDetailsFlag(true);\r\n    this.router.navigate([`app/real-estate/location/bank-details`]);\r\n  }\r\n\r\n  /** New changes */\r\n  applyFilter(filter: string) {\r\n    this.search = filter;\r\n    this.servicesAre.filter = filter.trim().toLowerCase();\r\n  }\r\n\r\n  showSearchInput(e) {\r\n    this.displaySearchInput = true;\r\n    setTimeout(() => {\r\n      const elementReference = document.querySelector('#search');\r\n      if (elementReference instanceof HTMLElement) {\r\n        elementReference.focus();\r\n      }\r\n    });\r\n    e?.stopPropagation();\r\n  }\r\n\r\n  nextPageData(event: PageEvent) {\r\n    const pageIndex = event.pageIndex;\r\n    const pageSize = event.pageSize;\r\n    const previousIndex = event.previousPageIndex;\r\n    const previousSize = pageSize * pageIndex;\r\n    if (previousIndex !== pageIndex) {\r\n      this.getNextData(\r\n        previousSize,\r\n        (pageIndex + 1).toString(),\r\n        pageSize.toString()\r\n      );\r\n    }\r\n  }\r\n\r\n  getNextData(currentSize: number, offset: string, limit: string) {\r\n    this.blockUI.start('Loading....');\r\n    const pagesRange = this.pages;\r\n    pagesRange.page = offset;\r\n    pagesRange.per_page = limit;\r\n    this.authService\r\n      .getAllLocations(pagesRange)\r\n      .pipe(take(1))\r\n      .subscribe(\r\n        (data: any) => {\r\n          this.locations.length = currentSize | 0;\r\n          this.locations.push(...(data?.body as IRealEstateServicesIds[]));\r\n          this.locations.length =\r\n            Number(data?.headers?.get('X-Total-Count')) | 0;\r\n          this.servicesAre = new MatTableDataSource<IRealEstateServicesIds>(\r\n            this.locations\r\n          );\r\n          this.servicesAre.paginator = this.paginator;\r\n          this.servicesAre.sort = this.sort;\r\n          this.blockUI.stop();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  onOutSideClick() {\r\n    if (!this.search) {\r\n      this.displaySearchInput = false;\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\operational-users\\operational-users.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LocationDTO' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserLocationInclusionData' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatTableDataSource' is defined but never used.","line":29,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":218,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":219,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":219,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":220,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":220,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is assigned a value but never used.","line":221,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":221,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7600,7603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7600,7603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8928,8931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8928,8931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { Router, RouterModule } from '@angular/router';\nimport {\n  HttpTestingController,\n  HttpClientTestingModule\n} from '@angular/common/http/testing';\nimport {\n  HttpClientModule,\n  HttpClient,\n  HttpHandler,\n  HttpResponse\n} from '@angular/common/http';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { PersistenceService } from 'angular-persistence';\nimport { Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/shared/services/api.service';\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { OperationalUsersComponent } from './operational-users.component';\nimport {\n  LocationDTO,\n  UserLocationInclusionData\n} from 'src/app/shared/model/revenueSource.model';\nimport { of } from 'rxjs/internal/observable/of';\nimport { throwError } from 'rxjs/internal/observable/throwError';\nimport { MatTableDataSource } from '@angular/material/table';\n\ndescribe('OperationalUsersComponent', () => {\n  let component: OperationalUsersComponent;\n  let fixture: ComponentFixture<OperationalUsersComponent>;\n  let apiService: ApiService;\n  let authenticateService: AuthenticateService;\n  let alertService: SweetAlertService;\n  let httpMock: HttpTestingController;\n  let router: Router;\n  let httpClient: HttpClient;\n  const mockResponse = {\n    id: '5d89c8de-ae15-4179-8c0a-89525c96675d',\n    userDTO: {\n      id: 'ef305a2a-828f-4dd0-b471-386450d99a68',\n      firstName: 'surendra',\n      lastName: 'vemireddy',\n      emailAddress: 'surendra.vemireddy@reeftechnology.com',\n      userName: 'surendra.vemireddy',\n      phone: '',\n      status: 'A',\n      usertype: 'DARMA',\n      rolesDTO: [\n        {\n          id: 7,\n          name: null,\n          code: 'ROLE_DARMA_OWNER',\n          usertype: 'DARMA',\n          description: 'Location User',\n          users: []\n        }\n      ],\n      usersLocationLinkDTO: [\n        {\n          id: 'b3fd3021-0069-45df-8837-64190e60cd24',\n          userDTO: null,\n          locationDTO: {\n            id: '19b9f5d0-09f6-472a-8735-e2560e010503',\n            locationID: 'US-FL-RE-1003115',\n            name: 'Bank of America Tower',\n            clientLegalName: null,\n            address1: '101 East Kennedy Blvd',\n            address2: null,\n            city: 'TAMPA',\n            county: null,\n            state: 'FL',\n            zipCode: '33602',\n            status: 'A',\n            phone: null,\n            cell: null,\n            fax: null,\n            ext: null,\n            companyName: 'CLH (PK1)',\n            executive: null,\n            serviceType: null,\n            contractType: null,\n            applicableForDarma: true,\n            noofSpaces: null,\n            subsidyType: null,\n            parentLocationID: 'PO40001000',\n            parentLocationName: 'Bank of America Tower',\n            tenderTypesLnkDTO: [],\n            revenueTypesLnkDTO: [],\n            bankAccountsLocationLinkDTO: [],\n            burdensDTO: [],\n            darmaUser: null,\n            brandCode: 'CLH (PK1)',\n            brandDTO: {\n              id: '5ab0936a-b38d-43c2-9e58-3d4245a607ee',\n              code: 'CLH (PK1)',\n              status: 'A',\n              logo: '',\n              description: 'CLH (AmeriPark)',\n              userDTO: []\n            },\n            dataView: null,\n            hoursOfOperation: null,\n            noOfGarageLevels: null,\n            noOfEntryLanes: null,\n            noOfExitLanes: null,\n            parcsManufacture: null,\n            dateOfLastMonthlyRateIncrease: null,\n            dateOfLastTransientRateIncrease: null,\n            typeOfFacility: null,\n            dueDay: null,\n            settlementDay: null,\n            iconName: null,\n            primaryContactId: null,\n            locationNotes: null,\n            active: null,\n            deleted: null\n          },\n          status: 'A'\n        },\n        {\n          id: '5d89c8de-ae15-4179-8c0a-89525c96675d',\n          userDTO: null,\n          locationDTO: {\n            id: 'ce03c7bd-ed76-48c0-9960-7e521376ccf4',\n            locationID: 'US-FL-RE-1003432',\n            name: '151 Biscayne',\n            clientLegalName: null,\n            address1: '14951 Royal Oaks Lane',\n            address2: null,\n            city: 'MIAMI',\n            county: null,\n            state: 'FL',\n            zipCode: '33181',\n            status: 'A',\n            phone: null,\n            cell: null,\n            fax: null,\n            ext: null,\n            companyName: 'CLH (PK1)',\n            executive: null,\n            serviceType: null,\n            contractType: null,\n            applicableForDarma: true,\n            noofSpaces: null,\n            subsidyType: null,\n            parentLocationID: 'PO40070400',\n            parentLocationName: '151 Biscayne',\n            tenderTypesLnkDTO: [],\n            revenueTypesLnkDTO: [],\n            bankAccountsLocationLinkDTO: [],\n            burdensDTO: [],\n            darmaUser: null,\n            brandCode: 'CLH (PK1)',\n            brandDTO: {\n              id: '5ab0936a-b38d-43c2-9e58-3d4245a607ee',\n              code: 'CLH (PK1)',\n              status: 'A',\n              logo: '',\n              description: 'CLH (AmeriPark)',\n              userDTO: []\n            },\n            dataView: null,\n            hoursOfOperation: null,\n            noOfGarageLevels: null,\n            noOfEntryLanes: null,\n            noOfExitLanes: null,\n            parcsManufacture: null,\n            dateOfLastMonthlyRateIncrease: null,\n            dateOfLastTransientRateIncrease: null,\n            typeOfFacility: null,\n            dueDay: null,\n            settlementDay: null,\n            iconName: null,\n            primaryContactId: null,\n            locationNotes: null,\n            active: null,\n            deleted: null\n          },\n          status: 'A'\n        }\n      ],\n      brandDTO: null,\n      brandCode: 'CLH (PK1)',\n      displayName: 'surendra vemireddy'\n    },\n    locationDTO: null,\n    status: 'A'\n  };\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        HttpClientTestingModule,\n        BrowserAnimationsModule,\n        HttpClientModule,\n        RouterModule,\n        RouterTestingModule,\n        MatDialogModule,\n        TranslateModule.forRoot()\n      ],\n      declarations: [OperationalUsersComponent],\n      providers: [\n        ApiService,\n        SweetAlertService,\n        MatDialog,\n        TranslateService,\n        PersistenceService,\n        HttpClient,\n        HttpHandler,\n        Validators\n      ]\n    }).compileComponents();\n    router = TestBed.inject(Router);\n    authenticateService = TestBed.get(AuthenticateService);\n    alertService = TestBed.get(SweetAlertService);\n    httpMock = TestBed.get(HttpTestingController);\n    router = TestBed.inject(Router);\n    httpClient = TestBed.get(HttpClient);\n    apiService = TestBed.get(ApiService);\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(OperationalUsersComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should call all users method and return all users location', () => {\n    const httpIs = new HttpResponse<any>({ body: [mockResponse] });\n    httpIs.headers.set('X-Total-Count', '6');\n    spyOn(component, 'getUserDetailsBasedOnLocation').and.callThrough();\n    spyOn(\n      authenticateService,\n      'getUserDetailsBasedOnLocationId'\n    ).and.returnValue(of(httpIs));\n    const paginationPages = { page: '1', per_page: '500' };\n    fixture.detectChanges();\n    component.getUserDetailsBasedOnLocation(paginationPages, '5256858');\n    // component.locationUsersData = new MatTableDataSource<UserLocationInclusionData>();\n  });\n\n  it('should search table data', () => {\n    const searchString = 'test';\n    spyOn(component, 'applyFilter').and.callThrough();\n    fixture.detectChanges();\n    component.applyFilter(searchString);\n  });\n\n  it('should onOutSideClick', () => {\n    spyOn(component, 'onOutSideClick').and.callThrough();\n    fixture.detectChanges();\n    component.onOutSideClick();\n    expect(component.onOutSideClick).toHaveBeenCalled();\n  });\n  it('should call with string onOutSideClick', () => {\n    spyOn(component, 'onOutSideClick').and.callThrough();\n    fixture.detectChanges();\n    component.search = 'test';\n    component.onOutSideClick();\n    expect(component.onOutSideClick).toHaveBeenCalled();\n  });\n\n  // It should call nextpage\n  it('should search next page data', () => {\n    const httpIs = new HttpResponse<any>({ body: [mockResponse] });\n    httpIs.headers.set('X-Total-Count', '6');\n    spyOn(component, 'nextPageData').and.callThrough();\n    spyOn(component, 'getNextData').and.callThrough();\n    spyOn(\n      authenticateService,\n      'getUserDetailsBasedOnLocationId'\n    ).and.returnValue(of(httpIs));\n    const pageIndex = 1;\n    const pageSize = 1;\n    fixture.detectChanges();\n    const object = {\n      pageIndex: 1,\n      pageSize: 2,\n      previousPageIndex: 2,\n      length: 2\n    };\n    component.selectedRealEstate = { id: '25255' };\n    component.nextPageData(object);\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\n  });\n\n  it('should search next page data', () => {\n    spyOn(component, 'nextPageData').and.callThrough();\n    fixture.detectChanges();\n    const object = {\n      pageIndex: 1,\n      pageSize: 2,\n      previousPageIndex: 1,\n      length: 2\n    };\n    component.selectedRealEstate = { id: '25255' };\n    component.nextPageData(object);\n  });\n\n  it('should call showSearchInput', () => {\n    const event = {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      stopPropagation: () => {}\n    };\n    spyOn(component, 'showSearchInput').and.callThrough();\n    const stopPropagationSpy = spyOn(event, 'stopPropagation');\n    component.displaySearchInput = true;\n    component.showSearchInput(event);\n    expect(component.showSearchInput).toHaveBeenCalled();\n    expect(stopPropagationSpy).toHaveBeenCalled();\n  });\n\n  it('Error capture ', () => {\n    spyOn(alertService, 'showErrorInformation');\n    spyOn(\n      authenticateService,\n      'getUserDetailsBasedOnLocationId'\n    ).and.returnValue(throwError({ status: 404 }));\n    fixture.detectChanges();\n    const pages = { page: '1', per_page: '100' };\n    component.getUserDetailsBasedOnLocation(pages, '858585');\n    expect(alertService.showErrorInformation).toHaveBeenCalled();\n  });\n\n  it('Error capture ', () => {\n    spyOn(alertService, 'showErrorInformation');\n    spyOn(\n      authenticateService,\n      'getUserDetailsBasedOnLocationId'\n    ).and.returnValue(throwError({ status: 404 }));\n    fixture.detectChanges();\n    const pageIndex = 1;\n    const pageSize = 1;\n    component.selectedRealEstate = { id: '2525 ' };\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\n    expect(alertService.showErrorInformation).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\operational-users\\operational-users.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Renderer2' is defined but never used.","line":1,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateService' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":6,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatPaginator' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PageEvent' is defined but never used.","line":9,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserLocationInclusionData' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1422,1425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1422,1425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2048,2051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2048,2051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":62,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":62,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'filter' should be typed.","line":62,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":62,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":67,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'e' should be typed.","line":67,"column":19,"nodeType":"Identifier","messageId":"missingArgType","endLine":67,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":80,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":80,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":86,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":86,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'pages' should be typed.","line":86,"column":33,"nodeType":"Identifier","messageId":"missingArgType","endLine":86,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed with a non-any type.","line":86,"column":40,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":86,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2910,2913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2910,2913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3074,3077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3074,3077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":123,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":123,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":137,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":137,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'currentSize' should be typed.","line":137,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":137,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'offset' should be typed.","line":137,"column":28,"nodeType":"Identifier","messageId":"missingArgType","endLine":137,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'limit' should be typed.","line":137,"column":36,"nodeType":"Identifier","messageId":"missingArgType","endLine":137,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4852,4855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4852,4855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5134,5137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5134,5137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, OnInit, ViewChild, Renderer2 } from '@angular/core';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { UserLocationInclusionData } from '../../../../shared/model/revenueSource.model';\r\nimport { take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-operational-users',\r\n  templateUrl: './operational-users.component.html',\r\n  styleUrls: ['./operational-users.component.scss']\r\n})\r\nexport class OperationalUsersComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  /** New changes */\r\n  @ViewChild('bankPaginator') paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  displayedServicesColumns: string[] = [\r\n    'userDTO.firstName',\r\n    'userDTO.lastName',\r\n    'userDTO.emailAddress'\r\n  ];\r\n  public locationUsersData = new MatTableDataSource<UserLocationInclusionData>(\r\n    []\r\n  );\r\n  public locationUsers: UserLocationInclusionData[];\r\n  public selectedRealEstate: any;\r\n  public displaySearchInput = false;\r\n  search = '';\r\n  pages = { page: '1', per_page: '100', id: '' };\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private renderer: Renderer2,\r\n    private authService: AuthenticateService,\r\n    private alertService: SweetAlertService,\r\n    private translate: TranslateService\r\n  ) {\r\n    this.userSessionService.selectedLanguage.subscribe((data) => {\r\n      this.translate.use(data);\r\n      this.translate.setDefaultLang(data);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.userSessionService.selectedRealEstateLocationIs.subscribe(\r\n      (location: any) => {\r\n        this.selectedRealEstate = location;\r\n      }\r\n    );\r\n    this.getUserDetailsBasedOnLocation(\r\n      this.pages,\r\n      this.selectedRealEstate.realEstateId\r\n    );\r\n  }\r\n\r\n  applyFilter(filter) {\r\n    this.search = filter;\r\n    this.locationUsersData.filter = filter.trim().toLowerCase();\r\n  }\r\n\r\n  showSearchInput(e) {\r\n    this.displaySearchInput = true;\r\n    setTimeout(() => {\r\n      // this.Search.nativeElement.focus();\r\n      const elementReference = document.querySelector('#search');\r\n      if (elementReference instanceof HTMLElement) {\r\n        elementReference.focus();\r\n      }\r\n      // this.renderer?.selectRootElement('#search')?.focus();\r\n    });\r\n    e.stopPropagation();\r\n  }\r\n\r\n  onOutSideClick() {\r\n    if (!this.search) {\r\n      this.displaySearchInput = false;\r\n    }\r\n  }\r\n\r\n  getUserDetailsBasedOnLocation(pages, id: any) {\r\n    this.blockUI.start();\r\n    this.authService\r\n      .getUserDetailsBasedOnLocationId(id, pages)\r\n      .pipe(take(1))\r\n      .subscribe(\r\n        (data: any) => {\r\n          this.locationUsers = data?.body;\r\n          this.locationUsers.length = Number(\r\n            data?.headers?.get('X-Total-Count')\r\n          );\r\n          this.locationUsersData = new MatTableDataSource<UserLocationInclusionData>(\r\n            data?.body\r\n          );\r\n          this.locationUsersData.paginator = this.paginator;\r\n          this.locationUsersData.sort = this.sort;\r\n          this.locationUsersData.sortingDataAccessor = (item, property) => {\r\n            switch (property) {\r\n              case 'userDTO.firstName':\r\n                return item.userDTO.firstName;\r\n              case 'userDTO.lastName':\r\n                return item.userDTO.lastName;\r\n              case 'userDTO.emailAddress':\r\n                return item.userDTO.emailAddress;\r\n              default:\r\n                return item[property];\r\n            }\r\n          };\r\n          this.blockUI.stop();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  nextPageData(event: PageEvent) {\r\n    const pageIndex = event.pageIndex;\r\n    const pageSize = event.pageSize;\r\n    const previousIndex = event.previousPageIndex;\r\n    const previousSize = pageSize * pageIndex;\r\n    if (pageIndex !== previousIndex) {\r\n      this.getNextData(\r\n        previousSize,\r\n        (pageIndex + 1).toString(),\r\n        pageSize.toString()\r\n      );\r\n    }\r\n  }\r\n\r\n  getNextData(currentSize, offset, limit) {\r\n    this.blockUI.start('Loading....');\r\n    const pagesRange = this.pages;\r\n    pagesRange.page = offset;\r\n    pagesRange.per_page = limit;\r\n    this.authService\r\n      .getUserDetailsBasedOnLocationId(this.selectedRealEstate?.id, pagesRange)\r\n      .subscribe(\r\n        (data: any) => {\r\n          this.locationUsers.length = currentSize;\r\n          this.locationUsers.push(...data?.body);\r\n          this.locationUsers.length = Number(\r\n            data?.headers?.get('X-Total-Count')\r\n          );\r\n          this.locationUsersData = new MatTableDataSource<any>(\r\n            this.locationUsers\r\n          );\r\n          this.locationUsersData.paginator = this.paginator;\r\n          this.locationUsersData.sort = this.sort;\r\n          this.locationUsersData.sortingDataAccessor = (item, property) => {\r\n            switch (property) {\r\n              case 'userDTO.firstName':\r\n                return item.userDTO.firstName;\r\n              case 'userDTO.lastName':\r\n                return item.userDTO.lastName;\r\n              case 'userDTO.emailAddress':\r\n                return item.userDTO.emailAddress;\r\n              default:\r\n                return item[property];\r\n            }\r\n          };\r\n          this.blockUI.stop();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\realestate-bank-account-details\\realestate-bank-account-details.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":88,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":90,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":91,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is assigned a value but never used.","line":92,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3572,3575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3572,3575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5149,5152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5149,5152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { RealEstateBankAccountDetailsComponent } from './realestate-bank-account-details.component';\nimport { Router, RouterModule } from '@angular/router';\nimport {\n  HttpTestingController,\n  HttpClientTestingModule\n} from '@angular/common/http/testing';\nimport {\n  HttpClientModule,\n  HttpClient,\n  HttpHandler,\n  HttpResponse\n} from '@angular/common/http';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { PersistenceService } from 'angular-persistence';\nimport { Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/shared/services/api.service';\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { of } from 'rxjs/internal/observable/of';\nimport { throwError } from 'rxjs/internal/observable/throwError';\n\ndescribe('RealEstateBankAccountDetailsComponent', () => {\n  let component: RealEstateBankAccountDetailsComponent;\n  let fixture: ComponentFixture<RealEstateBankAccountDetailsComponent>;\n  let apiService: ApiService;\n  let authenticateService: AuthenticateService;\n  let httpMock: HttpTestingController;\n  let router: Router;\n  let httpClient: HttpClient;\n  let alertService: SweetAlertService;\n  const mockResponse = [\n    {\n      id: '4fb28bf6-612a-4439-9f06-6bd656f3afce',\n      locationDTO: null,\n      serviceDTO: null,\n      status: 'A',\n      bankAccountsDTO: {\n        accountNumber: null,\n        accountType: null,\n        bankAccountsLocationLinkDTO: [],\n        bankName: 'Generic Bank Account',\n        brandDTO: {\n          code: 'All',\n          description: 'Lanier',\n          id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\n          logo: null,\n          status: 'A',\n          userDTO: []\n        },\n        contactTypesID: null,\n        description: null,\n        glNumber: '100505',\n        id: 'd47d9f54-38bc-4423-af32-abd06cc9f509',\n        oneGL: null,\n        routingNumber: null,\n        status: 'A',\n        uniqueIdentifier: 'RB094'\n      }\n    }\n  ];\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        HttpClientTestingModule,\n        BrowserAnimationsModule,\n        HttpClientModule,\n        RouterModule,\n        RouterTestingModule,\n        MatDialogModule,\n        TranslateModule.forRoot()\n      ],\n      declarations: [RealEstateBankAccountDetailsComponent],\n      providers: [\n        ApiService,\n        SweetAlertService,\n        MatDialog,\n        TranslateService,\n        PersistenceService,\n        HttpClient,\n        HttpHandler,\n        Validators\n      ]\n    }).compileComponents();\n    router = TestBed.inject(Router);\n    authenticateService = TestBed.get(AuthenticateService);\n    httpMock = TestBed.get(HttpTestingController);\n    httpClient = TestBed.get(HttpClient);\n    apiService = TestBed.get(ApiService);\n    alertService = TestBed.get(SweetAlertService);\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(RealEstateBankAccountDetailsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should call bankData api call and return bank data', () => {\n    const httpIs = new HttpResponse<any>({ body: [mockResponse] });\n    httpIs.headers.set('X-Total-Count', '6');\n    spyOn(component, 'getBankAccountsForLocation').and.callThrough();\n    spyOn(authenticateService, 'getBankAccountDetailsfromapi').and.returnValue(\n      of(httpIs)\n    );\n    const paginationPages = { page: '1', per_page: '500' };\n    fixture.detectChanges();\n    component.getBankAccountsForLocation(paginationPages, '858585');\n    expect(component.getBankAccountsForLocation).toHaveBeenCalled();\n    expect(authenticateService.getBankAccountDetailsfromapi).toHaveBeenCalled();\n  });\n\n  it('should search table data', () => {\n    const searchString = 'test';\n    spyOn(component, 'applyFilter').and.callThrough();\n    fixture.detectChanges();\n    component.applyFilter(searchString);\n  });\n\n  it('should onOutSideClick', () => {\n    spyOn(component, 'onOutSideClick').and.callThrough();\n    fixture.detectChanges();\n    component.onOutSideClick();\n    expect(component.onOutSideClick).toHaveBeenCalled();\n  });\n  it('should call with string onOutSideClick', () => {\n    spyOn(component, 'onOutSideClick').and.callThrough();\n    fixture.detectChanges();\n    component.search = 'test';\n    component.onOutSideClick();\n    expect(component.onOutSideClick).toHaveBeenCalled();\n  });\n  it('should search table data', () => {\n    const searchString = 'test';\n    spyOn(component, 'applyFilter').and.callThrough();\n    fixture.detectChanges();\n    component.applyFilter(searchString);\n  });\n\n  // It should call nextpage\n  it('should search next page data', () => {\n    const httpIs = new HttpResponse<any>({ body: [mockResponse] });\n    httpIs.headers.set('X-Total-Count', '6');\n    spyOn(component, 'nextPageData').and.callThrough();\n    spyOn(component, 'getNextData').and.callThrough();\n    spyOn(authenticateService, 'getBankAccountDetailsfromapi').and.returnValue(\n      of(httpIs)\n    );\n    const pageIndex = 1;\n    const pageSize = 1;\n    fixture.detectChanges();\n    const object = {\n      pageIndex: 1,\n      pageSize: 2,\n      previousPageIndex: 2,\n      length: 2\n    };\n    component.nextPageData(object);\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\n    component.selectedRealEstate.id = '58588885';\n    expect(authenticateService.getBankAccountDetailsfromapi).toHaveBeenCalled();\n  });\n\n  it('should call showSearchInput', () => {\n    const event = {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      stopPropagation: () => {}\n    };\n    spyOn(component, 'showSearchInput').and.callThrough();\n    const stopPropagationSpy = spyOn(event, 'stopPropagation');\n    component.displaySearchInput = true;\n    component.showSearchInput(event);\n    expect(component.showSearchInput).toHaveBeenCalled();\n    expect(stopPropagationSpy).toHaveBeenCalled();\n  });\n\n  it('should call returnString if account number', () => {\n    spyOn(component, 'returnString').and.callThrough();\n    const input = {\n      bankAccountsDTO: {\n        accountNumber: '1600064164'\n      }\n    };\n    fixture.detectChanges();\n    const result = component.returnString(input);\n    fixture.whenStable().then(() => {\n      expect(result.bankAccountsDTO.accountNumber).toBe('******4164');\n    });\n    expect(component.returnString).toHaveBeenCalled();\n  });\n  it('should call returnString if not account number', () => {\n    spyOn(component, 'returnString').and.callThrough();\n    const input = {\n      bankAccountsDTO: {\n        accountNumber: ''\n      }\n    };\n    fixture.detectChanges();\n    const result = component.returnString(input);\n    fixture.whenStable().then(() => {\n      expect(result.bankAccountsDTO.accountNumber).toBe('-----');\n    });\n    expect(component.returnString).toHaveBeenCalled();\n  });\n\n  it('Error capture ', () => {\n    spyOn(alertService, 'showErrorInformation');\n    spyOn(\n      authenticateService,\n      'getUserDetailsBasedOnLocationId'\n    ).and.returnValue(throwError({ status: 404 }));\n    fixture.detectChanges();\n    const pages = { page: '1', per_page: '100' };\n    component.getBankAccountsForLocation(pages, '858585');\n    expect(alertService.showErrorInformation).toHaveBeenCalled();\n  });\n\n  it('Error capture ', () => {\n    spyOn(alertService, 'showErrorInformation');\n    spyOn(\n      authenticateService,\n      'getUserDetailsBasedOnLocationId'\n    ).and.returnValue(throwError({ status: 404 }));\n    fixture.detectChanges();\n    const pageIndex = 1;\n    const pageSize = 1;\n    component.selectedRealEstate = { id: '2525 ' };\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\n    expect(alertService.showErrorInformation).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\realestate-bank-account-details\\realestate-bank-account-details.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Renderer2' is defined but never used.","line":1,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateService' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":6,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatPaginator' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PageEvent' is defined but never used.","line":9,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IBankAccountServiceLinks' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1481,1484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1481,1484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2107,2110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2107,2110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":57,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":57,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'filter' should be typed.","line":57,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":57,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":62,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":62,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'e' should be typed.","line":62,"column":19,"nodeType":"Identifier","messageId":"missingArgType","endLine":62,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":74,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":74,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":80,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":80,"endColumn":45},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'pages' should be typed.","line":80,"column":30,"nodeType":"Identifier","messageId":"missingArgType","endLine":80,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed with a non-any type.","line":80,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":80,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2882,2885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2882,2885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3003,3006],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3003,3006],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":115,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":115,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":129,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":129,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'currentSize' should be typed.","line":129,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":129,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'offset' should be typed.","line":129,"column":28,"nodeType":"Identifier","messageId":"missingArgType","endLine":129,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'limit' should be typed.","line":129,"column":36,"nodeType":"Identifier","messageId":"missingArgType","endLine":129,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4852,4855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4852,4855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5133,5136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5133,5136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":170,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":170,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'element' should be typed.","line":170,"column":16,"nodeType":"Identifier","messageId":"missingArgType","endLine":170,"endColumn":23}],"errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, OnInit, ViewChild, Renderer2 } from '@angular/core';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { IBankAccountServiceLinks } from '../../../../shared/model/revenueSource.model';\r\n\r\n@Component({\r\n  selector: 'app-realestate-bank-account-details',\r\n  templateUrl: './realestate-bank-account-details.component.html',\r\n  styleUrls: ['./realestate-bank-account-details.component.scss']\r\n})\r\nexport class RealEstateBankAccountDetailsComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  /** New changes */\r\n  @ViewChild('bankPaginator') paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  displayedServicesColumns: string[] = [\r\n    'bankAccountsDTO.description',\r\n    'bankAccountsDTO.bankName',\r\n    'bankAccountsDTO.accountNumber',\r\n    'bankAccountsDTO.glNumber'\r\n  ];\r\n  public bankAccounts = new MatTableDataSource<IBankAccountServiceLinks>([]);\r\n  public bankAccountsData: IBankAccountServiceLinks[];\r\n  public selectedRealEstate: any;\r\n  public displaySearchInput = false;\r\n  search = '';\r\n  pages = { page: '1', per_page: '100', id: '' };\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private renderer: Renderer2,\r\n    private authService: AuthenticateService,\r\n    private alertService: SweetAlertService,\r\n    private translate: TranslateService\r\n  ) {\r\n    this.userSessionService.selectedLanguage.subscribe((data) => {\r\n      this.translate.use(data);\r\n      this.translate.setDefaultLang(data);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.userSessionService.selectedRealEstateLocationIs.subscribe(\r\n      (location: any) => {\r\n        this.selectedRealEstate = location;\r\n      }\r\n    );\r\n    this.getBankAccountsForLocation(this.pages, this.selectedRealEstate.id);\r\n  }\r\n\r\n  applyFilter(filter) {\r\n    this.search = filter;\r\n    this.bankAccounts.filter = filter.trim().toLowerCase();\r\n  }\r\n\r\n  showSearchInput(e) {\r\n    this.displaySearchInput = true;\r\n    setTimeout(() => {\r\n      const elementReference = document.querySelector('#search');\r\n      if (elementReference instanceof HTMLElement) {\r\n        elementReference.focus();\r\n      }\r\n      // this.renderer?.selectRootElement('#search')?.focus();\r\n    });\r\n    e.stopPropagation();\r\n  }\r\n\r\n  onOutSideClick() {\r\n    if (!this.search) {\r\n      this.displaySearchInput = false;\r\n    }\r\n  }\r\n\r\n  getBankAccountsForLocation(pages, id: any) {\r\n    this.blockUI.start();\r\n    this.authService.getBankAccountDetailsfromapi(id, pages).subscribe(\r\n      (data: any) => {\r\n        this.bankAccountsData = data['body'];\r\n        this.bankAccountsData['length'] =\r\n          data?.headers?.get('X-Total-Count') | 0;\r\n        this.bankAccounts = new MatTableDataSource<IBankAccountServiceLinks>(\r\n          data['body']\r\n        );\r\n        this.bankAccounts.paginator = this.paginator;\r\n        this.bankAccounts.sort = this.sort;\r\n        this.bankAccounts.sortingDataAccessor = (item, property) => {\r\n          switch (property) {\r\n            case 'bankAccountsDTO.description':\r\n              return item.bankAccountsDTO.description;\r\n            case 'bankAccountsDTO.accountNumber':\r\n              return item.bankAccountsDTO.accountNumber;\r\n            case 'bankAccountsDTO.bankName':\r\n              return item.bankAccountsDTO.bankName;\r\n            case 'bankAccountsDTO.glNumber':\r\n              return item.bankAccountsDTO.glNumber;\r\n            default:\r\n              return item[property];\r\n          }\r\n        };\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  nextPageData(event: PageEvent) {\r\n    const pageIndex = event.pageIndex;\r\n    const pageSize = event.pageSize;\r\n    const previousIndex = event.previousPageIndex;\r\n    const previousSize = pageSize * pageIndex;\r\n    if (pageIndex !== previousIndex) {\r\n      this.getNextData(\r\n        previousSize,\r\n        (pageIndex + 1).toString(),\r\n        pageSize.toString()\r\n      );\r\n    }\r\n  }\r\n\r\n  getNextData(currentSize, offset, limit) {\r\n    this.blockUI.start('Loading....');\r\n    const pagesRange = this.pages;\r\n    pagesRange.page = offset;\r\n    pagesRange.per_page = limit;\r\n    this.authService\r\n      .getBankAccountDetailsfromapi(this.selectedRealEstate?.id, pagesRange)\r\n      .subscribe(\r\n        (data: any) => {\r\n          this.bankAccountsData['length'] = currentSize | 0;\r\n          this.bankAccountsData.push(...data['body']);\r\n          this.bankAccountsData['length'] =\r\n            data?.headers?.get('X-Total-Count') | 0;\r\n          this.bankAccounts = new MatTableDataSource<any>(\r\n            this.bankAccountsData\r\n          );\r\n          this.bankAccounts.paginator = this.paginator;\r\n          this.bankAccounts.sort = this.sort;\r\n          this.bankAccounts.sortingDataAccessor = (item, property) => {\r\n            switch (property) {\r\n              case 'bankAccountsDTO.description':\r\n                return item.bankAccountsDTO.description;\r\n              case 'bankAccountsDTO.accountNumber':\r\n                return item.bankAccountsDTO.accountNumber;\r\n              case 'bankAccountsDTO.bankName':\r\n                return item.bankAccountsDTO.bankName;\r\n              case 'bankAccountsDTO.glNumber':\r\n                return item.bankAccountsDTO.glNumber;\r\n              default:\r\n                return item[property];\r\n            }\r\n          };\r\n          this.blockUI.stop();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  returnString(element) {\r\n    const replaced =\r\n      element &&\r\n      element?.bankAccountsDTO &&\r\n      element?.bankAccountsDTO?.accountNumber\r\n        ? element?.bankAccountsDTO?.accountNumber.replace(/.(?=.{4,}$)/g, '*')\r\n        : '-----';\r\n    return replaced;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\realestate-revenue-types-details\\realestate-revenue-types-details.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'throwError' is defined but never used.","line":24,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":63,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":64,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is assigned a value but never used.","line":65,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'alertService' is assigned a value but never used.","line":66,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockData' is assigned a value but never used.","line":80,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockData1' is assigned a value but never used.","line":160,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":160,"endColumn":20},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function 'stopPropagation'.","line":211,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":211,"endColumn":32}],"errorCount":1,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { RealestateRevenueTypesDetailsComponent } from './realestate-revenue-types-details.component';\r\nimport {\r\n  HttpClientTestingModule,\r\n  HttpTestingController\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\nimport { RouterModule, Router } from '@angular/router';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators } from '@angular/forms';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { of } from 'rxjs/internal/observable/of';\r\nimport { throwError } from 'rxjs/internal/observable/throwError';\r\n\r\ndescribe('RealestateRevenueTypesDetailsComponent', () => {\r\n  let component: RealestateRevenueTypesDetailsComponent;\r\n  let fixture: ComponentFixture<RealestateRevenueTypesDetailsComponent>;\r\n  let apiService: ApiService;\r\n  let authenticateService: AuthenticateService;\r\n  let httpMock: HttpTestingController;\r\n  let router: Router;\r\n  let httpClient: HttpClient;\r\n  let alertService: SweetAlertService;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [RealestateRevenueTypesDetailsComponent],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpResponse,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    httpMock = TestBed.get(HttpTestingController);\r\n    httpClient = TestBed.get(HttpClient);\r\n    apiService = TestBed.get(ApiService);\r\n    alertService = TestBed.get(SweetAlertService);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(RealestateRevenueTypesDetailsComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call all revenues based on locationId', () => {\r\n    const mockData = [\r\n      {\r\n        id: 'bfc4deea-d1b8-4a80-8e4d-5c11de836427',\r\n        locationDTO: null,\r\n        revenueTypesDTO: {\r\n          id: '1a182090-e589-4ee7-aa8e-6085af31d0a6',\r\n          code: 'PA02',\r\n          description: 'Administrative Fee Income',\r\n          contraGlNumber: '625997',\r\n          glNumber: '625958',\r\n          oneGL: null,\r\n          ptlGLNumber: null,\r\n          revenueTypesLocationLinkDTO: [],\r\n          status: 'A',\r\n          uniqueIdentifier: 'RR326'\r\n        },\r\n        serviceDTO: null,\r\n        status: 'A'\r\n      }\r\n    ];\r\n    spyOn(component, 'getRevenueTypesForLocation').and.callThrough();\r\n    spyOn(authenticateService, 'getRevenueTypeDetailsFromApi').and.returnValue(\r\n      of({ message: 'success' })\r\n    );\r\n    const paginationPages = { page: '1', per_page: '500', id: '' };\r\n    fixture.detectChanges();\r\n    component.getRevenueTypesForLocation('858585', paginationPages);\r\n    paginationPages.id = '2525';\r\n    expect(authenticateService.getRevenueTypeDetailsFromApi).toHaveBeenCalled();\r\n    // authenticateService.getRevenueTypeDetailsFromApi(paginationPages).subscribe(\r\n    //   (data: HttpResponse<any>) => {\r\n    //     expect(data.body).toBe(mockData);\r\n    //   },\r\n    //   (err) => {\r\n    //     return err;\r\n    //   }\r\n    // );\r\n  });\r\n  // it('Error capture for getRevenueTypeDetailsFromApi', () => {\r\n  //   component.pages.page = '1';\r\n  //   component.pages.per_page = '500';\r\n  //   spyOn(alertService, 'showErrorInformation');\r\n  //   spyOn(authenticateService, 'getRevenueTypeDetailsFromApi').and.returnValue(\r\n  //     throwError({ status: 404 })\r\n  //   );\r\n  //   const pageIndex = 1;\r\n  //   const pageSize = 1;\r\n  //   fixture.detectChanges();\r\n  //   component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\r\n  //   expect(alertService.showErrorInformation).toHaveBeenCalled();\r\n  // });\r\n  it('should search table data', () => {\r\n    const searchString = 'test';\r\n    spyOn(component, 'applyFilter').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.applyFilter(searchString);\r\n  });\r\n\r\n  it('should onOutSideClick', () => {\r\n    spyOn(component, 'onOutSideClick').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.onOutSideClick();\r\n    expect(component.onOutSideClick).toHaveBeenCalled();\r\n  });\r\n  it('should call with string onOutSideClick', () => {\r\n    spyOn(component, 'onOutSideClick').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.search = 'test';\r\n    component.onOutSideClick();\r\n    expect(component.onOutSideClick).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should search table data', () => {\r\n    const searchString = 'test';\r\n    spyOn(component, 'applyFilter').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.applyFilter(searchString);\r\n  });\r\n\r\n  it('should search next page data', () => {\r\n    const mockData1 = [\r\n      {\r\n        id: 'bfc4deea-d1b8-4a80-8e4d-5c11de836427',\r\n        locationDTO: null,\r\n        revenueTypesDTO: {\r\n          id: '1a182090-e589-4ee7-aa8e-6085af31d0a6',\r\n          code: 'PA02',\r\n          description: 'Administrative Fee Income',\r\n          contraGlNumber: '625997',\r\n          glNumber: '625958',\r\n          oneGL: null,\r\n          ptlGLNumber: null,\r\n          revenueTypesLocationLinkDTO: [],\r\n          status: 'A',\r\n          uniqueIdentifier: 'RR326'\r\n        },\r\n        serviceDTO: null,\r\n        status: 'A'\r\n      }\r\n    ];\r\n    spyOn(component, 'nextPageData').and.callThrough();\r\n    spyOn(component, 'getNextData').and.callThrough();\r\n    spyOn(authenticateService, 'getRevenueTypeDetailsFromApi').and.returnValue(\r\n      of({ message: 'success' })\r\n    );\r\n    const paginationPages = { page: '1', per_page: '500', id: '' };\r\n    const pageIndex = 1;\r\n    const pageSize = 1;\r\n    fixture.detectChanges();\r\n    const object = {\r\n      pageIndex: 1,\r\n      pageSize: 2,\r\n      previousPageIndex: 2,\r\n      length: 2\r\n    };\r\n    component.nextPageData(object);\r\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\r\n    paginationPages.id = '2525';\r\n    expect(authenticateService.getRevenueTypeDetailsFromApi).toHaveBeenCalled();\r\n\r\n    // authenticateService.getRevenueTypeDetailsFromApi(paginationPages).subscribe(\r\n    //   (data: HttpResponse<any>) => {\r\n    //     expect(data.body).toBe(mockData1);\r\n    //   },\r\n    //   (err) => {\r\n    //     return err;\r\n    //   }\r\n    // );\r\n  });\r\n  it('should call showSearchInput', () => {\r\n    const event = {\r\n      stopPropagation: () => {}\r\n    };\r\n    spyOn(component, 'showSearchInput').and.callThrough();\r\n    const stopPropagationSpy = spyOn(event, 'stopPropagation');\r\n    component.displaySearchInput = true;\r\n    component.showSearchInput(event);\r\n    expect(component.showSearchInput).toHaveBeenCalled();\r\n    expect(stopPropagationSpy).toHaveBeenCalled();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\realestate-revenue-types-details\\realestate-revenue-types-details.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Renderer2' is defined but never used.","line":1,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateService' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":6,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatPaginator' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PageEvent' is defined but never used.","line":9,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1212,1215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1212,1215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1252,1255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1252,1255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1326,1329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1326,1329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1913,1916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1913,1916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":54,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'filter' should be typed.","line":54,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":54,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":59,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":59,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'e' should be typed.","line":59,"column":19,"nodeType":"Identifier","messageId":"missingArgType","endLine":59,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":67,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":73,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":73,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed with a non-any type.","line":73,"column":30,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":73,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2549,2552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2549,2552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'pagesRequest' should be typed with a non-any type.","line":73,"column":39,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":73,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2568,2571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2568,2571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2692,2695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2692,2695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2870,2873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2870,2873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":103,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":103,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":117,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":117,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'currentSize' should be typed.","line":117,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":117,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'offset' should be typed.","line":117,"column":28,"nodeType":"Identifier","messageId":"missingArgType","endLine":117,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'limit' should be typed.","line":117,"column":36,"nodeType":"Identifier","messageId":"missingArgType","endLine":117,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4306,4309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4306,4309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4543,4546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4543,4546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, OnInit, ViewChild, Renderer2 } from '@angular/core';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\n\r\n@Component({\r\n  selector: 'app-realestate-revenue-types-details',\r\n  templateUrl: './realestate-revenue-types-details.component.html',\r\n  styleUrls: ['./realestate-revenue-types-details.component.scss']\r\n})\r\nexport class RealestateRevenueTypesDetailsComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  @ViewChild('paginatorPos') paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  displayedRevenueColumns: string[] = [\r\n    'revenueTypesDTO.code',\r\n    'revenueTypesDTO.description',\r\n    'revenueTypesDTO.glNumber'\r\n  ];\r\n  public revenueTypes = new MatTableDataSource<any>([]);\r\n  public selectedRealEstate: any;\r\n  pages = { page: '1', per_page: '100', id: '' };\r\n  revenueDataIs: any[] = [];\r\n  public displaySearchInput = false;\r\n  public search = '';\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private authService: AuthenticateService,\r\n    private renderer: Renderer2,\r\n    private alertService: SweetAlertService,\r\n    private translate: TranslateService\r\n  ) {\r\n    this.userSessionService.selectedLanguage.subscribe((data) => {\r\n      this.translate.use(data);\r\n      this.translate.setDefaultLang(data);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.userSessionService.selectedRealEstateLocationIs.subscribe(\r\n      (location: any) => {\r\n        this.selectedRealEstate = location;\r\n        this.pages.id = location.id;\r\n      }\r\n    );\r\n    this.getRevenueTypesForLocation(this.selectedRealEstate.id, this.pages);\r\n  }\r\n\r\n  applyFilter(filter) {\r\n    this.search = filter;\r\n    this.revenueTypes.filter = filter.trim().toLowerCase();\r\n  }\r\n\r\n  showSearchInput(e) {\r\n    this.displaySearchInput = true;\r\n    setTimeout(() => {\r\n      this.renderer.selectRootElement('#search').focus();\r\n    });\r\n    e.stopPropagation();\r\n  }\r\n\r\n  onOutSideClick() {\r\n    if (!this.search) {\r\n      this.displaySearchInput = false;\r\n    }\r\n  }\r\n\r\n  getRevenueTypesForLocation(id: any, pagesRequest: any) {\r\n    this.blockUI.start();\r\n    this.authService.getRevenueTypeDetailsFromApi(pagesRequest).subscribe(\r\n      (data: any) => {\r\n        this.revenueDataIs = data?.body;\r\n        this.revenueDataIs.length = data?.headers?.get('X-Total-Count');\r\n        this.revenueTypes = new MatTableDataSource<any>(data?.body);\r\n        this.revenueTypes.paginator = this.paginator;\r\n        this.revenueTypes.sort = this.sort;\r\n        this.revenueTypes.sortingDataAccessor = (item, property) => {\r\n          switch (property) {\r\n            case 'revenueTypesDTO.glNumber':\r\n              return item.revenueTypesDTO.glNumber;\r\n            case 'revenueTypesDTO.description':\r\n              return item.revenueTypesDTO.description;\r\n            case 'revenueTypesDTO.code':\r\n              return item.revenueTypesDTO.code;\r\n            default:\r\n              return item[property];\r\n          }\r\n        };\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  nextPageData(event: PageEvent) {\r\n    const pageIndex = event.pageIndex;\r\n    const pageSize = event.pageSize;\r\n    const previousIndex = event.previousPageIndex;\r\n    const previousSize = pageSize * pageIndex;\r\n    if (previousIndex !== pageIndex) {\r\n      this.getNextData(\r\n        previousSize,\r\n        (pageIndex + 1).toString(),\r\n        pageSize.toString()\r\n      );\r\n    }\r\n  }\r\n\r\n  getNextData(currentSize, offset, limit) {\r\n    this.blockUI.start('Loading....');\r\n    const pagesRange = this.pages;\r\n    pagesRange.page = offset;\r\n    pagesRange.per_page = limit;\r\n    this.authService.getRevenueTypeDetailsFromApi(pagesRange).subscribe(\r\n      (data: any) => {\r\n        this.revenueDataIs.length = currentSize;\r\n        this.revenueDataIs.push(...data['body']);\r\n        this.revenueDataIs.length = data?.headers?.get('X-Total-Count');\r\n        this.revenueTypes = new MatTableDataSource<any>(this.revenueDataIs);\r\n        this.revenueTypes.paginator = this.paginator;\r\n        this.revenueTypes.sort = this.sort;\r\n        this.revenueTypes.sortingDataAccessor = (item, property) => {\r\n          switch (property) {\r\n            case 'revenueTypesDTO.glNumber':\r\n              return item.revenueTypesDTO.glNumber;\r\n            case 'revenueTypesDTO.description':\r\n              return item.revenueTypesDTO.description;\r\n            case 'revenueTypesDTO.code':\r\n              return item.revenueTypesDTO.code;\r\n            default:\r\n              return item[property];\r\n          }\r\n        };\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\realestate-tender-types-details\\realestate-tender-types-details.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":79,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":80,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":81,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is assigned a value but never used.","line":82,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3383,3386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3383,3386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4935,4938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4935,4938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { RealestateTenderTypesDetailsComponent } from './realestate-tender-types-details.component';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators } from '@angular/forms';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { of } from 'rxjs/internal/observable/of';\r\nimport { throwError } from 'rxjs/internal/observable/throwError';\r\n\r\ndescribe('RealestateTenderTypesDetailsComponent', () => {\r\n  let component: RealestateTenderTypesDetailsComponent;\r\n  let fixture: ComponentFixture<RealestateTenderTypesDetailsComponent>;\r\n  let apiService: ApiService;\r\n  let authenticateService: AuthenticateService;\r\n  let httpMock: HttpTestingController;\r\n  let router: Router;\r\n  let httpClient: HttpClient;\r\n  let alertService: SweetAlertService;\r\n  const mockResponse = [\r\n    {\r\n      id: '7b882798-da10-46c9-9ede-638c91df50d2',\r\n      locationDTO: null,\r\n      serviceDTO: null,\r\n      status: 'A',\r\n      tenderTypesDTO: {\r\n        code: 'ACH/Wire',\r\n        description: 'ACH/Wire',\r\n        glCode: '105479',\r\n        id: '6e7a306b-60d2-4e2b-bbcd-d5e1f2f7ea08',\r\n        isPCI: true,\r\n        status: 'A',\r\n        tenderTypesLnkDTO: [],\r\n        uniqueIdentifier: 'RT660'\r\n      }\r\n    }\r\n  ];\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        BrowserAnimationsModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [RealestateTenderTypesDetailsComponent],\r\n      providers: [\r\n        ApiService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpResponse,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    httpMock = TestBed.get(HttpTestingController);\r\n    router = TestBed.inject(Router);\r\n    httpClient = TestBed.get(HttpClient);\r\n    apiService = TestBed.get(ApiService);\r\n    alertService = TestBed.get(SweetAlertService);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(RealestateTenderTypesDetailsComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call all services method and return locations', () => {\r\n    const httpIs = new HttpResponse<any>({ body: [mockResponse] });\r\n    httpIs.headers.set('X-Total-Count', '6');\r\n    spyOn(component, 'getTenderTypesForLocation').and.callThrough();\r\n    spyOn(authenticateService, 'getTenderDetailsfromapi').and.returnValue(\r\n      of(httpIs)\r\n    );\r\n    const paginationPages = { page: '1', per_page: '500', id: '2525' };\r\n    fixture.detectChanges();\r\n    component.getTenderTypesForLocation(paginationPages);\r\n    // expect(authenticateService.getTenderDetailsfromapi).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should onOutSideClick', () => {\r\n    spyOn(component, 'onOutSideClick').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.onOutSideClick();\r\n    expect(component.onOutSideClick).toHaveBeenCalled();\r\n  });\r\n  it('should call with string onOutSideClick', () => {\r\n    spyOn(component, 'onOutSideClick').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.search = 'test';\r\n    component.onOutSideClick();\r\n    expect(component.onOutSideClick).toHaveBeenCalled();\r\n  });\r\n\r\n  // it('should search table data', () => {\r\n  //   const searchString = 'test';\r\n  //   spyOn(component, 'applyFilter').and.callThrough();\r\n  //   fixture.detectChanges();\r\n  //   component.applyFilter(searchString);\r\n  // });\r\n\r\n  it('should search table data', () => {\r\n    const searchString = 'test';\r\n    spyOn(component, 'applyFilter').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.applyFilter(searchString);\r\n  });\r\n\r\n  it('should call pagination next and return locations', () => {\r\n    const httpIs = new HttpResponse<any>({ body: [mockResponse] });\r\n    httpIs.headers.set('X-Total-Count', '6');\r\n    spyOn(component, 'nextPageData').and.callThrough();\r\n    spyOn(component, 'getNextData').and.callThrough();\r\n    spyOn(authenticateService, 'getTenderDetailsfromapi').and.returnValue(\r\n      of(httpIs)\r\n    );\r\n    const pageIndex = 1;\r\n    const pageSize = 1;\r\n    const object = {\r\n      pageIndex: 1,\r\n      pageSize: 2,\r\n      previousPageIndex: 2,\r\n      length: 2\r\n    };\r\n    component.nextPageData(object);\r\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\r\n    const paginationPages = { page: '1', per_page: '500', id: '2525' };\r\n    fixture.detectChanges();\r\n    component.getTenderTypesForLocation(paginationPages);\r\n  });\r\n\r\n  it('Error capture for getPreviousHistory', () => {\r\n    component.pages.page = '1';\r\n    component.pages.per_page = '500';\r\n    spyOn(alertService, 'showErrorInformation');\r\n    spyOn(authenticateService, 'getTenderDetailsfromapi').and.returnValue(\r\n      throwError({ status: 404 })\r\n    );\r\n    const pageIndex = 1;\r\n    const pageSize = 1;\r\n    fixture.detectChanges();\r\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\r\n    expect(alertService.showErrorInformation).toHaveBeenCalled();\r\n  });\r\n  it('should call showSearchInput', () => {\r\n    const event = {\r\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n      stopPropagation: () => {}\r\n    };\r\n    spyOn(component, 'showSearchInput').and.callThrough();\r\n    const stopPropagationSpy = spyOn(event, 'stopPropagation');\r\n    component.displaySearchInput = true;\r\n    component.showSearchInput(event);\r\n    expect(component.showSearchInput).toHaveBeenCalled();\r\n    expect(stopPropagationSpy).toHaveBeenCalled();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\locations\\realestate-tender-types-details\\realestate-tender-types-details.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Renderer2' is defined but never used.","line":1,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateService' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":6,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatPaginator' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PageEvent' is defined but never used.","line":9,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1204,1207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1204,1207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1244,1247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1244,1247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1320,1323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1320,1323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1900,1903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1900,1903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":54,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'filter' should be typed.","line":54,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":54,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":59,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":59,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'e' should be typed.","line":59,"column":19,"nodeType":"Identifier","messageId":"missingArgType","endLine":59,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":67,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":73,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":73,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'id' should be typed with a non-any type.","line":73,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":73,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":73,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":73,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2505,2508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2505,2508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2622,2625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2622,2625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2803,2806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2803,2806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":103,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":103,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":117,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":117,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'currentSize' should be typed.","line":117,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":117,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'offset' should be typed.","line":117,"column":28,"nodeType":"Identifier","messageId":"missingArgType","endLine":117,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'limit' should be typed.","line":117,"column":36,"nodeType":"Identifier","messageId":"missingArgType","endLine":117,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4235,4238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4235,4238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4477,4480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4477,4480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, OnInit, ViewChild, Renderer2 } from '@angular/core';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\n\r\n@Component({\r\n  selector: 'app-realestate-tender-types-details',\r\n  templateUrl: './realestate-tender-types-details.component.html',\r\n  styleUrls: ['./realestate-tender-types-details.component.scss']\r\n})\r\nexport class RealestateTenderTypesDetailsComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  @ViewChild('paginatorPos') paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  displayedRevenueColumns: string[] = [\r\n    'tenderTypesDTO.code',\r\n    'tenderTypesDTO.description',\r\n    'tenderTypesDTO.glNumber'\r\n  ];\r\n  public tenderTypes = new MatTableDataSource<any>([]);\r\n  public selectedRealEstate: any;\r\n  pages = { page: '1', per_page: '100', id: '' };\r\n  tenderTypesData: any[] = [];\r\n  public displaySearchInput = false;\r\n  search = '';\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private authService: AuthenticateService,\r\n    private renderer: Renderer2,\r\n    private alertService: SweetAlertService,\r\n    private translate: TranslateService\r\n  ) {\r\n    this.userSessionService.selectedLanguage.subscribe((data) => {\r\n      this.translate.use(data);\r\n      this.translate.setDefaultLang(data);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.userSessionService.selectedRealEstateLocationIs.subscribe(\r\n      (location: any) => {\r\n        this.selectedRealEstate = location;\r\n        this.pages.id = location.id;\r\n      }\r\n    );\r\n    this.getTenderTypesForLocation(this.pages);\r\n  }\r\n\r\n  applyFilter(filter) {\r\n    this.search = filter;\r\n    this.tenderTypes.filter = filter.trim().toLowerCase();\r\n  }\r\n\r\n  showSearchInput(e) {\r\n    this.displaySearchInput = true;\r\n    setTimeout(() => {\r\n      this.renderer.selectRootElement('#search').focus();\r\n    });\r\n    e.stopPropagation();\r\n  }\r\n\r\n  onOutSideClick() {\r\n    if (!this.search) {\r\n      this.displaySearchInput = false;\r\n    }\r\n  }\r\n\r\n  getTenderTypesForLocation(id: any) {\r\n    this.blockUI.start();\r\n    this.authService.getTenderDetailsfromapi(this.pages).subscribe(\r\n      (data: any) => {\r\n        this.tenderTypesData = data?.body;\r\n        this.tenderTypesData.length = data?.headers?.get('X-Total-Count');\r\n        this.tenderTypes = new MatTableDataSource<any>(this.tenderTypesData);\r\n        this.tenderTypes.paginator = this.paginator;\r\n        this.tenderTypes.sort = this.sort;\r\n        this.tenderTypes.sortingDataAccessor = (item, property) => {\r\n          switch (property) {\r\n            case 'tenderTypesDTO.description':\r\n              return item.tenderTypesDTO.description;\r\n            case 'tenderTypesDTO.code':\r\n              return item.tenderTypesDTO.code;\r\n            case 'tenderTypesDTO.glNumber':\r\n              return item.tenderTypesDTO.glNumber;\r\n            default:\r\n              return item[property];\r\n          }\r\n        };\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  nextPageData(event: PageEvent) {\r\n    const pageIndex = event.pageIndex;\r\n    const pageSize = event.pageSize;\r\n    const previousIndex = event.previousPageIndex;\r\n    const previousSize = pageSize * pageIndex;\r\n    if (pageIndex !== previousIndex) {\r\n      this.getNextData(\r\n        previousSize,\r\n        (pageIndex + 1).toString(),\r\n        pageSize.toString()\r\n      );\r\n    }\r\n  }\r\n\r\n  getNextData(currentSize, offset, limit) {\r\n    this.blockUI.start('Loading....');\r\n    const pagesRange = this.pages;\r\n    pagesRange.page = offset;\r\n    pagesRange.per_page = limit;\r\n    this.authService.getTenderDetailsfromapi(pagesRange).subscribe(\r\n      (data: any) => {\r\n        this.tenderTypesData.length = currentSize;\r\n        this.tenderTypesData.push(...data['body']);\r\n        this.tenderTypesData.length = data?.headers?.get('X-Total-Count');\r\n        this.tenderTypes = new MatTableDataSource<any>(this.tenderTypesData);\r\n        this.tenderTypes.paginator = this.paginator;\r\n        this.tenderTypes.sort = this.sort;\r\n        this.tenderTypes.sortingDataAccessor = (item, property) => {\r\n          switch (property) {\r\n            case 'tenderTypesDTO.glNumber':\r\n              return item.revenueTypesDTO.glNumber;\r\n            case 'tenderTypesDTO.description':\r\n              return item.revenueTypesDTO.description;\r\n            case 'tenderTypesDTO.code':\r\n              return item.revenueTypesDTO.code;\r\n            default:\r\n              return item[property];\r\n          }\r\n        };\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\lock-unlock\\lock-unlock.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":6,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DebugElement' is defined but never used.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is defined but never used.","line":36,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is defined but never used.","line":39,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userSessionService' is defined but never used.","line":42,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dialog' is defined but never used.","line":43,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":76,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":77,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":79,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":13}],"errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  LockUnlockComponent,\r\n  LockUnlockCalender,\r\n  MonthFormat\r\n} from './lock-unlock.component';\r\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators } from '@angular/forms';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { DebugElement } from '@angular/core';\r\nimport { of } from 'rxjs/internal/observable/of';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\n\r\ndescribe('LockUnlockComponent', () => {\r\n  let component: LockUnlockComponent;\r\n  let fixture: ComponentFixture<LockUnlockComponent>;\r\n  let apiService: ApiService;\r\n  let authenticateService: AuthenticateService;\r\n  let httpMock: HttpTestingController;\r\n  let de: DebugElement;\r\n  let router: Router;\r\n  let httpClient: HttpClient;\r\n  let userSessionService: UserSessionService;\r\n  let dialog: MatDialog;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        RouterTestingModule.withRoutes([\r\n          { path: 'lockUnlock', component: LockUnlockComponent }\r\n        ]),\r\n        RouterTestingModule,\r\n        BrowserAnimationsModule,\r\n        MatDialogModule,\r\n        MatDatepickerModule,\r\n        MatNativeDateModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [LockUnlockComponent, LockUnlockCalender, MonthFormat],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        UserSessionService,\r\n        HttpClient,\r\n        HttpResponse,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    httpClient = TestBed.get(HttpClient);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    httpMock = TestBed.get(HttpTestingController);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(LockUnlockComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should openMonth', () => {\r\n    // expect(component).toBeTruthy();\r\n    spyOn(component, 'openMonth').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.openMonth();\r\n    expect(component.openMonth).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call saveLockUnlock along with service call', () => {\r\n    const mockResponse = {\r\n      id: 'fba50b2b-9022-44f0-ab5d-e550988d04ae',\r\n      month: 1,\r\n      year: 2021,\r\n      lock: false\r\n    };\r\n    component.lockUnlockForm.patchValue({\r\n      month: '2021-03-12T05:45:03.864',\r\n      checkUncheck: 'false'\r\n    });\r\n    spyOn(component, 'saveLockUnlock').and.callThrough();\r\n    spyOn(authenticateService, 'lockUnlockLocation').and.returnValue(\r\n      of(mockResponse)\r\n    );\r\n    fixture.detectChanges();\r\n    component.saveLockUnlock();\r\n    expect(component.saveLockUnlock).toHaveBeenCalled();\r\n    expect(authenticateService.lockUnlockLocation).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call monthSelected', () => {\r\n    spyOn(component, 'monthSelected').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.monthSelected(new Date());\r\n    component.month.close();\r\n    expect(component.monthSelected).toHaveBeenCalled();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\lock-unlock\\lock-unlock.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnDestroy' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChangeDetectorRef' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LockUnlock' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":15,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateService' is defined but never used.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":18,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDialog' is defined but never used.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatCalendar' is defined but never used.","line":24,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DateAdapter' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDateFormats' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1731,1734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1731,1734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1805,1808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1805,1808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":74,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":74,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed.","line":74,"column":17,"nodeType":"Identifier","messageId":"missingArgType","endLine":74,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":79,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":79,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":121,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":121,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":125,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":125,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":194,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":194,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":201,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":201,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":206,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":206,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":220,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":220,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":238,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":238,"endColumn":16}],"errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Inject,\r\n  ViewChild,\r\n  Directive\r\n} from '@angular/core';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { Router } from '@angular/router';\r\nimport { LockUnlock } from '../../../shared/model/lockunlock.model';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { MATERIAL_MONTH_FORMATS } from 'src/app/shared/constants/app-constants';\r\nimport { customModalData } from 'src/app/shared/model/applicationModel';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { DialogDataExampleDialog } from '../../../shared/common-components/custom-model/custom-dialog';\r\nimport { Subject } from 'rxjs/Rx';\r\nimport { MatDatepicker, MatCalendar } from '@angular/material/datepicker';\r\n\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_FORMATS,\r\n  MatDateFormats\r\n} from '@angular/material/core';\r\nimport { takeUntil, take } from 'rxjs/operators';\r\nimport * as _moment from 'moment';\r\nimport * as _rollupMoment from 'moment';\r\n\r\nconst moment = _rollupMoment || _moment;\r\n\r\n@Component({\r\n  selector: 'app-lock-unlock',\r\n  templateUrl: './lock-unlock.component.html',\r\n  styleUrls: ['./lock-unlock.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LockUnlockComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  lockUnlockForm: FormGroup;\r\n  subscription: any;\r\n  maxDate = new Date();\r\n  @ViewChild('month') month: MatDatepicker<any>;\r\n  @ViewChild(MatDatepicker) year;\r\n  ngUnsubscribe = new Subject<void>();\r\n  lockUnlockCalender = LockUnlockCalender;\r\n  calenderView = 'year';\r\n  constructor(\r\n    private authService: AuthenticateService,\r\n    private alertService: SweetAlertService,\r\n    private router: Router,\r\n    private translate: TranslateService,\r\n    private userSessionService: UserSessionService,\r\n    public dialog: MatDialog\r\n  ) {\r\n    this.userSessionService.selectedLanguage.subscribe((data) => {\r\n      this.translate.use(data);\r\n      this.translate.setDefaultLang(data);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.lockUnlockForm = new FormGroup({\r\n      checkUncheck: new FormControl('', Validators.required),\r\n      month: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  monthSelected(event) {\r\n    this.lockUnlockForm.controls.month.setValue(event);\r\n    this.month.close();\r\n  }\r\n\r\n  saveLockUnlock() {\r\n    const lockunlockService: LockUnlock = {\r\n      month: Number(moment(this.lockUnlockForm.value.month).format('MM')),\r\n      year: Number(moment(this.lockUnlockForm.value.month).format('YYYY')),\r\n      lock: this.lockUnlockForm.value.checkUncheck\r\n    };\r\n    this.blockUI.start('Loading....');\r\n    this.authService\r\n      .lockUnlockLocation(lockunlockService)\r\n      .pipe(take(1))\r\n      .subscribe(\r\n        () => {\r\n          const popUpData = new customModalData();\r\n          if (this.lockUnlockForm.value.checkUncheck == 'true') {\r\n            popUpData.title = 'Locked';\r\n            popUpData.icon = 'success';\r\n            popUpData.text = `Revenues for ${moment(\r\n              this.lockUnlockForm.value.month\r\n            ).format('MMMM')} ${lockunlockService.year} are Locked`;\r\n            popUpData.imagePath =\r\n              'assets/images/popup_images/success_popup.png';\r\n          } else {\r\n            popUpData.icon = 'success';\r\n            popUpData.title = 'Unlocked';\r\n            popUpData.text = `Revenues for ${moment(\r\n              this.lockUnlockForm.value.month\r\n            ).format('MMMM')} ${lockunlockService.year} are Unlocked`;\r\n            popUpData.imagePath =\r\n              'assets/images/popup_images/success_popup.png';\r\n          }\r\n          this.dialog.open(DialogDataExampleDialog, {\r\n            data: popUpData\r\n          });\r\n          this.blockUI.stop();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  openMonth() {\r\n    this.year.open();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.ngUnsubscribe.next();\r\n    this.ngUnsubscribe.complete();\r\n    // this.subscription.unsubscribe();\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[monthFormat]',\r\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: MATERIAL_MONTH_FORMATS }]\r\n})\r\nexport class MonthFormat {}\r\n@Component({\r\n  selector: 'lock-unlock-calender',\r\n  styles: [\r\n    `\r\n      .lock-unlock-calender {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 0.5em;\r\n      }\r\n\r\n      .lock-unlock-calender-label {\r\n        flex: 1;\r\n        height: 1em;\r\n        font-weight: 500;\r\n        text-align: center;\r\n      }\r\n\r\n      .example-double-arrow .mat-icon {\r\n        margin: -22%;\r\n      }\r\n    `\r\n  ],\r\n  template: `\r\n    <div class=\"lock-unlock-calender\">\r\n      <button mat-icon-button (click)=\"previousClicked()\">\r\n        <mat-icon>keyboard_arrow_left</mat-icon>\r\n      </button>\r\n      <span\r\n        role=\"button\"\r\n        (click)=\"openMultiYear()\"\r\n        class=\"lock-unlock-calender-label cursor-pointer\"\r\n        >{{ periodLabel }}</span\r\n      >\r\n\r\n      <button mat-icon-button (click)=\"nextClicked()\">\r\n        <mat-icon>keyboard_arrow_right</mat-icon>\r\n      </button>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LockUnlockCalender<D> implements OnDestroy {\r\n  private _destroyed = new Subject<void>();\r\n\r\n  constructor(\r\n    private _datePicker: MatDatepicker<D>,\r\n    private _calendar: MatCalendar<D>,\r\n    private _dateAdapter: DateAdapter<D>,\r\n    private userSessionService: UserSessionService,\r\n    @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n    cdr: ChangeDetectorRef\r\n  ) {\r\n    _calendar.stateChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => cdr.markForCheck());\r\n  }\r\n\r\n  public todayClicked() {\r\n    this._calendar.activeDate = this._dateAdapter.today();\r\n    //  this._calendar._dateSelected(this._calendar.activeDate);\r\n    this._datePicker.select(this._dateAdapter.today());\r\n    this._datePicker.close();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  get periodLabel() {\r\n    return this._dateAdapter\r\n      .format(\r\n        this._calendar.activeDate,\r\n        this._dateFormats.display.monthYearA11yLabel\r\n      )\r\n      .toLocaleUpperCase();\r\n  }\r\n\r\n  public openMultiYear(): void {\r\n    this._calendar.currentView =\r\n      this._calendar.currentView == 'year' ? 'multi-year' : 'year';\r\n  }\r\n\r\n  previousClicked() {\r\n    // let mode = 'year';\r\n    // if (this._calendar.currentView === 'multi-year') {\r\n    //   mode = 'year';\r\n    // }\r\n    this._calendar.activeDate = this._dateAdapter.addCalendarYears(\r\n      this._calendar.activeDate,\r\n      -1\r\n    );\r\n    // mode === 'year'\r\n    //   ? this._dateAdapter.addCalendarYears(this._calendar.activeDate, -1)\r\n    //   : this._dateAdapter.addCalendarYears(this._calendar.activeDate, -1);\r\n    // this._calendar.activeDate =\r\n    //   mode === 'month'\r\n    //     ? this._dateAdapter.addCalendarMonths(this._calendar.activeDate, -1)\r\n    //     : this._dateAdapter.addCalendarYears(this._calendar.activeDate, -1);\r\n  }\r\n\r\n  nextClicked() {\r\n    // let mode = 'year';\r\n    // if (this._calendar.currentView === 'multi-year') {\r\n    //   mode = 'year';\r\n    // }\r\n    this._calendar.activeDate = this._dateAdapter.addCalendarYears(\r\n      this._calendar.activeDate,\r\n      1\r\n    );\r\n    // mode === 'year'\r\n    //   ? this._dateAdapter.addCalendarYears(this._calendar.activeDate, 1)\r\n    //   : this._dateAdapter.addCalendarYears(this._calendar.activeDate, 1);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\lock-unlock\\lock-unlock.module.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\main-layout-routing.module.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Routes' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { AddrevenueComponent } from './revenue-sources/addrevenue.component';\r\nimport { AddrevisionComponent } from './revision-sources/addrevision.component';\r\nimport { LocationsComponent } from './locations/locations.component';\r\n// import { UsersComponent } from './users/users-list/users.component';\r\nimport { LockUnlockComponent } from './lock-unlock/lock-unlock.component';\r\n// import { AddUserComponent } from './users/add-user/add-user.component';\r\nimport { PayrollRevisionComponent } from './payroll-revision/payroll-revision.component';\r\nimport { RealEstateBankAccountDetailsComponent } from '../main-layout/locations/realestate-bank-account-details/realestate-bank-account-details.component';\r\nimport { RealestateRevenueTypesDetailsComponent } from '../main-layout/locations/realestate-revenue-types-details/realestate-revenue-types-details.component';\r\nimport { RealestateTenderTypesDetailsComponent } from '../main-layout/locations/realestate-tender-types-details/realestate-tender-types-details.component';\r\nimport { OperationalUsersComponent } from '../main-layout/locations/operational-users/operational-users.component';\r\nimport {\r\n  RevenueSourceAuthGuard,\r\n  RealEstateAuthGuard,\r\n  AdminTrainigAuthGuard\r\n} from 'src/app/shared/guards/auth.guard';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'dashboard',\r\n    pathMatch: 'full',\r\n    canActivate: [RevenueSourceAuthGuard]\r\n  },\r\n  {\r\n    path: 'dashboard',\r\n    component: DashboardComponent,\r\n    canActivate: [RevenueSourceAuthGuard]\r\n  },\r\n  {\r\n    path: 'addrevenue',\r\n    component: AddrevenueComponent,\r\n    canActivate: [RevenueSourceAuthGuard]\r\n  },\r\n  {\r\n    path: 'addrevision',\r\n    component: AddrevisionComponent,\r\n    canActivate: [RevenueSourceAuthGuard]\r\n  },\r\n  {\r\n    path: 'real-estate',\r\n    canActivate: [RealEstateAuthGuard],\r\n    children: [\r\n      {\r\n        path: 'locations',\r\n        component: LocationsComponent,\r\n        canActivate: [RealEstateAuthGuard]\r\n      },\r\n      {\r\n        path: 'location/bank-details',\r\n        component: RealEstateBankAccountDetailsComponent\r\n      },\r\n      {\r\n        path: 'location/revenue-details',\r\n        component: RealestateRevenueTypesDetailsComponent,\r\n        canActivate: [RealEstateAuthGuard]\r\n      },\r\n      {\r\n        path: 'location/tender-details',\r\n        component: RealestateTenderTypesDetailsComponent,\r\n        canActivate: [RealEstateAuthGuard]\r\n      },\r\n      {\r\n        path: 'location/user-details',\r\n        component: OperationalUsersComponent,\r\n        canActivate: [RealEstateAuthGuard]\r\n      }\r\n    ]\r\n  },\r\n  // {\r\n  //   path: 'users',\r\n  //   component: UsersComponent,\r\n  //   canActivate:[AdminTrainigAuthGuard]\r\n\r\n  // },\r\n  {\r\n    path: 'lockUnlock',\r\n    component: LockUnlockComponent,\r\n    canActivate: [AdminTrainigAuthGuard]\r\n  },\r\n  {\r\n    path: 'revisions',\r\n    component: PayrollRevisionComponent,\r\n    canActivate: [AdminTrainigAuthGuard]\r\n  }\r\n  // {\r\n  //   path: 'adduser',\r\n  //   component: AddUserComponent,\r\n  //   canActivate: [AdminTrainigAuthGuard]\r\n  // }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class MainLayoutRoutingModule {}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\main-layout.module.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\payroll-revision\\payroll-revision.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BankAccountsDTO' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRevenueDTO' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LocationDTO' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RevenueTypesDTO' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SourceDTO' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TenderTypesDTO' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserDTO' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRealEstateServicesIds' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRevisionDTO' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'moment' is defined but never used.","line":36,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentLayoutComponent' is defined but never used.","line":38,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CommentStmt' is defined but never used.","line":39,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'REVISION_STATUS' is defined but never used.","line":41,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":82,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":84,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":84,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is assigned a value but never used.","line":85,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":85,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'spy' is assigned a value but never used.","line":125,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formGroup' is assigned a value but never used.","line":167,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":167,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'brandType' is assigned a value but never used.","line":216,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":216,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used.","line":391,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":391,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'spy' is assigned a value but never used.","line":425,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":425,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'spy' is assigned a value but never used.","line":443,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":443,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'spy' is assigned a value but never used.","line":461,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":461,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'spy' is assigned a value but never used.","line":478,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":478,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'spy' is assigned a value but never used.","line":498,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":498,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'paginationPages' is assigned a value but never used.","line":573,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":573,"endColumn":26}],"errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {\r\n  BankAccountsDTO,\r\n  IRevenueDTO,\r\n  LocationDTO,\r\n  Locations,\r\n  RevenueTypesDTO,\r\n  SourceDTO,\r\n  TenderTypesDTO,\r\n  UserDTO,\r\n  IRealEstateServicesIds,\r\n  ServiceCodesDTO,\r\n  IRevisionDTO\r\n} from 'src/app/shared/model/revenueSource.model';\r\nimport { PayrollRevisionComponent } from './payroll-revision.component';\r\nimport * as moment from 'moment';\r\nimport { of } from 'rxjs/internal/observable/of';\r\nimport { ComponentLayoutComponent } from '../component-layout/component-layout.component';\r\nimport { CommentStmt } from '@angular/compiler';\r\nimport { throwError } from 'rxjs';\r\nimport { REVISION_STATUS } from 'src/app/shared/constants/app-constants';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\ndescribe('PayrollRevisionComponent', () => {\r\n  let component: PayrollRevisionComponent;\r\n  let fixture: ComponentFixture<PayrollRevisionComponent>;\r\n  let router: Router;\r\n  let apiService: ApiService;\r\n  let authenticateService: AuthenticateService;\r\n  let userSessionService: UserSessionService;\r\n  let httpMock: HttpTestingController;\r\n  let httpClient: HttpClient;\r\n  let alertService: SweetAlertService;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [PayrollRevisionComponent],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    userSessionService = TestBed.get(UserSessionService);\r\n    httpMock = TestBed.get(HttpTestingController);\r\n    router = TestBed.inject(Router);\r\n    httpClient = TestBed.get(HttpClient);\r\n    apiService = TestBed.get(ApiService);\r\n    alertService = TestBed.get(SweetAlertService);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(PayrollRevisionComponent);\r\n    component = fixture.componentInstance;\r\n  });\r\n\r\n  it('should create', () => {\r\n    fixture.detectChanges();\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should clear the search filters to intial', () => {\r\n    spyOn(component, 'resetRequestRevisionObj').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.resetRequestRevisionObj();\r\n    component.requestRevisionObj = {\r\n      page: '1',\r\n      per_page: '500',\r\n      filterDTO: [],\r\n      sort: []\r\n    };\r\n    expect(component.resetRequestRevisionObj).toHaveBeenCalled();\r\n  });\r\n\r\n  // it('should return Due to location Data', () => {\r\n  //   spyOn(component, 'filterTableData').and.callThrough();\r\n  //   component.tableData.filterPredicate;\r\n  // });\r\n\r\n  it('should filterTableData', () => {\r\n    spyOn(component, 'filterTableData').and.callThrough();\r\n    component.filterTableData();\r\n    expect(component.filterTableData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should go to add payroll revision section', () => {\r\n    spyOn(component, 'addRevision').and.callThrough();\r\n    const spy = spyOn(router, 'navigate');\r\n    spyOn(\r\n      userSessionService,\r\n      'setSelectedRevenueForCorrection'\r\n    ).and.callThrough();\r\n    component.isPayroll = true;\r\n    component.isExpense = false;\r\n    component.isRevenue = false;\r\n    component.addRevision();\r\n    expect(component.addRevision).toHaveBeenCalled();\r\n    expect(\r\n      userSessionService.setSelectedRevenueForCorrection\r\n    ).toHaveBeenCalled();\r\n    // expect(spy).toHaveBeenCalledWith(['/app/addrevision'], {\r\n    //   queryParams: { revisionType: 'Payroll' }\r\n    // });\r\n  });\r\n\r\n  it('should searchRevisions', () => {\r\n    spyOn(component, 'searchRevisions').and.callThrough();\r\n    spyOn(component, 'resetRequestRevisionObj').and.callThrough();\r\n    spyOn(component, 'filterDTOObjCreation').and.callThrough();\r\n    spyOn(component, 'getLoadRevisionsInitData').and.callThrough();\r\n\r\n    const serviceId = {\r\n      applicableForDarma: true,\r\n      brandCode: 'CLH (PK1)',\r\n      closeDate: null,\r\n      companyId: 'PK001',\r\n      contractType: 'MANAGED',\r\n      id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n      openDate: null,\r\n      realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n      realEstateName: 'Bank of America Tower',\r\n      realEstateNumber: 'US-FL-RE-1003115',\r\n      serviceGroupName: 'Parking',\r\n      serviceId: 'PA-1000428',\r\n      serviceIdName: 'Bank of America Tower Parking',\r\n      serviceNameWithID:\r\n        'PA-1000428 - Bank of America Tower Parking(US-FL-RE-1003115)',\r\n      serviceType: 'Parking'\r\n    };\r\n    const formGroup = new FormGroup({\r\n      revisionLocation: new FormControl([new Locations()]),\r\n      revisionServiceId: new FormControl([serviceId]),\r\n      revisionServiceCode: new FormControl([new ServiceCodesDTO()]),\r\n      revisionFromDate: new FormControl('2021-03-12T05:45:03.864'),\r\n      revisionToDate: new FormControl('2021-03-18T05:45:03.864')\r\n    });\r\n    // };\r\n    component.totalRevisions = [];\r\n    component.tableData.data = [];\r\n    component.resetRequestRevisionObj();\r\n    component.filterDTOObjCreation();\r\n    component.getLoadRevisionsInitData(component.requestRevisionObj, false);\r\n    component.requestRevisionObj.page = '1';\r\n    component.requestRevisionObj.per_page = '500';\r\n    // component.searchRevisions(formGroup);\r\n    expect(component.resetRequestRevisionObj).toHaveBeenCalled();\r\n    expect(component.filterDTOObjCreation).toHaveBeenCalled();\r\n    expect(component.getLoadRevisionsInitData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should search table data', () => {\r\n    const searchString = 'test';\r\n    spyOn(component, 'applyFilter').and.callThrough();\r\n    component.applyFilter(searchString);\r\n  });\r\n\r\n  it('should onOutSideClick', () => {\r\n    spyOn(component, 'onOutSideClick').and.callThrough();\r\n    component.onOutSideClick();\r\n    expect(component.onOutSideClick).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should filterTableData', () => {\r\n    spyOn(component, 'filterTableData').and.callThrough();\r\n    component.filterTableData();\r\n    expect(component.filterTableData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call sortingData', () => {\r\n    spyOn(component, 'sortingData').and.callThrough();\r\n    component.sortingData();\r\n    expect(component.sortingData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should get locations on load', () => {\r\n    const locationObj = [new Locations()];\r\n    spyOn(component, 'getLoadInitLocations').and.callThrough();\r\n    spyOn(authenticateService, 'getLocations').and.returnValue(of(locationObj));\r\n    const brandType = {\r\n      id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n      code: 'All'\r\n    };\r\n    component.getLoadInitLocations();\r\n    expect(component.getLoadInitLocations).toHaveBeenCalled();\r\n    expect(authenticateService.getLocations).toHaveBeenCalled();\r\n    expect(component.locations).toEqual(locationObj);\r\n  });\r\n\r\n  //   /** Role check Flag */\r\n  it('Should call roleCheck', () => {\r\n    spyOn(component, 'roleCheck').and.callThrough();\r\n    // fixture.detectChanges();\r\n    component.role = 'ROLE_DARMA_ADMIN';\r\n    component.roleCheck();\r\n    expect(component.roleCheck).toHaveBeenCalled();\r\n  });\r\n\r\n  //returnLogoImg\r\n  it('should call returnLogoImg', () => {\r\n    spyOn(component, 'returnLogoImg').and.callThrough();\r\n    const brandCode = 'test';\r\n    component.returnLogoImg(brandCode);\r\n\r\n    expect(component.returnLogoImg).toHaveBeenCalled();\r\n  });\r\n\r\n  // filterRevision\r\n  it('should call filterRevision', () => {\r\n    const mockEvent = {\r\n      source: {},\r\n      value: 'Approved'\r\n    };\r\n\r\n    const mockObj: IRevisionDTO[] = [\r\n      {\r\n        id: '79292535-bdbe-4387-8654-0627a05b66f8',\r\n        amount: 45.5,\r\n        billable: 'B',\r\n        service: null,\r\n        serviceCodes: {\r\n          id: 'bf231d81-e67d-495d-97ea-8f9c4329b4f3',\r\n          serviceIdType: 'Parking',\r\n          serviceCode: 'PA04',\r\n          serviceCodeDescription: 'Event'\r\n        },\r\n        jobCodes: {\r\n          id: 'bf286c46-6970-4c63-8c15-480116690b08',\r\n          jobCode: 'VALET',\r\n          directCost: true,\r\n          indirectCost: false,\r\n          sGandA: false,\r\n          serviceCode: 'PA04'\r\n        },\r\n        glCodeDetails: {\r\n          id: '7e8fb3c7-00c5-44ee-a2f3-881e44b1f3fd',\r\n          glCodes: '700525',\r\n          glCodesDescription: 'Wages - Training'\r\n        },\r\n        location: null,\r\n        payDate: '2021-03-16T05:03:00.000',\r\n        payRevisionIdentifier: 'PR-REEF-2bfd49-210316170347',\r\n        payRevisionStatus: 'P',\r\n        approvedBy: null,\r\n        approvedOn: null,\r\n        reasonForRequest: 'test',\r\n        transactionType: 'C',\r\n        close: true,\r\n        brand: null,\r\n        tenderTypes: null,\r\n        revisionType: 'ER',\r\n        status: 'A'\r\n      }\r\n    ];\r\n\r\n    spyOn(component, 'filterRevision').and.callThrough();\r\n    component.filterRevision(mockEvent);\r\n    const filteredData =\r\n      mockObj && mockObj.filter((t) => t.payRevisionStatus === mockEvent.value);\r\n    component.totalRevisions = filteredData as IRevisionDTO[];\r\n    fixture.detectChanges();\r\n    component.tableData = new MatTableDataSource<IRevisionDTO>(mockObj);\r\n    expect(component.filterRevision).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call filterRevision when selected value is \"ALL\" ', () => {\r\n    const mockEvent = {\r\n      source: {},\r\n      value: 'All'\r\n    };\r\n\r\n    const mockObj: IRevisionDTO[] = [\r\n      {\r\n        id: '79292535-bdbe-4387-8654-0627a05b66f8',\r\n        amount: 45.5,\r\n        billable: 'B',\r\n        service: null,\r\n        serviceCodes: {\r\n          id: 'bf231d81-e67d-495d-97ea-8f9c4329b4f3',\r\n          serviceIdType: 'Parking',\r\n          serviceCode: 'PA04',\r\n          serviceCodeDescription: 'Event'\r\n        },\r\n        jobCodes: {\r\n          id: 'bf286c46-6970-4c63-8c15-480116690b08',\r\n          jobCode: 'VALET',\r\n          directCost: true,\r\n          indirectCost: false,\r\n          sGandA: false,\r\n          serviceCode: 'PA04'\r\n        },\r\n        glCodeDetails: {\r\n          id: '7e8fb3c7-00c5-44ee-a2f3-881e44b1f3fd',\r\n          glCodes: '700525',\r\n          glCodesDescription: 'Wages - Training'\r\n        },\r\n        location: null,\r\n        payDate: '2021-03-16T05:03:00.000',\r\n        payRevisionIdentifier: 'PR-REEF-2bfd49-210316170347',\r\n        payRevisionStatus: 'P',\r\n        approvedBy: null,\r\n        approvedOn: null,\r\n        reasonForRequest: 'test',\r\n        transactionType: 'C',\r\n        close: false,\r\n        brand: null,\r\n        tenderTypes: null,\r\n        revisionType: 'ER',\r\n        status: 'A'\r\n      }\r\n    ];\r\n    spyOn(component, 'filterRevision').and.callThrough();\r\n    component.filterRevision(mockEvent);\r\n    component.totalRevisions = mockObj;\r\n    fixture.detectChanges();\r\n    component.tableData = new MatTableDataSource<IRevisionDTO>(mockObj);\r\n    expect(component.filterRevision).toHaveBeenCalled();\r\n  });\r\n\r\n  // showSearchInput\r\n  it('Should call showSearchInput', () => {\r\n    let onmouseup: MouseEvent;\r\n    spyOn(component, 'showSearchInput').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.displaySearchInput = true;\r\n    component.showSearchInput(onmouseup);\r\n    expect(component.showSearchInput).toHaveBeenCalled();\r\n  });\r\n\r\n  //nestedFilterCheck\r\n  // it('should call nestedFilterCheck', () => {\r\n  //   const search = 'test';\r\n  //   const data = [];\r\n  //   let key;\r\n  //   spyOn(component, 'nestedFilterCheck').and.returnValue(of(search));\r\n  //   data[key] = Object;\r\n  //   component.nestedFilterCheck(search, data, key);\r\n  //   expect(component.nestedFilterCheck).toHaveBeenCalled();\r\n  // });\r\n\r\n  it('should get all revisions by type', () => {\r\n    const mockObj = {\r\n      page: 1,\r\n      revisionType: 'PR',\r\n      pages: 500\r\n    };\r\n\r\n    let mockData: IRevisionDTO[];\r\n    spyOn(component, 'getRevisionsInitData').and.callThrough();\r\n    spyOn(authenticateService, 'getAllPayrevision').and.returnValue(\r\n      of(mockObj)\r\n    );\r\n    const spy = spyOn(component, 'displayTableData').and.callThrough();\r\n    component.getRevisionsInitData();\r\n    authenticateService.getAllPayrevision(mockObj).subscribe((res) => {\r\n      const filteredData =\r\n        mockData && mockData.filter((element) => element.status !== 'X');\r\n      component.displayTableData(filteredData);\r\n    });\r\n\r\n    fixture.detectChanges();\r\n    expect(component.getRevisionsInitData).toHaveBeenCalled();\r\n    expect(authenticateService.getAllPayrevision).toHaveBeenCalledWith(mockObj);\r\n    expect(spy).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should set ngAfterViewInit', () => {\r\n    spyOn(component, 'ngAfterViewInit').and.callThrough();\r\n    component.ngAfterViewInit();\r\n    component.tableData.paginator = component.paginator;\r\n    component.changeDetect.detectChanges();\r\n    expect(component.ngAfterViewInit).toHaveBeenCalled();\r\n  });\r\n\r\n  it('Error capture for getPreviousHistory', () => {\r\n    spyOn(component, 'getLoadInitLocations').and.callThrough();\r\n    spyOn(alertService, 'showErrorInformation');\r\n    spyOn(authenticateService, 'getLocations').and.returnValue(\r\n      throwError({ status: 404 })\r\n    );\r\n    component.getLoadInitLocations();\r\n    expect(component.getLoadInitLocations).toHaveBeenCalled();\r\n    expect(authenticateService.getLocations).toHaveBeenCalled();\r\n  });\r\n\r\n  it('on payroll tab', () => {\r\n    const mockEvent = 'Payroll';\r\n    spyOn(component, 'onChangeRole').and.callThrough();\r\n    const spy = spyOn(router, 'navigate');\r\n    spyOn(component, 'resetRequestRevisionObj');\r\n    spyOn(component, 'getRevisionsInitData');\r\n    component.onChangeRole(mockEvent);\r\n    expect(component.isPayroll).toBeTrue;\r\n    expect(component.isRevenue).toBeFalse;\r\n    expect(component.isExpense).toBeFalse;\r\n    expect(component.revisionType).toEqual(mockEvent);\r\n    // expect(spy).toHaveBeenCalledWith(['/app/revisions'], {\r\n    //   queryParams: { revisionType: component.revisionType }\r\n    // });\r\n    expect(component.resetRequestRevisionObj).toHaveBeenCalled();\r\n    expect(component.getRevisionsInitData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('on Revenue tab', () => {\r\n    const mockEvent = 'Revenue';\r\n    spyOn(component, 'onChangeRole').and.callThrough();\r\n    const spy = spyOn(router, 'navigate');\r\n    spyOn(component, 'resetRequestRevisionObj');\r\n    spyOn(component, 'getRevisionsInitData');\r\n    component.onChangeRole(mockEvent);\r\n    expect(component.isPayroll).toBeFalse;\r\n    expect(component.isRevenue).toBeTrue;\r\n    expect(component.isExpense).toBeFalse;\r\n    expect(component.revisionType).toEqual(mockEvent);\r\n    // expect(spy).toHaveBeenCalledWith(['/app/revisions'], {\r\n    //   queryParams: { revisionType: component.revisionType }\r\n    // });\r\n    expect(component.resetRequestRevisionObj).toHaveBeenCalled();\r\n    expect(component.getRevisionsInitData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('on Expense tab', () => {\r\n    const mockEvent = 'Expense';\r\n    spyOn(component, 'onChangeRole').and.callThrough();\r\n    const spy = spyOn(router, 'navigate');\r\n    spyOn(component, 'resetRequestRevisionObj');\r\n    spyOn(component, 'getRevisionsInitData');\r\n    component.onChangeRole(mockEvent);\r\n    expect(component.isPayroll).toBeFalse;\r\n    expect(component.isRevenue).toBeFalse;\r\n    expect(component.isExpense).toBeTrue;\r\n    expect(component.revisionType).toEqual(mockEvent);\r\n    // expect(spy).toHaveBeenCalledWith(['/app/revisions'], {\r\n    //   queryParams: { revisionType: component.revisionType }\r\n    // });\r\n    expect(component.resetRequestRevisionObj).toHaveBeenCalled();\r\n    expect(component.getRevisionsInitData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should go to add expense revision section', () => {\r\n    spyOn(component, 'addRevision').and.callThrough();\r\n    const spy = spyOn(router, 'navigate');\r\n    spyOn(\r\n      userSessionService,\r\n      'setSelectedRevenueForCorrection'\r\n    ).and.callThrough();\r\n    component.isExpense = true;\r\n    component.isRevenue = false;\r\n    component.isPayroll = false;\r\n    component.addRevision();\r\n    expect(component.addRevision).toHaveBeenCalled();\r\n    expect(\r\n      userSessionService.setSelectedRevenueForCorrection\r\n    ).toHaveBeenCalled();\r\n    // expect(spy).toHaveBeenCalledWith(['/app/addrevision'], {\r\n    //   queryParams: { revisionType: 'Expense' }\r\n    // });\r\n  });\r\n\r\n  it('should go to add revenue revision section', () => {\r\n    spyOn(component, 'addRevision').and.callThrough();\r\n    const spy = spyOn(router, 'navigate');\r\n    spyOn(\r\n      userSessionService,\r\n      'setSelectedRevenueForCorrection'\r\n    ).and.callThrough();\r\n    component.isRevenue = true;\r\n    component.isPayroll = false;\r\n    component.isExpense = false;\r\n    component.addRevision();\r\n    expect(component.addRevision).toHaveBeenCalled();\r\n    expect(\r\n      userSessionService.setSelectedRevenueForCorrection\r\n    ).toHaveBeenCalled();\r\n    // expect(spy).toHaveBeenCalledWith(['/app/addrevision'], {\r\n    //   queryParams: { revisionType: 'Revenue' }\r\n    // });\r\n  });\r\n\r\n  it('should reset search form', () => {\r\n    spyOn(component, 'resetFilters').and.callThrough();\r\n    spyOn(component, 'resetRequestRevisionObj').and.callThrough();\r\n    spyOn(component, 'getRevisionsInitData').and.callThrough();\r\n\r\n    const serviceId = {\r\n      applicableForDarma: true,\r\n      brandCode: 'CLH (PK1)',\r\n      closeDate: null,\r\n      companyId: 'PK001',\r\n      contractType: 'MANAGED',\r\n      id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n      openDate: null,\r\n      realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n      realEstateName: 'Bank of America Tower',\r\n      realEstateNumber: 'US-FL-RE-1003115',\r\n      serviceGroupName: 'Parking',\r\n      serviceId: 'PA-1000428',\r\n      serviceIdName: 'Bank of America Tower Parking',\r\n      serviceNameWithID:\r\n        'PA-1000428 - Bank of America Tower Parking(US-FL-RE-1003115)',\r\n      serviceType: 'Parking'\r\n    };\r\n    const formGroup = new FormGroup({\r\n      revisionLocation: new FormControl([new Locations()]),\r\n      revisionServiceId: new FormControl([serviceId]),\r\n      revisionServiceCode: new FormControl([new ServiceCodesDTO()]),\r\n      revisionFromDate: new FormControl('2021-03-12T05:45:03.864'),\r\n      revisionToDate: new FormControl('2021-03-18T05:45:03.864')\r\n    });\r\n    // };\r\n    component.tableData.data = [];\r\n    component.resetFilters(formGroup);\r\n    expect(component.resetFilters).toHaveBeenCalled();\r\n    expect(component.resetRequestRevisionObj).toHaveBeenCalled();\r\n    expect(component.getRevisionsInitData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should get next page data', () => {\r\n    let mockObj: IRevisionDTO[];\r\n    spyOn(component, 'nextPageData').and.callThrough();\r\n    spyOn(component, 'getNextData').and.callThrough();\r\n    spyOn(authenticateService, 'getListBySearch').and.returnValue(of(mockObj));\r\n    component.startDateIs = new Date('2021-03-01T00:00:00.000');\r\n    component.endDateIs = new Date('2021-03-19T00:00:00.000');\r\n    component.requestRevisionObj = {\r\n      page: '1',\r\n      per_page: '500',\r\n      filterDTO: [\r\n        {\r\n          key: 'payDate',\r\n          operation: ':',\r\n          value: '2021-03-01T00:00:00.000_2021-03-19T00:00:00.000'\r\n        }\r\n      ],\r\n      sort: []\r\n    };\r\n    const paginationPages = { page: '1', per_page: '500' };\r\n    const pageIndex = 1;\r\n    const pageSize = 1;\r\n    fixture.detectChanges();\r\n    const object = {\r\n      pageIndex: 1,\r\n      pageSize: 2,\r\n      previousPageIndex: 2,\r\n      length: 2\r\n    };\r\n    component.nextPageData(object);\r\n    component.getNextData(1, (pageIndex + 1).toString(), pageSize.toString());\r\n    authenticateService\r\n      .getListBySearch(component.requestRevisionObj)\r\n      .subscribe((res) => {\r\n        component.totalRevisions.length = 1;\r\n        component.totalRevisions.push(...(res?.body as IRevisionDTO[]));\r\n      });\r\n    component.changeDetect.detectChanges();\r\n    expect(component.nextPageData).toHaveBeenCalled();\r\n    expect(component.getNextData).toHaveBeenCalled();\r\n    expect(authenticateService.getListBySearch).toHaveBeenCalledWith(\r\n      component.requestRevisionObj\r\n    );\r\n  });\r\n\r\n  /* it('should get list by search', () => {\r\n    const mockObj = {\r\n      page: '1',\r\n      per_page: '500',\r\n      filterDTO: [\r\n        {\r\n          key: 'payDate',\r\n          operation: ':',\r\n          value: '2021-03-01T00:00:00.000_2021-03-19T00:00:00.000'\r\n        }\r\n      ],\r\n      sort: []\r\n    };\r\n    let mockData: IRevisionDTO[];\r\n    spyOn(component, 'getLoadRevisionsInitData').and.callThrough();\r\n    spyOn(authenticateService, 'getListBySearch').and.returnValue(of(mockObj));\r\n    const spy = spyOn(component, 'displayTableData').and.callThrough();\r\n\r\n    component.getLoadRevisionsInitData(mockObj, true);\r\n    authenticateService.getListBySearch(mockObj).subscribe((res) => {\r\n      mockData =\r\n        mockData && mockData.filter((element) => element.status !== 'X');\r\n      component.displayTableData(mockData);\r\n    });\r\n\r\n    fixture.detectChanges();\r\n    expect(component.getLoadRevisionsInitData).toHaveBeenCalled();\r\n    expect(authenticateService.getListBySearch).toHaveBeenCalledWith(mockObj);\r\n    expect(spy).toHaveBeenCalled();\r\n  }); */\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\payroll-revision\\payroll-revision.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChangeDetectorRef' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Renderer2' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ActivatedRoute' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":12,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":23,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DateAdapter' is defined but never used.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MAT_DATE_FORMATS' is defined but never used.","line":26,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Locations' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRevisionDTO' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatSelect' is defined but never used.","line":32,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatPaginator' is defined but never used.","line":38,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PageEvent' is defined but never used.","line":38,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CdkDetailRowDirective' is defined but never used.","line":39,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDialog' is defined but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BrandsModel' is defined but never used.","line":44,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'displayedDashBoardColumns' is defined but never used.","line":48,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpResponse' is defined but never used.","line":53,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":54,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2898,2901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2898,2901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3135,3138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3135,3138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3470,3473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3470,3473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3530,3533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3530,3533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3559,3562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3559,3562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3741,3744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3741,3744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3759,3762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3759,3762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3795,3798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3795,3798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3821,3824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3821,3824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3849,3852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3849,3852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3867,3870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3867,3870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3888,3891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3888,3891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3960,3963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3960,3963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3987,3990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3987,3990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4398,4401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4398,4401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4475,4478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4475,4478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4508,4511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4508,4511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5439,5442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5439,5442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":176,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":176,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":182,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":182,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'search' should be typed.","line":182,"column":21,"nodeType":"Identifier","messageId":"missingArgType","endLine":182,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'data' should be typed.","line":182,"column":29,"nodeType":"Identifier","messageId":"missingArgType","endLine":182,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'key' should be typed.","line":182,"column":35,"nodeType":"Identifier","messageId":"missingArgType","endLine":182,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":195,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":195,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed.","line":195,"column":16,"nodeType":"Identifier","messageId":"missingArgType","endLine":195,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":218,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":218,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'brandCode' should be typed.","line":218,"column":17,"nodeType":"Identifier","messageId":"missingArgType","endLine":218,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":235,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":235,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":266,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":266,"endColumn":59},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'loadRevenueDetails' should be typed with a non-any type.","line":266,"column":28,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":266,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8676,8679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8676,8679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'value' should be typed.","line":266,"column":53,"nodeType":"Identifier","messageId":"missingArgType","endLine":266,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":266,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":266,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":287,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":287,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'dataObj' should be typed.","line":287,"column":20,"nodeType":"Identifier","messageId":"missingArgType","endLine":287,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":320,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":320,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":334,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":334,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":346,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":346,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":373,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":373,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'currentSize' should be typed.","line":373,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":373,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'offset' should be typed.","line":373,"column":28,"nodeType":"Identifier","messageId":"missingArgType","endLine":373,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'limit' should be typed.","line":373,"column":36,"nodeType":"Identifier","messageId":"missingArgType","endLine":373,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13174,13177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13174,13177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":429,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":429,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":446,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":446,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":467,"column":25,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":467,"endColumn":75},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'startDate' should be typed with a non-any type.","line":467,"column":35,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":467,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":467,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15090,15093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15090,15093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'enddate' should be typed with a non-any type.","line":467,"column":51,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":467,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":467,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15104,15107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15104,15107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'days' should be typed with a non-any type.","line":467,"column":65,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":467,"endColumn":74},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":467,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15115,15118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15115,15118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":477,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":477,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":591,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":591,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'selected' should be typed with a non-any type.","line":591,"column":18,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":591,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":591,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":591,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19160,19163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19160,19163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":618,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":618,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":629,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":629,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":638,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":638,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formDataIs' is defined but never used.","line":638,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":638,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'formDataIs' should be typed.","line":638,"column":16,"nodeType":"Identifier","messageId":"missingArgType","endLine":638,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":645,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":645,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":654,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":654,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'filterValue' should be typed.","line":654,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":654,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":658,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":658,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":670,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":670,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":676,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":676,"endColumn":14}],"errorCount":0,"warningCount":89,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { UserSessionService } from '../../../shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n  trigger,\r\n  style,\r\n  state,\r\n  animate,\r\n  transition,\r\n  query,\r\n  stagger\r\n} from '@angular/animations';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport * as moment from 'moment';\r\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport {\r\n  Locations,\r\n  IRevisionDTO\r\n} from 'src/app/shared/model/revenueSource.model';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\r\nimport get from 'lodash.get';\r\n// material dependencies\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { CdkDetailRowDirective } from '../../../shared/directives/table-expandable-row-directive';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { DialogDataExampleDialog } from '../../../shared/common-components/custom-model/custom-dialog';\r\nimport {\r\n  customModalData,\r\n  BrandsModel\r\n} from '../../../shared/model/applicationModel';\r\nimport {\r\n  DATE_FORMATS,\r\n  displayedDashBoardColumns,\r\n  displayedPayrollRevisionColumns,\r\n  REVISION_STATUS,\r\n  REVISION_TYPE\r\n} from '../../../shared/constants/app-constants';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { UserResponseModel } from 'src/app/shared/model/loginApiResponse.model';\r\n@Component({\r\n  selector: 'app-payroll-revision',\r\n  templateUrl: './payroll-revision.component.html',\r\n  styleUrls: ['./payroll-revision.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\r\n      state('expanded', style({ height: '*' })),\r\n      transition(\r\n        'expanded <=> collapsed',\r\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')\r\n      )\r\n    ]),\r\n    trigger('logoAni', [\r\n      transition('* => *', [\r\n        query(':enter', style({ opacity: 0 }), { optional: true }),\r\n        query(\r\n          ':enter',\r\n          stagger('100ms', [animate('1s', style({ opacity: 1 }))]),\r\n          { optional: true }\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class PayrollRevisionComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  @ViewChild(MatTable) _matTable: MatTable<any>;\r\n  @ViewChild('paginator2', { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  @Input() singleChildRowDetail: boolean;\r\n  public searchRevenue = false;\r\n  responsive = true;\r\n  cols = 1;\r\n  t_data: any;\r\n  totalRevisions: IRevisionDTO[] = [];\r\n  displayedColumns = displayedPayrollRevisionColumns;\r\n  openedRow: CdkDetailRowDirective;\r\n  tableData = new MatTableDataSource<IRevisionDTO>([]);\r\n  loggedUserDetails: UserResponseModel = null;\r\n  BrandResponse: BrandsModel[] = [];\r\n  locations: Locations[] = [];\r\n  revenueLocResponse: any;\r\n  revisionSearchForm: FormGroup;\r\n  finalServiceType: any[] = [];\r\n  subscription: any;\r\n  isPayroll = true;\r\n  isRevenue = false;\r\n  isExpense = false;\r\n  revisionType = 'Payroll';\r\n  requestRevisionObj: {\r\n    page: string;\r\n    per_page: string;\r\n    filterDTO: any[];\r\n    sort: any[];\r\n  };\r\n  deleteSubscription: any;\r\n  userSubscription: any;\r\n  expandedRevenueObj: any;\r\n  apiCalls: any[] = [];\r\n  role: any;\r\n\r\n  /** New changes */\r\n  public filteredLocations: ReplaySubject<any[]> = new ReplaySubject<any[]>(1);\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n  public startDateIs = new Date(\r\n    moment().startOf('month').format(DATE_FORMATS.DATE_PICKER_FORMAT)\r\n  );\r\n  public endDateIs = new Date(moment().format(DATE_FORMATS.DATE_PICKER_FORMAT));\r\n  displayRevisionDetailsColumns = displayedPayrollRevisionColumns;\r\n  public monthOptionsIs: any[] = [];\r\n  public displaySearchInput = false;\r\n  public selectedObjects: any[] = [];\r\n  getallbrandtypes: any[];\r\n  searchFormDataIs: FormGroup;\r\n  search = '';\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private renderer: Renderer2,\r\n    private authService: AuthenticateService,\r\n    private alertService: SweetAlertService,\r\n    private router: Router,\r\n    public changeDetect: ChangeDetectorRef,\r\n    private dialog: MatDialog,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.revisionSearchForm = new FormGroup({\r\n      brandId: new FormControl(''),\r\n      revisionLocation: new FormControl(null),\r\n      revisionServiceId: new FormControl([]),\r\n      revisionFromDate: new FormControl(this.startDateIs, Validators.required),\r\n      revisionToDate: new FormControl(this.endDateIs, Validators.required),\r\n      revenueDepositIdentifier: new FormControl(''),\r\n      locFilterCtrl: new FormControl('')\r\n    });\r\n    this.userSessionService.currentUser.subscribe(\r\n      (res: any) => (this.loggedUserDetails = res)\r\n    );\r\n    this.userSessionService.allReefBrands.subscribe(\r\n      (response: BrandsModel[]) => (this.BrandResponse = response)\r\n    );\r\n    this.role = get(this.loggedUserDetails, 'authorities[0].code');\r\n\r\n    this.route.queryParams.subscribe((params) => {\r\n      this.onChangeRole(params.revisionType);\r\n    });\r\n    this.resetRequestRevisionObj();\r\n    this.getRevisionsInitData();\r\n\r\n    /** New changes */\r\n    // this.revisionSearchForm.controls.locFilterCtrl.valueChanges\r\n    //   .pipe(takeUntil(this._onDestroy))\r\n    //   .subscribe(() => {\r\n    //     this.filterLocations();\r\n    //   });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // this.setInitialValue();\r\n    this.tableData.paginator = this.paginator;\r\n    this.changeDetect.detectChanges();\r\n  }\r\n\r\n  nestedFilterCheck(search, data, key) {\r\n    if (typeof data[key] === 'object') {\r\n      for (const k in data[key]) {\r\n        if (data[key][k] !== null) {\r\n          search = this.nestedFilterCheck(search, data[key], k);\r\n        }\r\n      }\r\n    } else {\r\n      search += data[key];\r\n    }\r\n    return search;\r\n  }\r\n\r\n  onChangeRole(event) {\r\n    if (event === 'Payroll') {\r\n      this.isPayroll = true;\r\n      this.isRevenue = false;\r\n      this.isExpense = false;\r\n    } else if (event === 'Expense') {\r\n      this.isPayroll = false;\r\n      this.isRevenue = false;\r\n      this.isExpense = true;\r\n    } else if (event === 'Revenue') {\r\n      this.isPayroll = false;\r\n      this.isRevenue = true;\r\n      this.isExpense = false;\r\n    }\r\n\r\n    this.revisionType = event;\r\n    this.router.navigate(['/app/revisions'], {\r\n      queryParams: { revisionType: this.revisionType }\r\n    });\r\n    this.resetRequestRevisionObj();\r\n    this.getRevisionsInitData();\r\n  }\r\n\r\n  returnLogoImg(brandCode) {\r\n    switch (brandCode) {\r\n      case 'CLH (AmeriPark)':\r\n        return 'assets/images/parking_logos/ameripark.png';\r\n      case 'CLH (Lanier)':\r\n        return 'assets/images/parking_logos/lanier.png';\r\n      case 'CLH (PK1)':\r\n        return 'assets/images/parking_logos/pk.png';\r\n      case 'Impark':\r\n        return 'assets/images/parking_logos/impark.png';\r\n      case 'Republic Parking':\r\n        return 'assets/images/parking_logos/republic.png';\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  getRevisionsInitData() {\r\n    const type =\r\n      this.revisionType === 'Payroll'\r\n        ? REVISION_TYPE.PAYROLL\r\n        : this.revisionType === 'Expense'\r\n        ? REVISION_TYPE.EXPENSE\r\n        : REVISION_TYPE.REVENUE;\r\n    const payloadobj = {\r\n      page: 1,\r\n      revisionType: type,\r\n      pages: 500\r\n    };\r\n    this.blockUI.start('Loading....');\r\n    this.authService.getAllPayrevision(payloadobj).subscribe(\r\n      (data: IRevisionDTO[]) => {\r\n        const filteredData =\r\n          data &&\r\n          data.filter((element) => element.status !== REVISION_STATUS.DELETE);\r\n        this.displayTableData(filteredData);\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        if (error.status !== 404) {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n        this.blockUI.stop();\r\n      }\r\n    );\r\n  }\r\n\r\n  getLoadRevisionsInitData(loadRevenueDetails: any, value) {\r\n    this.blockUI.start('Loading....');\r\n\r\n    this.authService.getListBySearch(loadRevenueDetails).subscribe(\r\n      (data: IRevisionDTO[]) => {\r\n        const filteredData =\r\n          data &&\r\n          data.filter((element) => element.status !== REVISION_STATUS.DELETE);\r\n        this.displayTableData(filteredData);\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        if (error.status !== 404) {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n        this.blockUI.stop();\r\n      }\r\n    );\r\n  }\r\n\r\n  displayTableData(dataObj) {\r\n    this.totalRevisions = [];\r\n    this.tableData.data = [];\r\n\r\n    if (dataObj) {\r\n      this.t_data = dataObj;\r\n      this.totalRevisions = this.t_data as IRevisionDTO[];\r\n      this.totalRevisions.length = Number(this.t_data.length);\r\n      if (this.totalRevisions.length > 0) {\r\n        this.totalRevisions.map((revision: IRevisionDTO) => {\r\n          revision.close = false;\r\n        });\r\n      }\r\n      this.tableData = new MatTableDataSource<IRevisionDTO>(\r\n        this.totalRevisions\r\n      );\r\n      this.tableData.data.map((data: IRevisionDTO) => {\r\n        data.billable =\r\n          data?.billable === 'B'\r\n            ? 'Billable'\r\n            : data?.billable === 'N'\r\n            ? 'Non Billable'\r\n            : null;\r\n        data.payDate = moment(data?.payDate).format('MM/DD/YYYY');\r\n      });\r\n      this.tableData.paginator = this.paginator;\r\n      this.filterTableData();\r\n      this.sortingData();\r\n      this.tableData.sort = this.sort;\r\n      this.changeDetect.detectChanges();\r\n    }\r\n  }\r\n\r\n  nextPageData(event: PageEvent) {\r\n    const pageIndex = event.pageIndex;\r\n    const pageSize = event.pageSize;\r\n    const previousIndex = event.previousPageIndex;\r\n    const previousSize = pageSize * pageIndex;\r\n    if (pageIndex !== previousIndex) {\r\n      this.getNextData(\r\n        previousSize,\r\n        (pageIndex + 1).toString(),\r\n        pageSize.toString()\r\n      );\r\n    }\r\n  }\r\n\r\n  filterTableData() {\r\n    this.tableData.filterPredicate = (data, filter: string) => {\r\n      const accumulator = (currentTerm, key) => {\r\n        return this.nestedFilterCheck(currentTerm, data, key);\r\n      };\r\n      const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\r\n      // Transform the filter by converting it to lowercase and removing whitespace.\r\n      const transformedFilter = filter.trim().toLowerCase();\r\n      return dataStr.indexOf(transformedFilter) !== -1;\r\n    };\r\n  }\r\n\r\n  sortingData() {\r\n    this.tableData.sortingDataAccessor = (item, property) => {\r\n      switch (property) {\r\n        case 'real_estate_id':\r\n          return item.location.locationID;\r\n        case 'service_id':\r\n          return item.service.serviceId;\r\n        case 'service_code':\r\n          return item.serviceCodes.serviceCode;\r\n        case 'billable':\r\n          return item.billable;\r\n        case 'gl_details':\r\n          return item.glCodeDetails.glCodes;\r\n        case 'job_code':\r\n          return item.jobCodes.jobCode;\r\n        case 'posting_date':\r\n          return item.payDate;\r\n        case 'requested_by':\r\n          return item.approvedBy.emailAddress;\r\n        case 'tender_types':\r\n          return item.tenderTypes.code;\r\n        default:\r\n          return item[property];\r\n      }\r\n    };\r\n  }\r\n\r\n  getNextData(currentSize, offset, limit) {\r\n    // this.blockUI.start('Loading....');\r\n    const revisionFromDate =\r\n      this.revisionSearchForm &&\r\n      this.revisionSearchForm.controls.revisionFromDate.value;\r\n    const revisionToDate =\r\n      this.revisionSearchForm &&\r\n      this.revisionSearchForm.controls.revisionToDate.value;\r\n    if (revisionFromDate && revisionToDate) {\r\n      const revisionStart = moment(revisionFromDate).format(\r\n        DATE_FORMATS.DATE_FORMAT\r\n      );\r\n      const revisionEnd = moment(revisionToDate).format(\r\n        DATE_FORMATS.DATE_FORMAT\r\n      );\r\n      const revisionDateFilter = {\r\n        key: 'payDate',\r\n        operation: ':',\r\n        value: `${revisionStart}_${revisionEnd}`\r\n      };\r\n\r\n      this.requestRevisionObj['filterDTO'].push(revisionDateFilter);\r\n    }\r\n\r\n    const SortDTO = {\r\n      field: 'payDate',\r\n      direction: 'DESC'\r\n    };\r\n    this.requestRevisionObj['sort'].push(SortDTO);\r\n    this.requestRevisionObj.page = offset;\r\n    this.requestRevisionObj.per_page = limit;\r\n    this.authService.getListBySearch(this.requestRevisionObj).subscribe(\r\n      (data: any) => {\r\n        this.totalRevisions.length = currentSize;\r\n        this.totalRevisions.push(...(data['body'] as IRevisionDTO[]));\r\n        this.totalRevisions.length = data.headers.get('X-Total-Count');\r\n        this.totalRevisions.forEach((revision: IRevisionDTO) => {\r\n          revision.close = false;\r\n        });\r\n        this.tableData = new MatTableDataSource<IRevisionDTO>(\r\n          this.totalRevisions\r\n        );\r\n        this.tableData.paginator = this.paginator;\r\n        this.filterTableData();\r\n        this.sortingData();\r\n        this.tableData.sort = this.sort;\r\n        this.changeDetect.detectChanges();\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getLoadInitLocations() {\r\n    this.blockUI.start('Loading....');\r\n    this.authService.getLocations().subscribe(\r\n      (response: Locations[]) => {\r\n        this.locations = response;\r\n        for (const user of this.locations) {\r\n          user.locationWithID = user.locationID + ' - ' + user.name;\r\n        }\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  addRevision() {\r\n    this.userSessionService.setSelectedRevenueForCorrection(null);\r\n    if (this.isPayroll) {\r\n      this.router.navigate(['/app/addrevision'], {\r\n        queryParams: { revisionType: 'Payroll' }\r\n      });\r\n    } else if (this.isExpense) {\r\n      this.router.navigate(['/app/addrevision'], {\r\n        queryParams: { revisionType: 'Expense' }\r\n      });\r\n    } else {\r\n      this.router.navigate(['/app/addrevision'], {\r\n        queryParams: { revisionType: 'Revenue' }\r\n      });\r\n    }\r\n  }\r\n\r\n  // searchRevision() {\r\n  //   this.getRevisionsInitData();\r\n  // }\r\n\r\n  dateRangeValidation = function (startDate: any, enddate: any, days: any) {\r\n    const from = moment(startDate, 'MM/DD/YYYY');\r\n    const to = moment(enddate, 'MM/DD/YYYY');\r\n    const duration = to.diff(from, 'days');\r\n    if (duration > days) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n  filterDTOObjCreation() {\r\n    this.requestRevisionObj.filterDTO = [];\r\n    let location_id;\r\n    let service_id;\r\n    let service_code_id;\r\n    const revisionFromDate = this.searchFormDataIs\r\n      ? this.searchFormDataIs.controls.revisionFromDate.value\r\n      : new Date(\r\n          moment().startOf('month').format(DATE_FORMATS.DATE_PICKER_FORMAT)\r\n        );\r\n    const revisionToDate = this.searchFormDataIs\r\n      ? this.searchFormDataIs.controls.revisionToDate.value\r\n      : new Date(moment().format(DATE_FORMATS.DATE_PICKER_FORMAT));\r\n\r\n    const type =\r\n      this.revisionType === 'Payroll'\r\n        ? REVISION_TYPE.PAYROLL\r\n        : this.revisionType === 'Expense'\r\n        ? REVISION_TYPE.EXPENSE\r\n        : REVISION_TYPE.REVENUE;\r\n    const revisionFilter = {\r\n      key: 'revisionType',\r\n      operation: ':',\r\n      value: type\r\n    };\r\n    this.requestRevisionObj['filterDTO'].push(revisionFilter);\r\n\r\n    if (\r\n      this.dateRangeValidation(revisionFromDate, revisionToDate, 365) == false\r\n    ) {\r\n      this.blockUI.stop();\r\n      const modalData = new customModalData();\r\n      modalData.icon = 'error';\r\n      modalData.text = 'Date range should be less than a year';\r\n      modalData.title = 'Invalid Date Range';\r\n      modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n      this.dialog.open(DialogDataExampleDialog, {\r\n        data: modalData\r\n      });\r\n      return false;\r\n    }\r\n    if (\r\n      this.searchFormDataIs &&\r\n      this.searchFormDataIs.value &&\r\n      this.searchFormDataIs.value.revisionLocation &&\r\n      this.searchFormDataIs.value.revisionLocation.length > 0\r\n    ) {\r\n      this.searchFormDataIs.value.revisionLocation.forEach((element) => {\r\n        if (location_id) {\r\n          location_id += '__' + element.id;\r\n        } else {\r\n          location_id = element.id;\r\n        }\r\n      });\r\n      const locationIdFilter = {\r\n        key: 'location_id',\r\n        operation: ':',\r\n        value: location_id\r\n      };\r\n      this.requestRevisionObj['filterDTO'].push(locationIdFilter);\r\n    }\r\n    if (\r\n      this.searchFormDataIs &&\r\n      this.searchFormDataIs.value &&\r\n      this.searchFormDataIs.value.revisionServiceId &&\r\n      this.searchFormDataIs.value.revisionServiceId.length > 0\r\n    ) {\r\n      this.searchFormDataIs.value.revisionServiceId.forEach((element) => {\r\n        if (service_id) {\r\n          service_id += '__' + element.id;\r\n        } else {\r\n          service_id = element.id;\r\n        }\r\n      });\r\n      const serviceIdFilter = {\r\n        key: 'service_id',\r\n        operation: ':',\r\n        value: service_id\r\n      };\r\n      this.requestRevisionObj['filterDTO'].push(serviceIdFilter);\r\n    }\r\n    if (\r\n      this.searchFormDataIs &&\r\n      this.searchFormDataIs.value &&\r\n      this.searchFormDataIs.value.revisionServiceCode &&\r\n      this.searchFormDataIs.value.revisionServiceCode.length > 0\r\n    ) {\r\n      this.searchFormDataIs.value.revisionServiceCode.forEach((element) => {\r\n        if (service_code_id) {\r\n          service_code_id += '__' + element.id;\r\n        } else {\r\n          service_code_id = element.id;\r\n        }\r\n      });\r\n      const serviceCodeIdFilter = {\r\n        key: 'service_code_id',\r\n        operation: ':',\r\n        value: service_code_id\r\n      };\r\n      this.requestRevisionObj['filterDTO'].push(serviceCodeIdFilter);\r\n    }\r\n    if (revisionFromDate != '' && revisionToDate != '') {\r\n      const revisionDateFilter = {\r\n        key: 'payDate',\r\n        operation: ':',\r\n        value:\r\n          moment(revisionFromDate).format(DATE_FORMATS.DATE_FORMAT) +\r\n          '_' +\r\n          moment(revisionToDate).format(DATE_FORMATS.DATE_FORMAT)\r\n      };\r\n      this.requestRevisionObj['filterDTO'].push(revisionDateFilter);\r\n    }\r\n  }\r\n\r\n  filterRevision(selected: any) {\r\n    if (selected.value !== 'all') {\r\n      const filteredData = this.t_data?.filter(\r\n        (t) => t.payRevisionStatus === selected.value\r\n      );\r\n      this.totalRevisions = filteredData as IRevisionDTO[];\r\n      if (this.totalRevisions?.length > 0) {\r\n        this.totalRevisions.forEach((revision: IRevisionDTO) => {\r\n          revision.close = false;\r\n        });\r\n      }\r\n      this.tableData = new MatTableDataSource<IRevisionDTO>(\r\n        this.totalRevisions\r\n      );\r\n    } else {\r\n      this.totalRevisions = this.t_data as IRevisionDTO[];\r\n      if (this.totalRevisions?.length > 0) {\r\n        this.totalRevisions.forEach((revision: IRevisionDTO) => {\r\n          revision.close = false;\r\n        });\r\n      }\r\n      this.tableData = new MatTableDataSource<IRevisionDTO>(\r\n        this.totalRevisions\r\n      );\r\n    }\r\n  }\r\n\r\n  searchRevisions(formDataIs: FormGroup) {\r\n    this.resetRequestRevisionObj();\r\n    this.searchFormDataIs = formDataIs;\r\n    this.totalRevisions = [];\r\n    this.tableData.data = [];\r\n    this.filterDTOObjCreation();\r\n    this.requestRevisionObj.page = '1';\r\n    this.requestRevisionObj.per_page = '500';\r\n    this.getLoadRevisionsInitData(this.requestRevisionObj, false);\r\n  }\r\n\r\n  resetRequestRevisionObj() {\r\n    this.requestRevisionObj = {\r\n      page: '1',\r\n      per_page: '500',\r\n      filterDTO: [],\r\n      sort: []\r\n    };\r\n  }\r\n\r\n  resetFilters(formDataIs) {\r\n    this.tableData.data = [];\r\n    // this.searchRevisions(formDataIs);\r\n    this.resetRequestRevisionObj();\r\n    this.getRevisionsInitData();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n    if (this.userSubscription) {\r\n      this.userSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /** Filter Table */\r\n  applyFilter(filterValue) {\r\n    this.tableData.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  showSearchInput(e: MouseEvent) {\r\n    this.displaySearchInput = true;\r\n    setTimeout(() => {\r\n      const elementReference = document.querySelector('#search');\r\n      if (elementReference instanceof HTMLElement) {\r\n        elementReference.focus();\r\n      }\r\n      // this.renderer.selectRootElement('#search').focus();\r\n    });\r\n    e?.stopPropagation();\r\n  }\r\n\r\n  onOutSideClick() {\r\n    if (!this.search) {\r\n      this.displaySearchInput = false;\r\n    }\r\n  }\r\n\r\n  roleCheck() {\r\n    const flag =\r\n      this.role === 'ROLE_DARMA_ADMIN' || this.role === 'ROLE_DARMA_OWNER'\r\n        ? false\r\n        : true;\r\n    return flag;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\payroll-revision\\payroll-revision.module.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·SearchRevisionComponent,·searchCalenderHeader·` with `␍⏎··SearchRevisionComponent,␍⏎··searchCalenderHeader␍⏎`","line":26,"column":9,"nodeType":null,"endLine":26,"endColumn":56,"fix":{"range":[1547,1594],"text":"\r\n  SearchRevisionComponent,\r\n  searchCalenderHeader\r\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `PayrollRevisionComponent,·SearchRevisionComponent,·searchCalenderHeader` with `␍⏎····PayrollRevisionComponent,␍⏎····SearchRevisionComponent,␍⏎····searchCalenderHeader␍⏎··`","line":29,"column":18,"nodeType":null,"endLine":29,"endColumn":89,"fix":{"range":[1681,1752],"text":"\r\n    PayrollRevisionComponent,\r\n    SearchRevisionComponent,\r\n    searchCalenderHeader\r\n  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":66,"column":46,"nodeType":null,"endLine":66,"endColumn":47,"fix":{"range":[2622,2623],"text":""}}],"errorCount":3,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { PayrollRevisionComponent } from './payroll-revision.component';\r\nimport { TooltipModule } from 'ng2-tooltip-directive';\r\nimport { SharedModule } from '../../../shared/shared.module';\r\n/** Material changes */\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\r\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { SearchRevisionComponent, searchCalenderHeader } from './search-revision/search-revision.component';\r\n\r\n@NgModule({\r\n  declarations: [PayrollRevisionComponent, SearchRevisionComponent, searchCalenderHeader],\r\n  imports: [\r\n    CommonModule,\r\n    MatCardModule,\r\n    FormsModule,\r\n    MatListModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule,\r\n    TooltipModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatGridListModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatNativeDateModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatExpansionModule,\r\n    MatRippleModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatCardModule,\r\n    NgxMatSelectSearchModule,\r\n    SharedModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\r\n      useValue: { appearance: 'fill' }\r\n    }\r\n  ],\r\n  entryComponents: [PayrollRevisionComponent, SearchRevisionComponent],\r\n  exports: [TranslateModule],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class PayrollRevisionComponentModule { }\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\payroll-revision\\search-revision\\search-revision.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BankAccountsDTO' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRevenueDTO' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LocationDTO' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RevenueTypesDTO' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SourceDTO' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TenderTypesDTO' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserDTO' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRealEstateServicesIds' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userSessionService' is assigned a value but never used.","line":74,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":75,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":76,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":77,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is assigned a value but never used.","line":78,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":15},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":124,"column":1,"nodeType":null,"endLine":124,"endColumn":3,"fix":{"range":[4444,4446],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"id\":·\"69236dfb-0a7a-40bd-9f1e-a2038bf56737\"` with `id:·'69236dfb-0a7a-40bd-9f1e-a2038bf56737'`","line":182,"column":9,"nodeType":null,"endLine":182,"endColumn":53,"fix":{"range":[6477,6521],"text":"id: '69236dfb-0a7a-40bd-9f1e-a2038bf56737'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"serviceIdType\":·\"Transportation\"` with `serviceIdType:·'Transportation'`","line":183,"column":9,"nodeType":null,"endLine":183,"endColumn":42,"fix":{"range":[6532,6565],"text":"serviceIdType: 'Transportation'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"serviceCode\":·\"TR01\"` with `serviceCode:·'TR01'`","line":184,"column":9,"nodeType":null,"endLine":184,"endColumn":30,"fix":{"range":[6576,6597],"text":"serviceCode: 'TR01'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"serviceCodeDescription\":·\"Shuttle·Service\"` with `serviceCodeDescription:·'Shuttle·Service'`","line":185,"column":9,"nodeType":null,"endLine":185,"endColumn":52,"fix":{"range":[6608,6651],"text":"serviceCodeDescription: 'Shuttle Service'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":186,"column":1,"nodeType":null,"endLine":186,"endColumn":1,"fix":{"range":[6653,6653],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `.getServiceCodes(object[0].serviceIdType).subscribe(␍⏎······res·=>·component.serviceCodesByServiceType·=·res␍⏎····` with `␍⏎······.getServiceCodes(object[0].serviceIdType)␍⏎······.subscribe((res)·=>·(component.serviceCodesByServiceType·=·res)`","line":196,"column":24,"nodeType":null,"endLine":198,"endColumn":5,"fix":{"range":[7030,7144],"text":"\r\n      .getServiceCodes(object[0].serviceIdType)\r\n      .subscribe((res) => (component.serviceCodesByServiceType = res)"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `;`","line":207,"column":5,"nodeType":null,"endLine":207,"endColumn":5,"fix":{"range":[7566,7566],"text":";"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"id\":·\"1a09cae9-68f0-40f9-b0ee-38c501a2fa8d\"` with `id:·'1a09cae9-68f0-40f9-b0ee-38c501a2fa8d'`","line":213,"column":7,"nodeType":null,"endLine":213,"endColumn":51,"fix":{"range":[7732,7776],"text":"id: '1a09cae9-68f0-40f9-b0ee-38c501a2fa8d'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"serviceIdType\":·\"Parking\"` with `serviceIdType:·'Parking'`","line":214,"column":7,"nodeType":null,"endLine":214,"endColumn":33,"fix":{"range":[7785,7811],"text":"serviceIdType: 'Parking'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"serviceCode\":·\"PA04\"` with `serviceCode:·'PA04'`","line":215,"column":7,"nodeType":null,"endLine":215,"endColumn":28,"fix":{"range":[7820,7841],"text":"serviceCode: 'PA04'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"serviceCodeDescription\":·\"Event\"` with `serviceCodeDescription:·'Event'`","line":216,"column":7,"nodeType":null,"endLine":216,"endColumn":40,"fix":{"range":[7850,7883],"text":"serviceCodeDescription: 'Event'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"id\":·\"73ebc8a5-c742-4fd6-8b96-a37d8d7bd2aa\"` with `id:·'73ebc8a5-c742-4fd6-8b96-a37d8d7bd2aa'`","line":219,"column":7,"nodeType":null,"endLine":219,"endColumn":51,"fix":{"range":[7926,7970],"text":"id: '73ebc8a5-c742-4fd6-8b96-a37d8d7bd2aa'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"jobCode\":·\"Valet·Supervisor\"` with `jobCode:·'Valet·Supervisor'`","line":220,"column":7,"nodeType":null,"endLine":220,"endColumn":36,"fix":{"range":[7979,8008],"text":"jobCode: 'Valet Supervisor'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"directCost\"` with `directCost`","line":221,"column":7,"nodeType":null,"endLine":221,"endColumn":19,"fix":{"range":[8017,8029],"text":"directCost"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"indirectCost\"` with `indirectCost`","line":222,"column":7,"nodeType":null,"endLine":222,"endColumn":21,"fix":{"range":[8044,8058],"text":"indirectCost"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"sGandA\"` with `sGandA`","line":223,"column":7,"nodeType":null,"endLine":223,"endColumn":15,"fix":{"range":[8074,8082],"text":"sGandA"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"serviceCode\":·\"PA04\"` with `serviceCode:·'PA04'`","line":224,"column":7,"nodeType":null,"endLine":224,"endColumn":28,"fix":{"range":[8098,8119],"text":"serviceCode: 'PA04'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"id\":·\"69236dfb-0a7a-40bd-9f1e-a2038bf56737\"` with `id:·'69236dfb-0a7a-40bd-9f1e-a2038bf56737'`","line":270,"column":11,"nodeType":null,"endLine":270,"endColumn":55,"fix":{"range":[9772,9816],"text":"id: '69236dfb-0a7a-40bd-9f1e-a2038bf56737'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"serviceIdType\":·\"Transportation\"` with `serviceIdType:·'Transportation'`","line":271,"column":11,"nodeType":null,"endLine":271,"endColumn":44,"fix":{"range":[9829,9862],"text":"serviceIdType: 'Transportation'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"serviceCode\":·\"TR01\"` with `serviceCode:·'TR01'`","line":272,"column":11,"nodeType":null,"endLine":272,"endColumn":32,"fix":{"range":[9875,9896],"text":"serviceCode: 'TR01'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `\"serviceCodeDescription\":·\"Shuttle·Service\"` with `serviceCodeDescription:·'Shuttle·Service'`","line":273,"column":11,"nodeType":null,"endLine":273,"endColumn":54,"fix":{"range":[9909,9952],"text":"serviceCodeDescription: 'Shuttle Service'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `␍⏎········authenticateServiceStub,␍⏎········'getServiceCodes'␍⏎······` with `authenticateServiceStub,·'getServiceCodes'`","line":283,"column":13,"nodeType":null,"endLine":286,"endColumn":7,"fix":{"range":[10319,10388],"text":"authenticateServiceStub, 'getServiceCodes'"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":289,"column":26,"nodeType":null,"endLine":289,"endColumn":27,"fix":{"range":[10568,10569],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":292,"column":43,"nodeType":null,"endLine":292,"endColumn":49,"fix":{"range":[10726,10732],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `␍⏎········authenticateServiceStub.getServiceCodes␍⏎······` with `authenticateServiceStub.getServiceCodes`","line":295,"column":14,"nodeType":null,"endLine":297,"endColumn":7,"fix":{"range":[10848,10905],"text":"authenticateServiceStub.getServiceCodes"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍⏎`","line":303,"column":1,"nodeType":null,"endLine":304,"endColumn":1,"fix":{"range":[11089,11091],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":306,"column":23,"nodeType":null,"endLine":306,"endColumn":24,"fix":{"range":[11232,11233],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `;`","line":311,"column":64,"nodeType":null,"endLine":311,"endColumn":64,"fix":{"range":[11512,11512],"text":";"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `;`","line":314,"column":5,"nodeType":null,"endLine":314,"endColumn":5,"fix":{"range":[11642,11642],"text":";"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `␍⏎`","line":316,"column":65,"nodeType":null,"endLine":317,"endColumn":1,"fix":{"range":[11710,11712],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":320,"column":24,"nodeType":null,"endLine":320,"endColumn":25,"fix":{"range":[11857,11858],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `;`","line":325,"column":65,"nodeType":null,"endLine":325,"endColumn":65,"fix":{"range":[12141,12141],"text":";"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `;`","line":327,"column":5,"nodeType":null,"endLine":327,"endColumn":5,"fix":{"range":[12209,12209],"text":";"}}],"errorCount":34,"warningCount":14,"fixableErrorCount":34,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { forkJoin } from 'rxjs/internal/observable/forkJoin';\r\nimport {\r\n  BankAccountsDTO,\r\n  IRevenueDTO,\r\n  LocationDTO,\r\n  Locations,\r\n  RevenueTypesDTO,\r\n  SourceDTO,\r\n  TenderTypesDTO,\r\n  UserDTO,\r\n  IRealEstateServicesIds\r\n} from 'src/app/shared/model/revenueSource.model';\r\nimport { SearchRevisionComponent } from './search-revision.component';\r\nimport * as moment from 'moment';\r\nimport { of } from 'rxjs/internal/observable/of';\r\n\r\ndescribe('SearchRevisionComponent', () => {\r\n  let component: SearchRevisionComponent;\r\n  let fixture: ComponentFixture<SearchRevisionComponent>;\r\n  let router: Router;\r\n  let apiService: ApiService;\r\n  let authenticateService: AuthenticateService;\r\n  let userSessionService: UserSessionService;\r\n  let httpMock: HttpTestingController;\r\n  let httpClient: HttpClient;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [SearchRevisionComponent],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    userSessionService = TestBed.get(UserSessionService);\r\n    httpMock = TestBed.get(HttpTestingController);\r\n    router = TestBed.inject(Router);\r\n    httpClient = TestBed.get(HttpClient);\r\n    apiService = TestBed.get(ApiService);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(SearchRevisionComponent);\r\n    component = fixture.componentInstance;\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should reset all filters', () => {\r\n    // const flagIs = true;\r\n    spyOn(component, 'resetFilters').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.serviceTypesByRealEstates = [];\r\n    component.revisionSearchForm.reset({\r\n      revisionFromDate: new Date(\r\n        moment().startOf('month').format('YYYY-MM-DD hh:mm')\r\n      ),\r\n      revisionToDate: new Date(moment().format('YYYY-MM-DD hh:mm'))\r\n    });\r\n    component.resetFilters();\r\n    expect(component.resetFilters).toHaveBeenCalled();\r\n    component.resetRevisionFilters.emit(component.revisionSearchForm);\r\n  });\r\n\r\n  it('should get locations Based on brand', () => {\r\n    const locationObj = [new Locations()];\r\n    spyOn(component, 'getLocationsBasedOnBrand').and.callThrough();\r\n    spyOn(authenticateService, 'getLocationsBasedOnBrand').and.returnValue(\r\n      of(locationObj)\r\n    );\r\n    fixture.detectChanges();\r\n    const brandType = {\r\n      id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n      code: 'All'\r\n    };\r\n    component.loggedUserDetails = { brandCode: 'All' };\r\n    component.revisionSearchForm.patchValue({ brandType });\r\n    component.getLocationsBasedOnBrand();\r\n    expect(component.getLocationsBasedOnBrand).toHaveBeenCalled();\r\n    expect(authenticateService.getLocationsBasedOnBrand).toHaveBeenCalled();\r\n    expect(component.realEstateLocations).toEqual(locationObj);\r\n  });\r\n  \r\n  it('should filter location data', () => {\r\n    const object = [\r\n      {\r\n        id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n        serviceId: 'PA-1000428',\r\n        serviceIdName: 'Bank of America Tower Parking',\r\n        serviceType: 'Parking',\r\n        serviceGroupName: 'Parking',\r\n        realEstateName: 'Bank of America Tower',\r\n        realEstateNumber: 'US-FL-RE-1003115',\r\n        realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        openDate: null,\r\n        closeDate: null,\r\n        contractType: 'MANAGED',\r\n        companyId: 'PK001',\r\n        brandCode: 'CLH (PK1)',\r\n        applicableForDarma: true,\r\n        checked: false\r\n      },\r\n      {\r\n        id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd25',\r\n        serviceId: 'PA-1000428',\r\n        serviceIdName: 'Bank of America Tower Parking',\r\n        serviceType: 'Parking',\r\n        serviceGroupName: 'Parking',\r\n        realEstateName: 'Bank of America Tower',\r\n        realEstateNumber: 'US-FL-RE-1003115',\r\n        realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        openDate: null,\r\n        closeDate: null,\r\n        contractType: 'MANAGED',\r\n        companyId: 'PK001',\r\n        brandCode: 'CLH (PK1)',\r\n        applicableForDarma: true,\r\n        checked: false\r\n      }\r\n    ];\r\n    spyOn(component, 'getChangeLocationvalue').and.callThrough();\r\n    spyOn(authenticateService, 'getServiceId').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.apiCalls = [];\r\n    component.revisionSearchForm.patchValue({\r\n      revisionLocation: object\r\n    });\r\n    component.getChangeLocationvalue();\r\n    expect(component.getChangeLocationvalue).toHaveBeenCalled();\r\n    expect(authenticateService.getServiceId).toHaveBeenCalled();\r\n    component.apiCalls = [\r\n      expect(authenticateService.getServiceId).toHaveBeenCalled(),\r\n      expect(authenticateService.getServiceId).toHaveBeenCalled()\r\n    ];\r\n    forkJoin(component.apiCalls);\r\n  });\r\n\r\n  it('should filter service data', () => {\r\n    const object = [\r\n      {\r\n        \"id\": \"69236dfb-0a7a-40bd-9f1e-a2038bf56737\",\r\n        \"serviceIdType\": \"Transportation\",\r\n        \"serviceCode\": \"TR01\",\r\n        \"serviceCodeDescription\": \"Shuttle Service\"\r\n    }\r\n    ];\r\n    spyOn(component, 'getChangeServiceIdValue').and.callThrough();\r\n    spyOn(authenticateService, 'getServiceCodes').and.returnValue(of(object));\r\n    fixture.detectChanges();\r\n    component.apiCalls = [];\r\n    component.revisionSearchForm.patchValue({\r\n      revisionServiceId: object\r\n    });\r\n    component.getChangeServiceIdValue();\r\n    authenticateService.getServiceCodes(object[0].serviceIdType).subscribe(\r\n      res => component.serviceCodesByServiceType = res\r\n    );\r\n    expect(component.getChangeServiceIdValue).toHaveBeenCalled();\r\n    expect(authenticateService.getServiceCodes).toHaveBeenCalled();\r\n    expect(component.serviceCodesByServiceType).toEqual(object);\r\n    component.apiCalls = [\r\n      expect(authenticateService.getServiceCodes).toHaveBeenCalled(),\r\n      expect(authenticateService.getServiceCodes).toHaveBeenCalled()\r\n    ];\r\n    forkJoin(component.apiCalls);\r\n  })\r\n\r\n  it('should search revisions', () => {\r\n    spyOn(component, 'searchRevisions').and.callThrough();\r\n    fixture.detectChanges();\r\n    const serviceId = {\r\n      \"id\": \"1a09cae9-68f0-40f9-b0ee-38c501a2fa8d\",\r\n      \"serviceIdType\": \"Parking\",\r\n      \"serviceCode\": \"PA04\",\r\n      \"serviceCodeDescription\": \"Event\"\r\n    };\r\n    const serviceCode = {\r\n      \"id\": \"73ebc8a5-c742-4fd6-8b96-a37d8d7bd2aa\",\r\n      \"jobCode\": \"Valet Supervisor\",\r\n      \"directCost\": true,\r\n      \"indirectCost\": false,\r\n      \"sGandA\": false,\r\n      \"serviceCode\": \"PA04\"\r\n    };\r\n    component.revisionSearchForm.patchValue({\r\n      revisionLocation: [new Locations()],\r\n      revisionServiceId: [serviceId],\r\n      revisionServiceCode: [serviceCode],\r\n      revisionFromDate: '2021-03-12T05:45:03.864',\r\n      revisionToDate: '2021-03-18T05:45:03.864'\r\n    });\r\n    component.searchRevisions();\r\n    component.searchRevisionsFromChild.emit(component.revisionSearchForm);\r\n    expect(component.searchRevisions).toHaveBeenCalled();\r\n  });\r\n\r\n  describe('getLocationsBasedOnBrand', () => {\r\n    it('makes expected calls', () => {\r\n      const brandType = {\r\n        id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n        code: 'All'\r\n      };\r\n      component.loggedUserDetails = { brandCode: 'All' };\r\n      component.revisionSearchForm?.patchValue({ brandType });\r\n      const authenticateServiceStub: AuthenticateService = fixture.debugElement.injector.get(\r\n        AuthenticateService\r\n      );\r\n      const sweetAlertServiceStub: SweetAlertService = fixture.debugElement.injector.get(\r\n        SweetAlertService\r\n      );\r\n      spyOn(\r\n        authenticateServiceStub,\r\n        'getLocationsBasedOnBrand'\r\n      ).and.callThrough();\r\n      spyOn(sweetAlertServiceStub, 'showErrorInformation').and.callThrough();\r\n      component.getLocationsBasedOnBrand();\r\n      fixture.detectChanges();\r\n      expect(\r\n        authenticateServiceStub.getLocationsBasedOnBrand\r\n      ).toHaveBeenCalled();\r\n      expect(sweetAlertServiceStub.showErrorInformation).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('getChangeServiceIdValue', () => {\r\n    it('makes expected calls', () => {\r\n      const object = [\r\n        {\r\n          \"id\": \"69236dfb-0a7a-40bd-9f1e-a2038bf56737\",\r\n          \"serviceIdType\": \"Transportation\",\r\n          \"serviceCode\": \"TR01\",\r\n          \"serviceCodeDescription\": \"Shuttle Service\"\r\n        }\r\n      ];\r\n      const authenticateServiceStub: AuthenticateService = fixture.debugElement.injector.get(\r\n        AuthenticateService\r\n      );\r\n      const sweetAlertServiceStub: SweetAlertService = fixture.debugElement.injector.get(\r\n        SweetAlertService\r\n      );\r\n      spyOn(component, 'getChangeServiceIdValue').and.callThrough();\r\n      spyOn(\r\n        authenticateServiceStub,\r\n        'getServiceCodes'\r\n      ).and.callThrough();\r\n      spyOn(sweetAlertServiceStub, 'showErrorInformation').and.callThrough();\r\n      component.revisionSearchForm = new FormGroup({\r\n        revisionServiceId : new FormControl([])\r\n      });\r\n      component.revisionSearchForm.controls.revisionServiceId.setValue(object);\r\n      component.getChangeServiceIdValue();      \r\n      fixture.detectChanges();\r\n      expect(component.getChangeServiceIdValue).toHaveBeenCalled();\r\n      expect(\r\n        authenticateServiceStub.getServiceCodes\r\n      ).toHaveBeenCalled();\r\n      expect(sweetAlertServiceStub.showErrorInformation).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  it('should make the arrays empty on location change', () => {\r\n\r\n    spyOn(component, 'getChangeLocationvalue').and.callThrough();\r\n    component.revisionSearchForm = new FormGroup({\r\n      revisionLocation : new FormControl([])\r\n    });\r\n    component.getChangeLocationvalue();\r\n    component.revisionSearchForm.value.revisionLocation = null;\r\n    component.revisionSearchForm.controls.revisionLocation.value.length = 0;\r\n    expect(component.getChangeLocationvalue).toHaveBeenCalled()\r\n    expect(component.serviceCodesByServiceType).toEqual([]);\r\n    expect(component.serviceTypesByRealEstates).toEqual([]);\r\n  })\r\n\r\n  it('should make the arrays empty on serviceId change', () => {\r\n\r\n    spyOn(component, 'getChangeServiceIdValue').and.callThrough();\r\n    component.revisionSearchForm = new FormGroup({\r\n      revisionServiceId : new FormControl([])\r\n    });\r\n    component.getChangeServiceIdValue();\r\n    component.revisionSearchForm.value.revisionServiceId = null;\r\n    component.revisionSearchForm.controls.revisionServiceId.value.length = 0;\r\n    expect(component.getChangeServiceIdValue).toHaveBeenCalled()\r\n    expect(component.serviceCodesByServiceType).toEqual([]);\r\n  })\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\payroll-revision\\search-revision\\search-revision.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnDestroy' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChangeDetectorRef' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":26,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatCalendar' is defined but never used.","line":29,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDatepicker' is defined but never used.","line":29,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDateFormats' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Locations' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRevenueDTO' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatSelect' is defined but never used.","line":39,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":19},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·DATE_FORMATS,·MATERIAL_DATEPICKER_FORMATS·` with `␍⏎··DATE_FORMATS,␍⏎··MATERIAL_DATEPICKER_FORMATS␍⏎`","line":45,"column":9,"nodeType":null,"endLine":45,"endColumn":52,"fix":{"range":[1314,1357],"text":"\r\n  DATE_FORMATS,\r\n  MATERIAL_DATEPICKER_FORMATS\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'style' is defined but never used.","line":49,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2740,2743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2740,2743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2764,2767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2764,2767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2820,2823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2820,2823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2844,2847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2844,2847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":90,"column":3,"nodeType":"ClassProperty","messageId":"noInferrableType","endLine":90,"endColumn":45,"fix":{"range":[2935,2943],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `␍⏎····moment().format(DATE_FORMATS.DATE_PICKER_FORMAT)␍⏎··` with `moment().format(DATE_FORMATS.DATE_PICKER_FORMAT)`","line":95,"column":31,"nodeType":null,"endLine":97,"endColumn":3,"fix":{"range":[3133,3191],"text":"moment().format(DATE_FORMATS.DATE_PICKER_FORMAT)"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3216,3219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3216,3219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3246,3249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3246,3249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3267,3270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3267,3270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3285,3288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3285,3288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3301,3304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3301,3304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3330,3333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3330,3333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3372,3375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3372,3375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3414,3417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3414,3417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3469,3472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3469,3472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3496,3499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3496,3499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3606,3609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3606,3609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3639,3642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3639,3642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":151,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":151,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":155,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":155,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6978,6981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6978,6981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":212,"column":4,"nodeType":null,"endLine":212,"endColumn":6,"fix":{"range":[7077,7079],"text":""}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":214,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":214,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7624,7627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7624,7627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":268,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":268,"endColumn":28},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `␍⏎······`","line":270,"column":70,"nodeType":null,"endLine":270,"endColumn":70,"fix":{"range":[8836,8836],"text":"\r\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":271,"column":1,"nodeType":null,"endLine":271,"endColumn":1,"fix":{"range":[8852,8852],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `········` with `··········`","line":272,"column":1,"nodeType":null,"endLine":272,"endColumn":9,"fix":{"range":[8877,8885],"text":"          "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":273,"column":11,"nodeType":null,"endLine":273,"endColumn":11,"fix":{"range":[8961,8961],"text":"  "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8972,8975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8972,8975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":274,"column":1,"nodeType":null,"endLine":274,"endColumn":1,"fix":{"range":[8983,8983],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":275,"column":13,"nodeType":null,"endLine":275,"endColumn":13,"fix":{"range":[9051,9051],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":276,"column":11,"nodeType":null,"endLine":276,"endColumn":11,"fix":{"range":[9083,9083],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `··········` with `············`","line":277,"column":1,"nodeType":null,"endLine":277,"endColumn":11,"fix":{"range":[9087,9097],"text":"            "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":278,"column":1,"nodeType":null,"endLine":278,"endColumn":1,"fix":{"range":[9111,9111],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":279,"column":15,"nodeType":null,"endLine":279,"endColumn":15,"fix":{"range":[9176,9176],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `··············` with `················`","line":280,"column":1,"nodeType":null,"endLine":280,"endColumn":15,"fix":{"range":[9198,9212],"text":"                "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":281,"column":13,"nodeType":null,"endLine":281,"endColumn":13,"fix":{"range":[9272,9272],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":282,"column":1,"nodeType":null,"endLine":282,"endColumn":1,"fix":{"range":[9275,9275],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `········);` with `··········);␍⏎········}`","line":283,"column":1,"nodeType":null,"endLine":283,"endColumn":11,"fix":{"range":[9288,9298],"text":"          );\r\n        }"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `}`","line":285,"column":5,"nodeType":null,"endLine":285,"endColumn":6,"fix":{"range":[9313,9314],"text":""}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":295,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":295,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":299,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":299,"endColumn":17},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `␍⏎········moment().format(DATE_FORMATS.DATE_PICKER_FORMAT)␍⏎······` with `moment().format(DATE_FORMATS.DATE_PICKER_FORMAT)`","line":305,"column":32,"nodeType":null,"endLine":307,"endColumn":7,"fix":{"range":[9902,9968],"text":"moment().format(DATE_FORMATS.DATE_PICKER_FORMAT)"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":370,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":370,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":377,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":377,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":382,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":382,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":391,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":391,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mode' is defined but never used.","line":391,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":391,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":395,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":395,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":407,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":407,"endColumn":16}],"errorCount":20,"warningCount":47,"fixableErrorCount":20,"fixableWarningCount":0,"source":"import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  Inject,\r\n  OnDestroy,\r\n  ChangeDetectorRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { UserSessionService } from '../../../../shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  trigger,\r\n  style,\r\n  state,\r\n  animate,\r\n  transition,\r\n  query,\r\n  stagger\r\n} from '@angular/animations';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport * as moment from 'moment';\r\nimport { MatCalendar, MatDatepicker } from '@angular/material/datepicker';\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_FORMATS,\r\n  MatDateFormats\r\n} from '@angular/material/core';\r\nimport {\r\n  Locations,\r\n  IRevenueDTO\r\n} from 'src/app/shared/model/revenueSource.model';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport get from 'lodash.get';\r\n// material dependencies\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { DATE_FORMATS, MATERIAL_DATEPICKER_FORMATS } from 'src/app/shared/constants/app-constants';\r\nimport { Subject, forkJoin } from 'rxjs';\r\n\r\nclass CustomDateAdapter extends MomentDateAdapter {\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow') {\r\n    return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-search-revision',\r\n  templateUrl: './search-revision.component.html',\r\n  styleUrls: ['./search-revision.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\r\n      state('expanded', style({ height: '*' })),\r\n      transition(\r\n        'expanded <=> collapsed',\r\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')\r\n      )\r\n    ]),\r\n    trigger('logoAni', [\r\n      transition('* => *', [\r\n        query(':enter', style({ opacity: 0 }), { optional: true }),\r\n        query(\r\n          ':enter',\r\n          stagger('100ms', [animate('1s', style({ opacity: 1 }))]),\r\n          { optional: true }\r\n        )\r\n      ])\r\n    ])\r\n  ],\r\n  providers: [\r\n    { provide: DateAdapter, useClass: CustomDateAdapter },\r\n    { provide: MAT_DATE_FORMATS, useValue: MATERIAL_DATEPICKER_FORMATS }\r\n  ]\r\n})\r\nexport class SearchRevisionComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  @Output()\r\n  searchRevisionsFromChild: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() resetRevisionFilters: EventEmitter<any> = new EventEmitter<any>();\r\n  @ViewChild('locationSelect') locationSelect: MatSelect;\r\n  @Input() revisionType: string = 'Payroll';\r\n  revisionSearchForm: FormGroup;\r\n  public startDateIs = new Date(\r\n    moment().startOf('month').format(DATE_FORMATS.DATE_PICKER_FORMAT)\r\n  );\r\n  public endDateIs = new Date(\r\n    moment().format(DATE_FORMATS.DATE_PICKER_FORMAT)\r\n  );\r\n  loggedUserDetails: any = null;\r\n  BrandResponse: any = null;\r\n  role: any;\r\n  fromDate: any;\r\n  toDate: any;\r\n  realEstateLocations: any[] = [];\r\n  serviceTypesByRealEstates: any[] = [];\r\n  serviceCodesByServiceType: any[] = [];\r\n  public filteredLocations: ReplaySubject<any[]> = new ReplaySubject<any[]>(1);\r\n  private _onDestroy = new Subject<void>();\r\n  exampleHeader = searchCalenderHeader;\r\n  apiCalls: any[] = [];\r\n  finalServiceType: any[] = [];\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private alertService: SweetAlertService,\r\n    private authService: AuthenticateService,\r\n    private changeDetect: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // this.getLoadInitLocations();\r\n    this.revisionSearchForm = new FormGroup({\r\n      revisionLocation: new FormControl(null),\r\n      revisionServiceId: new FormControl([]),\r\n      revisionServiceCode: new FormControl([]),\r\n      revisionFromDate: new FormControl(this.startDateIs, Validators.required),\r\n      revisionToDate: new FormControl(this.endDateIs, Validators.required),\r\n      locFilterCtrl: new FormControl('')\r\n    });\r\n\r\n    this.userSessionService.currentUser.subscribe((res) => {\r\n      this.loggedUserDetails = res;\r\n    });\r\n    this.userSessionService.allReefBrands.subscribe(\r\n      (response) => (this.BrandResponse = response)\r\n    );\r\n\r\n    // this.role = this.loggedUserDetails.authorities[0].code;\r\n    this.role = get(this.loggedUserDetails, 'authorities[0].code');\r\n    // if (this.loggedUserDetails.brandCode !== 'All') {\r\n    this.getLocationsBasedOnBrand();\r\n    // }\r\n\r\n    /** New changes */\r\n    this.revisionSearchForm.controls.locFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterLocations();\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setInitialValue();\r\n  }\r\n\r\n  getLocationsBasedOnBrand() {\r\n    this.blockUI.start('Loading....');\r\n    const payloadObj = { id: '', code: '' };\r\n\r\n    payloadObj.id = this.loggedUserDetails?.brandId;\r\n    payloadObj.code = this.loggedUserDetails.brandCode;\r\n    this.authService.getLocationsBasedOnBrand(payloadObj).subscribe(\r\n      (response: Locations[]) => {\r\n        this.realEstateLocations = response;\r\n        for (const user of this.realEstateLocations) {\r\n          user.locationWithID = user.locationID + ' - ' + user.name;\r\n        }\r\n        this.filteredLocations.next(this.realEstateLocations.slice());\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        if (error && error?.status !== 417) {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  private setInitialValue() {\r\n    this.filteredLocations\r\n      .pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // setting the compareWith property to a comparison function\r\n        // triggers initializing the selection according to the initial value of\r\n        // the form control (i.e. _initializeSelection())\r\n        // this needs to be done after the filteredBanks are loaded initially\r\n        // and after the mat-option elements are available\r\n        this.locationSelect.compareWith = (a: Locations, b: Locations) =>\r\n          a && b && a.id === b.id;\r\n      });\r\n  }\r\n\r\n  private filterLocations() {\r\n    if (!this.realEstateLocations) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.revisionSearchForm.controls.locFilterCtrl.value;\r\n    if (!search) {\r\n      this.filteredLocations.next(this.realEstateLocations.slice());\r\n      return;\r\n    } else {\r\n      search = search.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredLocations.next(\r\n      this.realEstateLocations.filter(\r\n        (location: any) =>\r\n          location.locationWithID.toLowerCase().indexOf(search) > -1\r\n      )\r\n    );\r\n  }  \r\n\r\n  getChangeLocationvalue() {\r\n    const arrays = [];\r\n    this.blockUI.start('Loading....');\r\n    this.apiCalls.length = 0;\r\n    this.apiCalls = [];\r\n    this.finalServiceType.length = 0;\r\n    this.finalServiceType = [];\r\n    this.revisionSearchForm.controls.revisionLocation.value.forEach(\r\n      (element) => {\r\n        if (element.id) {\r\n          this.apiCalls.push(this.authService.getServiceId(element.id));\r\n        }\r\n      }\r\n    );\r\n    if (this.apiCalls.length > 0) {\r\n      forkJoin(this.apiCalls).subscribe(\r\n        (response: any) => {\r\n          if (response.length > 0) {\r\n            response.forEach((data) => {\r\n              Array.prototype.push.apply(arrays, data);\r\n            });\r\n            this.serviceTypesByRealEstates = arrays;\r\n            for (const item of this.serviceTypesByRealEstates) {\r\n              item.serviceNameWithID =\r\n                item.serviceId +\r\n                ' - ' +\r\n                item.serviceIdName +\r\n                '(' +\r\n                item.realEstateNumber +\r\n                ')';\r\n            }\r\n            this.blockUI.stop();\r\n          }\r\n        },\r\n        (error) => {\r\n          if (error && error?.status !== 417) {\r\n            this.blockUI.stop();\r\n            this.alertService.showErrorInformation(error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    if (\r\n      this.revisionSearchForm.value.revisionLocation &&\r\n      this.revisionSearchForm.controls.revisionLocation.value.length === 0\r\n    ) {\r\n      this.serviceTypesByRealEstates = [];\r\n      this.serviceCodesByServiceType = [];\r\n    }\r\n\r\n    this.blockUI.stop();\r\n  }\r\n\r\n  getChangeServiceIdValue() {\r\n    this.blockUI.start('Loading....');\r\n    this.revisionSearchForm.controls.revisionServiceId.value.forEach((element) => {\r\n      if (element.id) {\r\n        this.authService.getServiceCodes(element.serviceType).subscribe(\r\n          (response: any) => {\r\n            this.serviceCodesByServiceType = response;\r\n            this.blockUI.stop();\r\n          },\r\n          (error) => {\r\n            if (error && error?.status !== 417) {\r\n              this.blockUI.stop();\r\n              this.alertService.showErrorInformation(error);\r\n            }\r\n          }\r\n        );\r\n      }\r\n    });\r\n    if (\r\n      this.revisionSearchForm.value.revisionServiceId &&\r\n      this.revisionSearchForm.controls.revisionServiceId.value.length === 0\r\n    ) {\r\n      this.serviceCodesByServiceType = [];\r\n    }\r\n    this.blockUI.stop();\r\n  }\r\n\r\n  searchRevisions() {\r\n    this.searchRevisionsFromChild.emit(this.revisionSearchForm);\r\n  }\r\n\r\n  resetFilters() {\r\n    this.serviceTypesByRealEstates = [];\r\n    this.revisionSearchForm.reset({\r\n      revisionFromDate: new Date(\r\n        moment().startOf('month').format(DATE_FORMATS.DATE_PICKER_FORMAT)\r\n      ),\r\n      revisionToDate: new Date(\r\n        moment().format(DATE_FORMATS.DATE_PICKER_FORMAT)\r\n      )\r\n    });\r\n    this.resetRevisionFilters.emit(this.revisionSearchForm);\r\n  }\r\n}\r\n\r\n/** Custom header component for datepicker. */\r\n@Component({\r\n  selector: 'example-header',\r\n  styles: [\r\n    `\r\n      .example-header {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 0.5em;\r\n      }\r\n\r\n      .example-header-label {\r\n        flex: 1;\r\n        height: 1em;\r\n        font-weight: 500;\r\n        text-align: center;\r\n      }\r\n\r\n      .example-double-arrow .mat-icon {\r\n        margin: -22%;\r\n      }\r\n    `\r\n  ],\r\n  template: `\r\n    <div class=\"example-header\">\r\n      <button mat-icon-button (click)=\"previousClicked()\">\r\n        <mat-icon>keyboard_arrow_left</mat-icon>\r\n      </button>\r\n      <span\r\n        role=\"button\"\r\n        (click)=\"openaYear('year')\"\r\n        class=\"example-header-label cursor-pointer\"\r\n        >{{ periodLabel }}</span\r\n      >\r\n\r\n      <button mat-icon-button (click)=\"nextClicked()\">\r\n        <mat-icon>keyboard_arrow_right</mat-icon>\r\n      </button>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class searchCalenderHeader<D> implements OnDestroy {\r\n  private _destroyed = new Subject<void>();\r\n\r\n  constructor(\r\n    private _datePicker: MatDatepicker<D>,\r\n    private _calendar: MatCalendar<D>,\r\n    private _dateAdapter: DateAdapter<D>,\r\n    @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n    cdr: ChangeDetectorRef\r\n  ) {\r\n    _calendar.stateChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => cdr.markForCheck());\r\n  }\r\n\r\n  public todayClicked() {\r\n    this._calendar.activeDate = this._dateAdapter.today();\r\n    this._calendar._dateSelected(this._calendar.activeDate);\r\n    this._datePicker.select(this._dateAdapter.today());\r\n    this._datePicker.close();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  get periodLabel() {\r\n    return this._dateAdapter\r\n      .format(\r\n        this._calendar.activeDate,\r\n        this._dateFormats.display.monthYearLabel\r\n      )\r\n      .toLocaleUpperCase();\r\n  }\r\n\r\n  public openaYear(mode: 'month' | 'year') {\r\n    this._calendar.currentView = 'multi-year';\r\n  }\r\n\r\n  previousClicked() {\r\n    // mode: 'month' | 'year' | 'multi-year'\r\n    let mode = 'month';\r\n    if (this._calendar.currentView === 'multi-year') {\r\n      mode = 'year';\r\n    }\r\n    this._calendar.activeDate =\r\n      mode === 'month'\r\n        ? this._dateAdapter.addCalendarMonths(this._calendar.activeDate, -1)\r\n        : this._dateAdapter.addCalendarYears(this._calendar.activeDate, -1);\r\n  }\r\n\r\n  nextClicked() {\r\n    // mode: 'month' | 'year' | 'multi-year'\r\n    let mode = 'month';\r\n    if (this._calendar.currentView === 'multi-year') {\r\n      mode = 'year';\r\n    }\r\n    this._calendar.activeDate =\r\n      mode === 'month'\r\n        ? this._dateAdapter.addCalendarMonths(this._calendar.activeDate, 1)\r\n        : this._dateAdapter.addCalendarYears(this._calendar.activeDate, 1);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\revenue-sources\\add-update-source\\add-update-source.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DebugElement' is defined but never used.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":23,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Locations' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is defined but never used.","line":33,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'de' is defined but never used.","line":36,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authenticateService' is assigned a value but never used.","line":66,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":67,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":68,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":69,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userSessionService' is assigned a value but never used.","line":70,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":23}],"errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { AddUpdateSourceComponent } from './add-update-source.component';\r\nimport {\r\n  HttpClientTestingModule,\r\n  HttpTestingController\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler\r\n} from '@angular/common/http';\r\nimport { RouterModule, Router } from '@angular/router';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators, FormBuilder } from '@angular/forms';\r\nimport { DebugElement } from '@angular/core';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport {\r\n  LocationDTO,\r\n  Locations\r\n} from 'src/app/shared/model/revenueSource.model';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\ndescribe('DifferedAmountComponent', () => {\r\n  let component: AddUpdateSourceComponent;\r\n  let fixture: ComponentFixture<AddUpdateSourceComponent>;\r\n  let apiService: ApiService;\r\n  let authenticateService: AuthenticateService;\r\n  let httpMock: HttpTestingController;\r\n  let de: DebugElement;\r\n  let router: Router;\r\n  let httpClient: HttpClient;\r\n  let userSessionService: UserSessionService;\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        RouterTestingModule,\r\n        BrowserAnimationsModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [AddUpdateSourceComponent],\r\n      providers: [\r\n        ApiService,\r\n        AuthenticateService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        FormBuilder,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    httpMock = TestBed.get(HttpTestingController);\r\n    router = TestBed.inject(Router);\r\n    httpClient = TestBed.get(HttpClient);\r\n    userSessionService = TestBed.get(AuthenticateService);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(AddUpdateSourceComponent);\r\n    component = fixture.componentInstance;\r\n    // fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should filter locationData proper', () => {\r\n    const locationObj = new LocationDTO();\r\n    locationObj.locationWithID = 'US-1252';\r\n    spyOn(component, 'filterRealEstatesLocations').and.callThrough();\r\n    // fixture.detectChanges();\r\n    component.filterRealEstatesLocations();\r\n    component.locations = [locationObj];\r\n    component.sourceForm.patchValue({\r\n      realEstateFilterCtrl: 'test'\r\n    });\r\n    expect(component.filterRealEstatesLocations).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should filter locationData proper', () => {\r\n    const locationObj = new LocationDTO();\r\n    locationObj.locationWithID = 'US-1252';\r\n    spyOn(component, 'filterRealEstatesLocations').and.callThrough();\r\n    // fixture.detectChanges();\r\n    component.filterRealEstatesLocations();\r\n    component.locations = [locationObj];\r\n    expect(component.filterRealEstatesLocations).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should filter locationData proper', () => {\r\n    const locationObj = new LocationDTO();\r\n    locationObj.locationWithID = 'US-1252';\r\n    spyOn(component, 'filterRealEstatesLocations').and.callThrough();\r\n    // fixture.detectChanges();\r\n    component.filterRealEstatesLocations();\r\n    component.locations = [locationObj];\r\n    component.sourceForm.patchValue({\r\n      realEstateFilterCtrl: 'test'\r\n    });\r\n    expect(component.filterRealEstatesLocations).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should filter locFilterCtrl proper', () => {\r\n    const locationObj = new LocationDTO();\r\n    locationObj.locationWithID = 'US-1252';\r\n    spyOn(component, 'filterLocations').and.callThrough();\r\n    // fixture.detectChanges();\r\n    component.filterLocations();\r\n    component.locations = [locationObj];\r\n    component.sourceForm.patchValue({\r\n      locFilterCtrl: 'test'\r\n    });\r\n    expect(component.filterLocations).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should filter locFilterCtrl proper', () => {\r\n    const locationObj = new LocationDTO();\r\n    locationObj.locationWithID = 'US-1252';\r\n    spyOn(component, 'filterLocations').and.callThrough();\r\n    // fixture.detectChanges();\r\n    component.filterLocations();\r\n    component.locations = [locationObj];\r\n    component.sourceForm.patchValue({\r\n      locFilterCtrl: ''\r\n    });\r\n    expect(component.filterLocations).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call getAllServiceIds Republic Parking', () => {\r\n    const sourceObject = {\r\n      id: '8ef4afcf-5523-4979-8c1e-df804513aa4a',\r\n      bankAccountsDTO: {\r\n        id: 'c5f51527-ff0b-4636-9f06-1e6332cda81d',\r\n        contactTypesID: null,\r\n        bankName: 'Suntrust Operating Account',\r\n        description: 'Suntrust Operating Account',\r\n        accountType: null,\r\n        accountNumber: '1000045771960',\r\n        routingNumber: null,\r\n        glNumber: null,\r\n        oneGL: null,\r\n        status: 'A',\r\n        uniqueIdentifier: 'RB855',\r\n        bankAccountsLocationLinkDTO: [],\r\n        brandDTO: null\r\n      },\r\n      locationDTO: {\r\n        id: '17e2ef40-cbd8-4ab3-9ae1-17ce5988aecd',\r\n        locationID: 'US-FL-RE-1003301',\r\n        name: '350 Las Olas',\r\n        clientLegalName: null,\r\n        address1: '350 E Las Olas Blvd',\r\n        address2: null,\r\n        city: 'Fort Lauderdale',\r\n        county: null,\r\n        state: 'FL',\r\n        zipCode: '33301',\r\n        status: 'A',\r\n        phone: null,\r\n        cell: null,\r\n        fax: null,\r\n        ext: null,\r\n        companyName: 'CLH (Lanier)',\r\n        executive: null,\r\n        serviceType: null,\r\n        contractType: null,\r\n        applicableForDarma: true,\r\n        noofSpaces: null,\r\n        subsidyType: null,\r\n        parentLocationID: 'L21085200',\r\n        parentLocationName: '350 Las Olas',\r\n        notesDTO: [],\r\n        tenderTypesLnkDTO: [],\r\n        revenueTypesLnkDTO: [],\r\n        bankAccountsLocationLinkDTO: [],\r\n        burdensDTO: [],\r\n        locationMoreInfoDTO: null,\r\n        darmaUser: null,\r\n        brandCode: null,\r\n        brandDTO: null,\r\n        dataView: null,\r\n        hoursOfOperation: null,\r\n        noOfGarageLevels: null,\r\n        noOfEntryLanes: null,\r\n        noOfExitLanes: null,\r\n        parcsManufacture: null,\r\n        dateOfLastMonthlyRateIncrease: null,\r\n        dateOfLastTransientRateIncrease: null,\r\n        typeOfFacility: null,\r\n        dueDay: null,\r\n        settlementDay: null,\r\n        iconName: null,\r\n        primaryContactId: null,\r\n        locationNotes: null,\r\n        active: null,\r\n        deleted: null\r\n      },\r\n      revenueTypesDTO: {\r\n        id: '6076b80c-6fae-4f47-9978-c62e4e8ee03e',\r\n        code: 'PA012',\r\n        description: 'Due to location',\r\n        glNumber: '1212',\r\n        oneGL: null,\r\n        uniqueIdentifier: 'RR198',\r\n        revenueTypesLocationLinkDTO: [],\r\n        status: 'A',\r\n        contraGlNumber: '1212',\r\n        ptlGLNumber: null\r\n      },\r\n      status: 'E',\r\n      tenderTypesDTO: {\r\n        id: '3ab65d13-1818-422c-86b5-3d45bab7c18c',\r\n        code: 'Amex',\r\n        description: 'Amex',\r\n        uniqueIdentifier: 'RT577',\r\n        isPCI: true,\r\n        status: 'A',\r\n        tenderTypesLnkDTO: [],\r\n        glCode: '105480'\r\n      },\r\n      submittedBy: null,\r\n      postedBy: null,\r\n      transactionDate: '2021-03-19T00:00:00.000',\r\n      amount: 10,\r\n      reconciledDate: null,\r\n      postingDate: null,\r\n      subAccountCode: 'B',\r\n      deferredYn: 'N',\r\n      deferredMonth1: null,\r\n      deferredYear1: null,\r\n      deferredAmount1: null,\r\n      deferredMonth2: null,\r\n      deferredYear2: null,\r\n      deferredAmount2: null,\r\n      deferredMonth3: null,\r\n      deferredYear3: null,\r\n      deferredAmount3: null,\r\n      deferredMonth4: null,\r\n      deferredYear4: null,\r\n      deferredAmount4: null,\r\n      deferredMonth5: null,\r\n      deferredYear5: null,\r\n      deferredAmount5: null,\r\n      deferredMonth6: null,\r\n      deferredYear6: null,\r\n      deferredAmount6: null,\r\n      deferredMonth7: null,\r\n      deferredYear7: null,\r\n      deferredAmount7: null,\r\n      deferredMonth8: null,\r\n      deferredYear8: null,\r\n      deferredAmount8: null,\r\n      deferredMonth9: null,\r\n      deferredYear9: null,\r\n      deferredAmount9: null,\r\n      deferredMonth10: null,\r\n      deferredYear10: null,\r\n      deferredAmount10: null,\r\n      deferredMonth11: null,\r\n      deferredYear11: null,\r\n      deferredAmount11: null,\r\n      deferredMonth12: null,\r\n      deferredYear12: null,\r\n      deferredAmount12: null,\r\n      depositIdentifier: 'PA-1000506-607BEED8-03192021130343',\r\n      correctiveYn: 'N',\r\n      correctiveDescr: null,\r\n      postedNavisionDate: null,\r\n      exportNavisionDate: null,\r\n      pci: false,\r\n      submittedDate: null,\r\n      sourceNotesDTO: [],\r\n      revenueDTO: {\r\n        id: 'ffef0225-3d27-419f-9977-43dbe2cbe4bc',\r\n        locationDTO: null,\r\n        bankAccountsDTO: null,\r\n        postedBy: null,\r\n        postingDate: null,\r\n        status: null,\r\n        revenueDate: null,\r\n        amount: null,\r\n        numberOfDeposits: null,\r\n        submittedBy: null,\r\n        submittedDate: null,\r\n        reconciledDate: null,\r\n        depositIdentifier: null,\r\n        tenderTypesDTO: null,\r\n        notesDTO: [],\r\n        sourcesDTO: [],\r\n        markForCorrection: null,\r\n        bankAmount: null,\r\n        verificationStatus: null,\r\n        markForCorrectionDate: null,\r\n        exportNavisionDate: null,\r\n        exportNavisionBy: null,\r\n        corrInc: null,\r\n        serviceDTO: null\r\n      },\r\n      exportNavisionBy: null,\r\n      bankAmount: null,\r\n      carCount: null,\r\n      taxExemption: true,\r\n      dueToLocation: 'US-FL-RE-1003115',\r\n      payor: 'self',\r\n      dueToLocAmount: '10',\r\n      checkNumber: '1234',\r\n      serviceDTO: {\r\n        id: 'efab516b-7f0e-4683-ab00-a1eff2ae5607',\r\n        serviceId: 'PA-1000506',\r\n        serviceIdName: 'Las Olas Events Parking Event',\r\n        serviceType: 'Parking',\r\n        serviceGroupName: 'Parking',\r\n        realEstateName: '350 Las Olas',\r\n        realEstateNumber: 'US-FL-RE-1003301',\r\n        realEstateId: '17e2ef40-cbd8-4ab3-9ae1-17ce5988aecd',\r\n        openDate: null,\r\n        closeDate: null,\r\n        contractType: 'LEASED',\r\n        companyId: 'PK001',\r\n        brandCode: 'CLH (Lanier)',\r\n        applicableForDarma: true\r\n      }\r\n    };\r\n    const sourceIs = { index: 0, sourceObj: sourceObject };\r\n    spyOn(component, 'getAllServiceIds').and.callThrough();\r\n    // fixture.detectChanges();\r\n    const locationObj = new LocationDTO();\r\n    locationObj.brandCode = 'Republic Parking';\r\n    component.getAllServiceIds();\r\n    component.editSourceObjectIs = sourceIs;\r\n    component.sourceForm.patchValue({\r\n      realEstate: locationObj\r\n    });\r\n    expect(component.getAllServiceIds).toHaveBeenCalled();\r\n    expect(\r\n      component.sourceForm.value.realEstate.brandCode.toLocaleLowerCase()\r\n    ).toEqual('republic parking');\r\n    expect(component.editSourceObjectIs).toBe(sourceIs);\r\n  });\r\n\r\n  it('should call onChangeSourceRevenueType', () => {\r\n    spyOn(component, 'onChangeSourceRevenueType').and.callThrough();\r\n    // fixture.detectChanges();\r\n    component.onChangeSourceRevenueType();\r\n    expect(component.onChangeSourceRevenueType).toHaveBeenCalled();\r\n    component.getSourceRevenueType.emit('585');\r\n  });\r\n\r\n  it('should call onChangeCheckDeferred', () => {\r\n    const revenueObj = {\r\n      id: '3649513f-cc68-4804-9f26-443f22dcb986',\r\n      revenueTypesDTO: {\r\n        id: '6076b80c-6fae-4f47-9978-c62e4e8ee03e',\r\n        code: 'PA012',\r\n        description: 'Due to location',\r\n        glNumber: '1212',\r\n        oneGL: null,\r\n        uniqueIdentifier: 'RR198',\r\n        revenueTypesLocationLinkDTO: [],\r\n        status: 'A',\r\n        contraGlNumber: '1212',\r\n        ptlGLNumber: null\r\n      },\r\n      locationDTO: null,\r\n      status: 'A',\r\n      serviceDTO: null\r\n    };\r\n    spyOn(component, 'onChangeCheckDeferred').and.callThrough();\r\n    // fixture.detectChanges();\r\n    component.onChangeCheckDeferred(revenueObj);\r\n    expect(component.onChangeCheckDeferred).toHaveBeenCalled();\r\n    // component.getSourceRevenueType.emit('585');\r\n  });\r\n\r\n  it('should call onChangeCheckDeferred', () => {\r\n    spyOn(component, 'onChangeCheckDeferred').and.callThrough();\r\n    const revenueObj = {\r\n      id: '3649513f-cc68-4804-9f26-443f22dcb986',\r\n      revenueTypesDTO: {\r\n        id: '6076b80c-6fae-4f47-9978-c62e4e8ee03e',\r\n        code: 'PA012',\r\n        description: 'Deferred Monthly',\r\n        glNumber: '1212',\r\n        oneGL: null,\r\n        uniqueIdentifier: 'RR198',\r\n        revenueTypesLocationLinkDTO: [],\r\n        status: 'A',\r\n        contraGlNumber: '1212',\r\n        ptlGLNumber: null\r\n      },\r\n      locationDTO: null,\r\n      status: 'A',\r\n      serviceDTO: null\r\n    };\r\n    // fixture.detectChanges();\r\n    component.onChangeCheckDeferred(revenueObj);\r\n    component.sourceForm.patchValue({\r\n      revenueTypesDTO: revenueObj\r\n    });\r\n    expect(component.onChangeCheckDeferred).toHaveBeenCalled();\r\n    // component.getSourceRevenueType.emit('585');\r\n    component.dueToLocFieldsFlag = true;\r\n    component.sourceForm.controls.sourcedeferredCounter.setValidators([\r\n      Validators.required\r\n    ]);\r\n    component.dueToLocFieldsFlag = false;\r\n    component.sourceForm.controls.payor.clearValidators();\r\n    component.sourceForm.controls.checkNumber.clearValidators();\r\n    component.sourceForm.controls.dueToLocation.clearValidators();\r\n  });\r\n\r\n  it('should call onChangeAmountCheck', () => {\r\n    spyOn(component, 'onChangeAmountCheck').and.callThrough();\r\n    const event = {\r\n      target: { value: '' }\r\n    };\r\n    component.onChangeAmountCheck(event);\r\n    expect(component.onChangeAmountCheck).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call onClickCancel', () => {\r\n    spyOn(component, 'onClickCancel').and.callThrough();\r\n    component.onClickCancel();\r\n    expect(component.onClickCancel).toHaveBeenCalled();\r\n  });\r\n  it('should call onClickSaveEditNewSource', () => {\r\n    spyOn(component, 'onClickSaveEditNewSource').and.callThrough();\r\n    component.onClickSaveEditNewSource(true, 0);\r\n    expect(component.onClickSaveEditNewSource).toHaveBeenCalled();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\revenue-sources\\add-update-source\\add-update-source.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChangeDetectorRef' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SimpleChanges' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormBuilder' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormGroup' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormArray' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Subscription' is defined but never used.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":24,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RevenueTypesLocations' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Locations' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRealEstateServicesIds' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LocationDTO' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatTable' is defined but never used.","line":35,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":36,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateService' is defined but never used.","line":38,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":39,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":41,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2221,2224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2221,2224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2248,2251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2248,2251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2313,2316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2313,2316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":5,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":8,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2346,2349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2346,2349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2457,2460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2457,2460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2633,2636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2633,2636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2714,2717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2714,2717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2749,2752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2749,2752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2784,2787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2784,2787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2993,2996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2993,2996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3105,3108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3105,3108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3129,3132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3129,3132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3178,3181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3178,3181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3202,3205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3202,3205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3249,3252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3249,3252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3273,3276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3273,3276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3325,3328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3325,3328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3349,3352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3349,3352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3402,3405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3402,3405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3426,3429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3426,3429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3472,3475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3472,3475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3496,3499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3496,3499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3549,3552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3549,3552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3573,3576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3573,3576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3844,3847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3844,3847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3940,3943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3940,3943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":152,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":152,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":179,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":179,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":197,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":197,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":201,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":201,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":222,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":222,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":243,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":243,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":268,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":268,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":300,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":300,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":404,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":404,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":411,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":411,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed.","line":411,"column":28,"nodeType":"Identifier","messageId":"missingArgType","endLine":411,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":478,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":478,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed.","line":478,"column":26,"nodeType":"Identifier","messageId":"missingArgType","endLine":478,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":493,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":493,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed.","line":493,"column":31,"nodeType":"Identifier","messageId":"missingArgType","endLine":493,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":494,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":494,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18925,18928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18925,18928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":540,"column":19,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":540,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":546,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":546,"endColumn":66},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'editIndex' should be typed with a non-any type.","line":546,"column":48,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":546,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":546,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":546,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20664,20667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20664,20667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"warningCount":64,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Component,\r\n  forwardRef,\r\n  ChangeDetectorRef,\r\n  OnInit,\r\n  Output,\r\n  Input,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ViewChild,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport {\r\n  NG_VALUE_ACCESSOR,\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl,\r\n  NG_VALIDATORS,\r\n  FormArray\r\n} from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport { UserSessionService } from '../../../../shared/services/user-session.services';\r\nimport {\r\n  RevenueTypesLocations,\r\n  Locations,\r\n  IRealEstateServicesIds,\r\n  LocationDTO\r\n} from '../../../../shared/model/revenueSource.model';\r\nimport { AppConstants } from 'src/app/shared/constants/app-constants';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\r\nimport { Subject } from 'rxjs';\r\nimport { MatTable } from '@angular/material/table';\r\nimport { UserResponseModel } from 'src/app/shared/model/loginApiResponse.model';\r\nimport get from 'lodash.get';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { NgBlockUI, BlockUI } from 'ng-block-ui';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\n\r\nexport interface IRevenueFormData {\r\n  revenueLocationName: LocationDTO;\r\n  revenueServiceId: '';\r\n  revenueAmount: '';\r\n  revenueTenderType: '';\r\n  revenueBankAccount: '';\r\n  revenueDepositIdentifier: '';\r\n  revenueFromDate: '';\r\n}\r\n\r\n@Component({\r\n  selector: 'add-update-source',\r\n  templateUrl: './add-update-source.component.html',\r\n  styleUrls: ['./add-update-source.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => AddUpdateSourceComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => AddUpdateSourceComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AddUpdateSourceComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  sourceForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  public filteredLocations: ReplaySubject<any[]> = new ReplaySubject<any[]>(1);\r\n  public filteredRealEstatesLocations: ReplaySubject<any[]> = new ReplaySubject<\r\n    any[]\r\n  >(1);\r\n  private _onDestroy = new Subject<void>();\r\n  @ViewChild('differTable') differTable: MatTable<any>;\r\n  @Input() isEditSourceIs: boolean;\r\n  @Input() isNewSource: boolean;\r\n  @Input() hiddenTempIdIs: boolean;\r\n  @Input() sourceIdIs: boolean;\r\n  @Input() serviceTypesAre: any[] = [];\r\n  @Input() locationDTOis: LocationDTO;\r\n  @Input() sourceServiceIs: any;\r\n  @Input() editSourceAmount: any;\r\n  @Input() sourceDeferredYn: any;\r\n  @Input() displayForLocation: boolean;\r\n  @Input() isCorrectionFlag: boolean;\r\n  @Input() locations: LocationDTO[] = [];\r\n  @Input() revenueFormDataIs: IRevenueFormData;\r\n  @Input() editSourceObjectIs: any;\r\n  @Input() revenueTypesSub: RevenueTypesLocations[] = [];\r\n  @Output() getSourceRevenueType: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() checkDeferred: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() amountCheck: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() setDeferredCount: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() getSourceFormData: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() cancelEdit: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() saveEditNewSource: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  public appConstantsDifferOptions = AppConstants.options;\r\n  public appConstantsUserRoleCodes = AppConstants.userRoleCodes;\r\n  private overAllDeferredCount = 12;\r\n  displayedColumns = ['differedMonth', 'differedYear', 'differedAmount'];\r\n  public userRoleIs: any;\r\n  public dueToLocFieldsFlag: boolean;\r\n  updateRevenueFields = false;\r\n  realEstateValue: any;\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private alertService: SweetAlertService,\r\n    private authService: AuthenticateService,\r\n    private translate: TranslateService,\r\n    private changeDetectIs: ChangeDetectorRef,\r\n    private userSessionService: UserSessionService\r\n  ) {\r\n    this.userSessionService.selectedLanguage.subscribe((data) => {\r\n      this.translate.use(data);\r\n      this.translate.setDefaultLang(data);\r\n    });\r\n    // this.realEstateValue = this.locationDTOis;\r\n    this.sourceForm = this.fb.group({\r\n      sourceServiceName: new FormControl('', Validators.required),\r\n      sourceId: new FormControl(''),\r\n      sourceRevenueType: new FormControl(null, Validators.required),\r\n      sourceAmount: new FormControl(null, Validators.required),\r\n      carCount: new FormControl(null),\r\n      taxExemption: new FormControl(null),\r\n      hiddenTempIdIs: new FormControl(''),\r\n      dueToLocation: new FormControl(null),\r\n      realEstate: new FormControl('', Validators.required),\r\n      sourcedeferredCounter: new FormControl(''),\r\n      payor: new FormControl('') /** required when due to location code 670 */,\r\n      checkNumber: new FormControl(\r\n        ''\r\n      ) /** required when due to location code 670 */,\r\n      note: new FormControl({ value: '', disabled: true }),\r\n      differedAmounts: this.fb.array([]),\r\n      locFilterCtrl: new FormControl(''),\r\n      realEstateFilterCtrl: new FormControl(''),\r\n      differedAmountsIs: new FormControl([])\r\n    });\r\n    this.userSessionService.currentUser.subscribe(\r\n      (res: UserResponseModel) =>\r\n        (this.userRoleIs = get(res, 'authorities[0].code'))\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sourceForm.valueChanges.subscribe(() => {\r\n      this.getSourceFormData.emit(this.sourceForm);\r\n    });\r\n    this.sourceForm.controls?.locFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterLocations();\r\n      });\r\n\r\n    this.sourceForm.controls.realEstateFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterRealEstatesLocations();\r\n      });\r\n    this.filteredLocations.next(this.locations.slice());\r\n    this.filteredRealEstatesLocations.next(this.locations.slice());\r\n    this.setEditableObject();\r\n    if (\r\n      this.userRoleIs === this.appConstantsUserRoleCodes.ROLE_DARMA_OWNER &&\r\n      this.isCorrectionFlag\r\n    ) {\r\n      this.sourceForm.controls.note.setValidators([Validators.required]);\r\n      this.sourceForm.controls.note.enable();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.editSourceObjectIs || changes.revenueTypesSub) {\r\n      this.setEditableObject();\r\n    }\r\n    if (changes.revenueFormDataIs && !this.editSourceObjectIs) {\r\n      const location = this.locations.find(\r\n        (loc: LocationDTO) => loc.locationID === this.locationDTOis.locationID\r\n      );\r\n      this.sourceForm.controls['realEstate'].patchValue(location);\r\n      const serviceDToIs = this.serviceTypesAre.find(\r\n        (service: IRealEstateServicesIds) =>\r\n          service.serviceId === this.sourceServiceIs.serviceId\r\n      );\r\n      this.sourceForm.controls.sourceServiceName.patchValue(serviceDToIs);\r\n    }\r\n  }\r\n\r\n  ///////// preparing dynamic differ Amount Array Form ////////\r\n  get differedAmountsIs() {\r\n    return this.sourceForm.get('differedAmounts') as FormArray;\r\n  }\r\n\r\n  filterLocations() {\r\n    if (!this.locations) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.sourceForm.controls?.locFilterCtrl?.value;\r\n    if (!search) {\r\n      this.filteredLocations.next(this.locations.slice());\r\n      return;\r\n    } else {\r\n      search = search?.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredLocations.next(\r\n      this.locations.filter(\r\n        (location: Locations) =>\r\n          location?.name?.toLowerCase()?.indexOf(search) > -1\r\n      )\r\n    );\r\n  }\r\n\r\n  filterRealEstatesLocations() {\r\n    if (!this.locations) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.sourceForm.controls.realEstateFilterCtrl?.value;\r\n    if (!search) {\r\n      this.filteredRealEstatesLocations.next(this.locations.slice());\r\n      return;\r\n    } else {\r\n      search = search?.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredRealEstatesLocations.next(\r\n      this.locations.filter(\r\n        (location: LocationDTO) =>\r\n          location?.locationWithID?.toLowerCase().indexOf(search) > -1\r\n      )\r\n    );\r\n  }\r\n\r\n  getAllServiceIds() {\r\n    this.serviceTypesAre = [];\r\n    this.serviceTypesAre.length = 0;\r\n    this.sourceServiceIs = null;\r\n    const clhCheck = this.sourceForm.value?.realEstate?.brandCode?.toLocaleLowerCase();\r\n    if (\r\n      this.sourceForm &&\r\n      this.sourceForm.value &&\r\n      ((clhCheck && clhCheck === 'republic parking') ||\r\n        clhCheck?.includes('clh'))\r\n    ) {\r\n      if (this.editSourceObjectIs && this.editSourceObjectIs.sourceObj) {\r\n        const taxValue = this.editSourceObjectIs.sourceObj.taxExemption\r\n          ? this.editSourceObjectIs.sourceObj.taxExemption\r\n          : false;\r\n        this.sourceForm.controls['taxExemption'].patchValue(taxValue);\r\n      } else {\r\n        this.sourceForm.controls['taxExemption'].patchValue(false);\r\n      }\r\n    } else {\r\n      this.sourceForm.controls['taxExemption'].patchValue(null);\r\n    }\r\n    this.getServiceIdDetails();\r\n  }\r\n\r\n  getServiceIdDetails() {\r\n    this.blockUI.start('Loading....');\r\n    this.serviceTypesAre = [];\r\n    const locationId = this.sourceForm.controls.realEstate.value.id;\r\n    this.authService.getServiceId(locationId).subscribe(\r\n      (response: IRealEstateServicesIds[]) => {\r\n        this.serviceTypesAre = response;\r\n        this.serviceTypesAre.forEach((service: IRealEstateServicesIds) => {\r\n          service.serviceNameWithID = `${service.serviceId}-${service.serviceIdName}`;\r\n        });\r\n        if (\r\n          this.editSourceObjectIs &&\r\n          this.editSourceObjectIs.sourceObj &&\r\n          this.editSourceObjectIs.sourceObj.serviceDTO\r\n        ) {\r\n          const serviceDToIs = this.serviceTypesAre.find(\r\n            (service: IRealEstateServicesIds) =>\r\n              service.serviceId ===\r\n              this.editSourceObjectIs.sourceObj.serviceDTO.serviceId\r\n          );\r\n          this.sourceForm.controls.sourceServiceName.patchValue(serviceDToIs);\r\n        }\r\n        this.blockUI.stop();\r\n        // this.subscription.unsubscribe();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  setEditableObject = () => {\r\n    const revenueTypesDTO =\r\n      this.editSourceObjectIs &&\r\n      this.editSourceObjectIs.sourceObj.revenueTypesDTO;\r\n    const revenueTypesDTOContainsDiffer =\r\n      revenueTypesDTO &&\r\n      revenueTypesDTO.description &&\r\n      revenueTypesDTO.description.includes('Deferred Monthly');\r\n    if (\r\n      this.editSourceObjectIs &&\r\n      this.editSourceObjectIs.index !== null &&\r\n      !this.updateRevenueFields\r\n    ) {\r\n      if (\r\n        this.editSourceObjectIs.sourceObj &&\r\n        this.editSourceObjectIs.sourceObj.locationDTO\r\n      ) {\r\n        const location = this.locations.find(\r\n          (loc: LocationDTO) =>\r\n            loc.id === this.editSourceObjectIs.sourceObj.locationDTO.id\r\n        );\r\n        this.sourceForm.controls['realEstate'].patchValue(location);\r\n        this.getAllServiceIds();\r\n      }\r\n      this.sourceForm.controls['carCount'].patchValue(\r\n        this.editSourceObjectIs.sourceObj.carCount\r\n      );\r\n      if (revenueTypesDTOContainsDiffer) {\r\n        this.dueToLocFieldsFlag = false;\r\n        this.sourceForm.setControl('differedAmounts', this.fb.array([]));\r\n        for (let i = 1; i <= 12; i++) {\r\n          if (this.editSourceObjectIs.sourceObj['deferredAmount' + i]) {\r\n            this.differedAmountsIs.push(\r\n              this.fb.group({\r\n                deferredAmount: new FormControl(\r\n                  this.editSourceObjectIs.sourceObj['deferredAmount' + i],\r\n                  [Validators.required]\r\n                ),\r\n                deferredMonth: new FormControl(\r\n                  this.editSourceObjectIs.sourceObj['deferredMonth' + i]\r\n                ),\r\n                deferredYear: new FormControl(\r\n                  this.editSourceObjectIs.sourceObj['deferredYear' + i]\r\n                )\r\n              })\r\n            );\r\n          }\r\n        }\r\n        this.sourceForm.controls['sourcedeferredCounter'].patchValue(\r\n          this.differedAmountsIs.length.toString()\r\n        );\r\n      }\r\n      if (\r\n        this.editSourceObjectIs.sourceObj.revenueTypesDTO &&\r\n        this.revenueTypesSub.length > 0\r\n      ) {\r\n        const revenueSource = this.revenueTypesSub.find(\r\n          (revenue) =>\r\n            revenue.revenueTypesDTO.description ===\r\n            this.editSourceObjectIs.sourceObj.revenueTypesDTO.description\r\n        );\r\n        if (revenueSource) {\r\n          this.sourceForm.patchValue({ sourceRevenueType: revenueSource });\r\n        }\r\n      }\r\n      if (\r\n        this.editSourceObjectIs?.sourceObj?.revenueTypesDTO?.description.toLocaleLowerCase() ===\r\n        'due to location'\r\n      ) {\r\n        this.dueToLocFieldsFlag = true;\r\n        const location = this.locations.find(\r\n          (loc) =>\r\n            loc.locationID === this.editSourceObjectIs.sourceObj.dueToLocation\r\n        );\r\n        this.sourceForm.controls['dueToLocation'].patchValue(location);\r\n        this.sourceForm.controls['checkNumber'].patchValue(\r\n          this.editSourceObjectIs.sourceObj.checkNumber\r\n        );\r\n        this.sourceForm.controls['payor'].patchValue(\r\n          this.editSourceObjectIs.sourceObj.payor\r\n        );\r\n        this.sourceForm.controls.payor.setValidators([Validators.required]);\r\n        this.sourceForm.controls.checkNumber.setValidators([\r\n          Validators.required\r\n        ]);\r\n        this.sourceForm.controls.dueToLocation.setValidators([\r\n          Validators.required\r\n        ]);\r\n      }\r\n      this.editSourceAmount = this.editSourceObjectIs.sourceObj.amount\r\n        ? this.editSourceObjectIs.sourceObj.amount\r\n        : '';\r\n      this.hiddenTempIdIs = this.editSourceObjectIs.index\r\n        ? this.editSourceObjectIs.index\r\n        : '';\r\n    } else if (\r\n      this.editSourceObjectIs &&\r\n      this.editSourceObjectIs.index === null\r\n    ) {\r\n      this.dueToLocFieldsFlag = false;\r\n      this.onClickCancel();\r\n    }\r\n  };\r\n\r\n  onChangeSourceRevenueType = () => {\r\n    this.revenueTypesSub = [];\r\n    this.revenueTypesSub.length = 0;\r\n    this.sourceForm.controls.sourceRevenueType.reset();\r\n    this.getSourceRevenueType.emit(this.sourceForm.value.sourceServiceName.id);\r\n  };\r\n\r\n  onChangeCheckDeferred = (event) => {\r\n    const revenueTypesDTOContainsDiffer =\r\n      event &&\r\n      event.value &&\r\n      event.value.revenueTypesDTO &&\r\n      event.value.revenueTypesDTO.description &&\r\n      event.value.revenueTypesDTO.description?.includes('Deferred Monthly');\r\n    this.updateRevenueFields = true;\r\n    if (this.editSourceObjectIs && this.editSourceObjectIs.index === null) {\r\n      this.sourceForm.controls.sourceAmount.setValue('');\r\n    }\r\n    this.sourceForm.controls.sourcedeferredCounter.markAsUntouched();\r\n    this.sourceForm.controls.sourcedeferredCounter.setValue('');\r\n    this.sourceForm.controls.sourcedeferredCounter.clearValidators();\r\n    this.checkDeferred.emit(event.value);\r\n    if (\r\n      this.sourceForm &&\r\n      this.sourceForm.controls &&\r\n      this.sourceForm.controls.sourceRevenueType &&\r\n      this.sourceForm.controls.sourceRevenueType?.value?.revenueTypesDTO?.description.toLocaleLowerCase() ===\r\n        'due to location'\r\n    ) {\r\n      this.dueToLocFieldsFlag = true;\r\n      this.sourceForm.setControl('differedAmounts', this.fb.array([]));\r\n      this.sourceForm.controls.sourcedeferredCounter.clearValidators();\r\n      this.sourceForm.controls.checkNumber.patchValue('');\r\n      this.sourceForm.controls.payor.patchValue('');\r\n      this.sourceForm.controls.dueToLocation.patchValue(null);\r\n      this.sourceForm.controls.checkNumber.markAsUntouched();\r\n      this.sourceForm.controls.payor.markAsUntouched();\r\n      this.sourceForm.controls.dueToLocation.markAsUntouched();\r\n      this.sourceForm.controls.payor.setValidators([Validators.required]);\r\n      this.sourceForm.controls.checkNumber.setValidators([Validators.required]);\r\n      this.sourceForm.controls.dueToLocation.setValidators([\r\n        Validators.required\r\n      ]);\r\n    } else if (revenueTypesDTOContainsDiffer) {\r\n      this.sourceForm.controls.sourcedeferredCounter.setValidators([\r\n        Validators.required\r\n      ]);\r\n      this.dueToLocFieldsFlag = false;\r\n      this.sourceForm.controls.payor.clearValidators();\r\n      this.sourceForm.controls.payor.updateValueAndValidity();\r\n      this.sourceForm.controls.checkNumber.clearValidators();\r\n      this.sourceForm.controls.checkNumber.updateValueAndValidity();\r\n      this.sourceForm.controls.dueToLocation.clearValidators();\r\n      this.sourceForm.controls.dueToLocation.updateValueAndValidity();\r\n    } else {\r\n      this.sourceForm.setControl('differedAmounts', this.fb.array([]));\r\n      this.sourceForm.controls.checkNumber.patchValue('');\r\n      this.sourceForm.controls.payor.patchValue('');\r\n      this.sourceForm.controls.dueToLocation.patchValue(null);\r\n      this.sourceForm.controls.checkNumber.markAsUntouched();\r\n      this.sourceForm.controls.payor.markAsUntouched();\r\n      this.sourceForm.controls.dueToLocation.markAsUntouched();\r\n      this.dueToLocFieldsFlag = false;\r\n      this.sourceForm.controls.payor.clearValidators();\r\n      this.sourceForm.controls.payor.updateValueAndValidity();\r\n      this.sourceForm.controls.checkNumber.clearValidators();\r\n      this.sourceForm.controls.checkNumber.updateValueAndValidity();\r\n      this.sourceForm.controls.sourcedeferredCounter.clearValidators();\r\n      this.sourceForm.controls.sourcedeferredCounter.updateValueAndValidity();\r\n      this.sourceForm.controls.dueToLocation.clearValidators();\r\n      this.sourceForm.controls.dueToLocation.updateValueAndValidity();\r\n    }\r\n  };\r\n\r\n  onChangeAmountCheck = (event) => {\r\n    this.amountCheck.emit(event);\r\n    if (!event.target.value) {\r\n      this.sourceForm.controls.sourcedeferredCounter.setValue('');\r\n      this.sourceForm.setControl('differedAmounts', this.fb.array([]));\r\n      this.sourceForm.controls.checkNumber.patchValue('');\r\n      this.sourceForm.controls.payor.patchValue('');\r\n      this.sourceForm.controls.dueToLocation.patchValue(null);\r\n      this.sourceForm.controls.sourcedeferredCounter.markAsUntouched();\r\n      this.sourceForm.controls.checkNumber.markAsUntouched();\r\n      this.sourceForm.controls.payor.markAsUntouched();\r\n      this.sourceForm.controls.dueToLocation.markAsUntouched();\r\n    }\r\n  };\r\n\r\n  onChangeSetDeferredCount = (event) => {\r\n    let month: any;\r\n    let arrayLength;\r\n    let removeFlag;\r\n    const form = this.sourceForm.get('differedAmounts') as FormArray;\r\n    if (event.value > this.sourceForm.controls.differedAmounts.value.length) {\r\n      arrayLength = event.value - this.differedAmountsIs.value.length;\r\n      removeFlag = false;\r\n    } else if (event.value < this.differedAmountsIs.value.length) {\r\n      arrayLength = this.differedAmountsIs.value.length - event.value;\r\n      removeFlag = true;\r\n    }\r\n    for (let i = 1; i <= event.value; i++) {\r\n      const dtime = moment(this.revenueFormDataIs.revenueFromDate).add(\r\n        i,\r\n        'months'\r\n      );\r\n      month = dtime.format('M');\r\n      const year = dtime.format('YYYY');\r\n      if (arrayLength > 0) {\r\n        for (let j = 1; j <= arrayLength; j++) {\r\n          if (this.differedAmountsIs.value.length + j === i) {\r\n            this.differedAmountsIs.push(\r\n              this.fb.group({\r\n                deferredAmount: new FormControl('', [Validators.required]),\r\n                deferredMonth: month,\r\n                deferredYear: year\r\n              })\r\n            );\r\n          }\r\n          if (removeFlag && form.length > i) {\r\n            form.removeAt(form.length - 1);\r\n          }\r\n        }\r\n      } else {\r\n        this.differedAmountsIs.push(\r\n          this.fb.group({\r\n            deferredAmount: new FormControl('', [Validators.required]),\r\n            deferredMonth: month,\r\n            deferredYear: year\r\n          })\r\n        );\r\n      }\r\n    }\r\n    this.differTable.renderRows();\r\n  };\r\n\r\n  onClickCancel = () => {\r\n    this.updateRevenueFields = false;\r\n    this.sourceForm.reset();\r\n    this.cancelEdit.emit();\r\n  };\r\n\r\n  onClickSaveEditNewSource = (isSave: boolean, editIndex: any) => {\r\n    this.saveEditNewSource.emit({ isSave, editIndex });\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\revenue-sources\\addrevenue.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormGroup' is defined but never used.","line":16,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControl' is defined but never used.","line":16,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Subscription' is defined but never used.","line":22,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Locations' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SourceDTO' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'serviceId' is assigned a value but never used.","line":37,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpMock' is assigned a value but never used.","line":115,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":116,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'httpClient' is assigned a value but never used.","line":117,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is assigned a value but never used.","line":118,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'locationID' is assigned a value but never used.","line":450,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":450,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'serviceIdDetails' is assigned a value but never used.","line":458,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":458,"endColumn":27}],"errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { async, ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport {\r\n  HttpTestingController,\r\n  HttpClientTestingModule\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClient,\r\n  HttpHandler\r\n} from '@angular/common/http';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AddrevenueComponent } from './addrevenue.component';\r\nimport { of, Subscription } from 'rxjs';\r\nimport {\r\n  LocationDTO,\r\n  Locations,\r\n  SourceDTO\r\n} from 'src/app/shared/model/revenueSource.model';\r\n\r\ndescribe('AddRevenueComponent', () => {\r\n  let component: AddrevenueComponent;\r\n  let fixture: ComponentFixture<AddrevenueComponent>;\r\n  let apiService: ApiService;\r\n  let authenticateService: AuthenticateService;\r\n  let httpMock: HttpTestingController;\r\n  let router: Router;\r\n  let httpClient: HttpClient;\r\n  const serviceId = [\r\n    {\r\n      active: null,\r\n      address1: '101 East Kennedy Blvd',\r\n      address2: null,\r\n      applicableForDarma: true,\r\n      bankAccountsLocationLinkDTO: [],\r\n      brandCode: 'CLH (PK1)',\r\n      brandDTO: null,\r\n      burdensDTO: [],\r\n      cell: null,\r\n      city: 'TAMPA',\r\n      clientLegalName: null,\r\n      companyName: 'CLH (PK1)',\r\n      contractType: null,\r\n      county: null,\r\n      darmaUser: null,\r\n      dataView: null,\r\n      dateOfLastMonthlyRateIncrease: null,\r\n      dateOfLastTransientRateIncrease: null,\r\n      deleted: null,\r\n      dueDay: null,\r\n      executive: null,\r\n      ext: null,\r\n      fax: null,\r\n      hoursOfOperation: null,\r\n      iconName: null,\r\n      id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n      locationID: 'US-FL-RE-1003115',\r\n      locationMoreInfoDTO: null,\r\n      locationNotes: null,\r\n      name: 'Bank of America Tower',\r\n      noOfEntryLanes: null,\r\n      noOfExitLanes: null,\r\n      noOfGarageLevels: null,\r\n      noofSpaces: null,\r\n      notesDTO: [],\r\n      parcsManufacture: null,\r\n      parentLocationID: 'PO40001000',\r\n      parentLocationName: 'Bank of America Tower',\r\n      phone: null,\r\n      primaryContactId: null,\r\n      revenueTypesLnkDTO: [],\r\n      serviceType: null,\r\n      settlementDay: null,\r\n      state: 'FL',\r\n      status: 'A',\r\n      subsidyType: null,\r\n      tenderTypesLnkDTO: [],\r\n      typeOfFacility: null,\r\n      zipCode: '33602'\r\n    }\r\n  ];\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        BrowserAnimationsModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        RouterTestingModule,\r\n        MatDialogModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      declarations: [AddrevenueComponent],\r\n      providers: [\r\n        ApiService,\r\n        SweetAlertService,\r\n        MatDialog,\r\n        TranslateService,\r\n        PersistenceService,\r\n        HttpClient,\r\n        HttpHandler,\r\n        Validators\r\n      ]\r\n    }).compileComponents();\r\n    router = TestBed.inject(Router);\r\n    authenticateService = TestBed.get(AuthenticateService);\r\n    httpMock = TestBed.get(HttpTestingController);\r\n    router = TestBed.inject(Router);\r\n    httpClient = TestBed.get(HttpClient);\r\n    apiService = TestBed.get(ApiService);\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(AddrevenueComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    fixture.detectChanges();\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should call getLocationsBasedOnBrand by all brands', () => {\r\n    const brandType = {\r\n      code: 'All',\r\n      description: 'Lanier',\r\n      id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n      logo: null,\r\n      status: 'A'\r\n    };\r\n    const locationDTO = [new LocationDTO()];\r\n    spyOn(component, 'getLocationsBasedOnBrand').and.callThrough();\r\n    spyOn(authenticateService, 'getLocationsBasedOnBrand').and.returnValue(\r\n      of(locationDTO)\r\n    );\r\n    fixture.detectChanges();\r\n    component.loggedUserDetails = { brandCode: 'All', brandId: '7858587474' };\r\n    component.getLocationsBasedOnBrand();\r\n    expect(component.getLocationsBasedOnBrand).toHaveBeenCalled();\r\n    // component.loggedUserDetails = '7858587474';\r\n    component.revenueForm.patchValue({ ' brandType': brandType });\r\n    expect(authenticateService.getLocationsBasedOnBrand).toHaveBeenCalled();\r\n    expect(component.locations).toEqual(locationDTO);\r\n  });\r\n\r\n  it('should filter locationData proper', () => {\r\n    const locationObj = [new LocationDTO()];\r\n    spyOn(component, 'filterLocations').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.filterLocations();\r\n    component.locations = locationObj;\r\n    component.revenueForm.patchValue({ locFilterCtrl: 'test' });\r\n    expect(component.filterLocations).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should filter locationData proper with no locations', () => {\r\n    spyOn(component, 'filterLocations').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.filterLocations();\r\n    component.locations = null;\r\n    component.revenueForm.patchValue({ locFilterCtrl: 'test' });\r\n    expect(component.filterLocations).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call getLocationsBasedOnBrand other brands', () => {\r\n    const brandType = {\r\n      code: 'Impark',\r\n      description: 'Lanier',\r\n      id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n      logo: null,\r\n      status: 'A'\r\n    };\r\n    const locationDTO = [new LocationDTO()];\r\n    component.loggedUserDetails = {\r\n      brandCode: 'Impark',\r\n      brandId: '7858587474'\r\n    };\r\n    component.revenueForm.patchValue({ ' brandType': brandType });\r\n    spyOn(component, 'getLocationsBasedOnBrand').and.callThrough();\r\n    spyOn(authenticateService, 'getLocationsBasedOnBrand').and.returnValue(\r\n      of(locationDTO)\r\n    );\r\n    fixture.detectChanges();\r\n    component.getLocationsBasedOnBrand();\r\n    expect(component.getLocationsBasedOnBrand).toHaveBeenCalled();\r\n    expect(authenticateService.getLocationsBasedOnBrand).toHaveBeenCalled();\r\n    expect(component.locations).toEqual(locationDTO);\r\n  });\r\n\r\n  it('should call getDepositIdentifier', () => {\r\n    const event = {\r\n      active: null,\r\n      address1: '8268 Mills Drive',\r\n      address2: null,\r\n      applicableForDarma: true,\r\n      bankAccountsLocationLinkDTO: [],\r\n      brandCode: 'CLH (AmeriPark)',\r\n      brandDTO: null,\r\n      burdensDTO: [],\r\n      cell: null,\r\n      city: 'Miami',\r\n      clientLegalName: null,\r\n      companyName: 'CLH (AmeriPark)',\r\n      contractType: null,\r\n      county: null,\r\n      darmaUser: null,\r\n      dataView: null,\r\n      dateOfLastMonthlyRateIncrease: null,\r\n      dateOfLastTransientRateIncrease: null,\r\n      deleted: null,\r\n      dueDay: null,\r\n      executive: null,\r\n      ext: null,\r\n      fax: null,\r\n      hoursOfOperation: null,\r\n      iconName: null,\r\n      id: '6d419ea2-01d2-4099-8e49-2b3ca95e2c5f',\r\n      locationID: 'US-FL-RE-1000081',\r\n      locationMoreInfoDTO: null,\r\n      locationNotes: null,\r\n      locationWithID: 'US-FL-RE-1000081 - The Palms Mall',\r\n      name: 'The Palms Mall',\r\n      noOfEntryLanes: null,\r\n      noOfExitLanes: null,\r\n      noOfGarageLevels: null,\r\n      noofSpaces: null,\r\n      notesDTO: [],\r\n      parcsManufacture: null,\r\n      parentLocationID: 'AP30205200',\r\n      parentLocationName: 'The Palms Mall',\r\n      phone: null,\r\n      primaryContactId: null,\r\n      revenueTypesLnkDTO: [],\r\n      serviceType: null,\r\n      settlementDay: null,\r\n      state: 'FL',\r\n      status: 'A',\r\n      subsidyType: null,\r\n      tenderTypesLnkDTO: [],\r\n      typeOfFacility: null,\r\n      zipCode: '33183',\r\n      value: {\r\n        id: '123'\r\n      }\r\n    };\r\n    spyOn(component, 'getDepositIdentifier').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.getDepositIdentifier(event);\r\n    expect(component.getDepositIdentifier).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should getServiceIdDetails', () => {\r\n    const serviceIdDetails = [\r\n      {\r\n        applicableForDarma: true,\r\n        brandCode: 'CLH (PK1)',\r\n        closeDate: null,\r\n        companyId: 'PK001',\r\n        contractType: 'MANAGED',\r\n        id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n        openDate: null,\r\n        realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        realEstateName: 'Bank of America Tower',\r\n        realEstateNumber: 'US-FL-RE-1003115',\r\n        serviceGroupName: 'Parking',\r\n        serviceId: 'PA-1000428',\r\n        serviceIdName: 'Bank of America Tower Parking',\r\n        serviceType: 'Parking'\r\n      }\r\n    ];\r\n    const locationID = '19b9f5d0-09f6-472a-8735-e2560e010503';\r\n    spyOn(component, 'getServiceIdDetails').and.callThrough();\r\n    spyOn(authenticateService, 'getServiceId').and.returnValue(\r\n      of(serviceIdDetails)\r\n    );\r\n    fixture.detectChanges();\r\n    component.getServiceIdDetails(locationID);\r\n    expect(component.getServiceIdDetails).toHaveBeenCalled();\r\n    expect(authenticateService.getServiceId).toHaveBeenCalled();\r\n    expect(component.servicetypes).toEqual(serviceIdDetails);\r\n  });\r\n\r\n  it('should getBankandTenderTypes', () => {\r\n    const service = {\r\n      active: null,\r\n      address1: '8268 Mills Drive',\r\n      address2: null,\r\n      applicableForDarma: true,\r\n      bankAccountsLocationLinkDTO: [],\r\n      brandCode: 'CLH (AmeriPark)',\r\n      brandDTO: null,\r\n      burdensDTO: [],\r\n      cell: null,\r\n      city: 'Miami',\r\n      clientLegalName: null,\r\n      companyName: 'CLH (AmeriPark)',\r\n      contractType: null,\r\n      county: null,\r\n      darmaUser: null,\r\n      dataView: null,\r\n      dateOfLastMonthlyRateIncrease: null,\r\n      dateOfLastTransientRateIncrease: null,\r\n      deleted: null,\r\n      dueDay: null,\r\n      executive: null,\r\n      ext: null,\r\n      fax: null,\r\n      hoursOfOperation: null,\r\n      iconName: null,\r\n      id: '6d419ea2-01d2-4099-8e49-2b3ca95e2c5f',\r\n      locationID: 'US-FL-RE-1000081',\r\n      locationMoreInfoDTO: null,\r\n      locationNotes: null,\r\n      locationWithID: 'US-FL-RE-1000081 - The Palms Mall',\r\n      name: 'The Palms Mall',\r\n      noOfEntryLanes: null,\r\n      noOfExitLanes: null,\r\n      noOfGarageLevels: null,\r\n      noofSpaces: null,\r\n      notesDTO: [],\r\n      parcsManufacture: null,\r\n      parentLocationID: 'AP30205200',\r\n      parentLocationName: 'The Palms Mall',\r\n      phone: null,\r\n      primaryContactId: null,\r\n      revenueTypesLnkDTO: [],\r\n      serviceType: null,\r\n      settlementDay: null,\r\n      state: 'FL',\r\n      status: 'A',\r\n      subsidyType: null,\r\n      tenderTypesLnkDTO: [],\r\n      typeOfFacility: null,\r\n      zipCode: '33183',\r\n      value: {\r\n        serviceId: 'PA-1000046'\r\n      }\r\n    };\r\n    spyOn(component, 'getBankandTenderTypes').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.getBankandTenderTypes(service);\r\n    expect(component.getBankandTenderTypes).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should getTenderDetails', () => {\r\n    const serviceIdDetails = [\r\n      {\r\n        id: 'ff3a7c47-51e6-424e-9c48-c6c6acb3f5a0',\r\n        locationDTO: null,\r\n        serviceDTO: null,\r\n        status: 'A',\r\n        tenderTypesDTO: {\r\n          code: 'ACH/Wire',\r\n          description: 'ACH/Wire',\r\n          glCode: '105479',\r\n          id: '6e7a306b-60d2-4e2b-bbcd-d5e1f2f7ea08',\r\n          isPCI: true,\r\n          status: 'A',\r\n          tenderTypesLnkDTO: [],\r\n          uniqueIdentifier: 'RT660'\r\n        }\r\n      }\r\n    ];\r\n    const locationID = '55ac4370-b0ff-4f26-8688-36fdf21c752d';\r\n    spyOn(component, 'getTenderDetails').and.callThrough();\r\n    spyOn(authenticateService, 'getTenderDetailsfromapi').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.getTenderDetails(locationID);\r\n    expect(component.getTenderDetails).toHaveBeenCalled();\r\n    expect(authenticateService.getTenderDetailsfromapi).toHaveBeenCalled();\r\n    component.tenderTypes = serviceIdDetails;\r\n    // expect(component.tenderTypes).toEqual(serviceIdDetails);\r\n  });\r\n\r\n  it('should getBankAccountDetails', () => {\r\n    const bankDetails = [\r\n      {\r\n        bankAccountsDTO: {\r\n          accountNumber: '1600064164',\r\n          accountType: null,\r\n          bankAccountsLocationLinkDTO: [],\r\n          bankName: 'ACB - 1861 International Drive CC',\r\n          brandDTO: {\r\n            code: 'All',\r\n            description: 'Lanier',\r\n            id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n            logo: null,\r\n            status: 'A',\r\n            userDTO: [],\r\n            regionsDTO: [],\r\n            gLCodesDTO: []\r\n          },\r\n          contactTypesID: null,\r\n          description: 'ACB - 1861 International Drive CC',\r\n          glNumber: null,\r\n          id: '33765630-c801-4464-b7cc-5194452e8b6f',\r\n          oneGL: null,\r\n          routingNumber: null,\r\n          status: 'A',\r\n          uniqueIdentifier: 'RB466'\r\n        },\r\n        id: '0348fe86-2f56-4553-baa2-1a2d54975113',\r\n        locationDTO: null,\r\n        serviceDTO: null,\r\n        status: 'A'\r\n      }\r\n    ];\r\n    const locationID = '55ac4370-b0ff-4f26-8688-36fdf21c752d';\r\n    spyOn(component, 'getBankAccountDetails').and.callThrough();\r\n    spyOn(authenticateService, 'getBankAccountDetailsfromapi').and.returnValue(\r\n      of(bankDetails)\r\n    );\r\n    fixture.detectChanges();\r\n    component.getBankAccountDetails(locationID);\r\n    expect(component.getBankAccountDetails).toHaveBeenCalled();\r\n    expect(authenticateService.getBankAccountDetailsfromapi).toHaveBeenCalled();\r\n    // component.bankAccounts = bankDetails;\r\n\r\n    expect(component.bankAccounts).toEqual(bankDetails);\r\n  });\r\n\r\n  it('should getSourceRevenueType', () => {\r\n    const event = [\r\n      {\r\n        applicableForDarma: true,\r\n        brandCode: 'Impark',\r\n        closeDate: null,\r\n        companyId: null,\r\n        contractType: 'SUBSIDY',\r\n        id: '5fe43b1e-0a08-454d-9019-203d3ad6840b',\r\n        openDate: '2021-01-07T00:00:00.000',\r\n        realEstateId: 'e45e9f3b-c724-4a49-94eb-deafea8d4c62',\r\n        realEstateName: '1880 2nd Street',\r\n        realEstateNumber: 'US-DC-RE-1002061',\r\n        serviceGroupName: 'Parking',\r\n        serviceId: 'PA-1000057',\r\n        serviceIdName: '1880 2nd Street SW',\r\n        serviceType: 'Parking'\r\n      }\r\n    ];\r\n    const locationID = '55ac4370-b0ff-4f26-8688-36fdf21c752d';\r\n    spyOn(component, 'getSourceRevenueType').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.getSourceRevenueType(event);\r\n    expect(component.getSourceRevenueType).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should getRevenueTypeDetails', () => {\r\n    const serviceIdDetails = [\r\n      {\r\n        id: '9be6e2e3-16a6-409c-be24-f3f3690538a1',\r\n        locationDTO: null,\r\n        revenueTypesDTO: {\r\n          code: 'PA02',\r\n          contraGlNumber: '625997',\r\n          description: 'Administrative Fee Income',\r\n          glNumber: '625958',\r\n          id: '1a182090-e589-4ee7-aa8e-6085af31d0a6',\r\n          oneGL: null,\r\n          ptlGLNumber: null,\r\n          revenueTypesLocationLinkDTO: [],\r\n          status: 'A',\r\n          uniqueIdentifier: 'RR326'\r\n        },\r\n        serviceDTO: null,\r\n        status: 'A'\r\n      }\r\n    ];\r\n    const locationID = { id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd' };\r\n    spyOn(component, 'getRevenueTypeDetails').and.callThrough();\r\n    spyOn(\r\n      authenticateService,\r\n      'getRevenueTypeDetailsFromApi'\r\n    ).and.callThrough();\r\n    fixture.detectChanges();\r\n    component.getRevenueTypeDetails(locationID);\r\n    expect(component.getRevenueTypeDetails).toHaveBeenCalled();\r\n    expect(authenticateService.getRevenueTypeDetailsFromApi).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should amountCheck', () => {\r\n    const amount = {\r\n      code: 'PA02',\r\n      contraGlNumber: '625997',\r\n      description: 'Administrative Fee Income',\r\n      glNumber: '625958',\r\n      id: '1a182090-e589-4ee7-aa8e-6085af31d0a6',\r\n      oneGL: null,\r\n      ptlGLNumber: null,\r\n      revenueTypesLocationLinkDTO: [],\r\n      status: 'A',\r\n      uniqueIdentifier: 'RR326'\r\n    };\r\n    spyOn(component, 'amountCheck').and.callThrough();\r\n    component.sourceFormDataIs = {\r\n      value: {\r\n        sourceRevenueType: {\r\n          id: '9be6e2e3-16a6-409c-be24-f3f3690538a1',\r\n          locationDTO: null,\r\n          revenueTypesDTO: {\r\n            code: 'PA02',\r\n            contraGlNumber: '625997',\r\n            description: 'Administrative Fee Income',\r\n            glNumber: '625958',\r\n            id: '1a182090-e589-4ee7-aa8e-6085af31d0a6',\r\n            oneGL: null,\r\n            ptlGLNumber: null,\r\n            revenueTypesLocationLinkDTO: [],\r\n            status: 'A',\r\n            uniqueIdentifier: 'RR326'\r\n          },\r\n          serviceDTO: null,\r\n          status: 'A'\r\n        }\r\n      }\r\n    };\r\n    fixture.detectChanges();\r\n    component.amountCheck(amount);\r\n    expect(component.amountCheck).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should addNewSource', () => {\r\n    component.revenueForm.patchValue({\r\n      revenueFromDate: '2021-03-14',\r\n      brandType: {},\r\n      revenueLocationName: {},\r\n      revenueServiceId: {},\r\n      revenueAmount: {},\r\n      revenueTenderType: {},\r\n      revenueBankAccount: {},\r\n      locFilterCtrl: ''\r\n    });\r\n    spyOn(component, 'addNewSource').and.callThrough();\r\n    spyOn(authenticateService, 'checkLockUnlock').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.addNewSource();\r\n    expect(component.addNewSource).toHaveBeenCalled();\r\n    expect(authenticateService.checkLockUnlock).toHaveBeenCalled();\r\n    // expect(component.locations).toEqual(locationDTO);\r\n  });\r\n\r\n  it('should saveSubmitting', () => {\r\n    const abc = 'true';\r\n    spyOn(component, 'saveSubmitting').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.saveSubmitting(abc);\r\n    expect(component.saveSubmitting).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should revenueSourceObjectCreation', () => {\r\n    const revenueObject = [\r\n      {\r\n        amount: 5.75,\r\n        bankAccountsDTO: {\r\n          id: '33765630-c801-4464-b7cc-5194452e8b6f',\r\n          uniqueIdentifier: 'RB466'\r\n        },\r\n        bankAmount: null,\r\n        carCount: null,\r\n        checkNumber: null,\r\n        correctiveDescr: null,\r\n        correctiveYn: 'N',\r\n        deferredAmount1: null,\r\n        deferredAmount2: null,\r\n        deferredAmount3: null,\r\n        deferredAmount4: null,\r\n        deferredAmount5: null,\r\n        deferredAmount6: null,\r\n        deferredAmount7: null,\r\n        deferredAmount8: null,\r\n        deferredAmount9: null,\r\n        deferredAmount10: null,\r\n        deferredAmount11: null,\r\n        deferredAmount12: null,\r\n        deferredMonth1: null,\r\n        deferredMonth2: null,\r\n        deferredMonth3: null,\r\n        deferredMonth4: null,\r\n        deferredMonth5: null,\r\n        deferredMonth6: null,\r\n        deferredMonth7: null,\r\n        deferredMonth8: null,\r\n        deferredMonth9: null,\r\n        deferredMonth10: null,\r\n        deferredMonth11: null,\r\n        deferredMonth12: null,\r\n        deferredYear1: null,\r\n        deferredYear2: null,\r\n        deferredYear3: null,\r\n        deferredYear4: null,\r\n        deferredYear5: null,\r\n        deferredYear6: null,\r\n        deferredYear7: null,\r\n        deferredYear8: null,\r\n        deferredYear9: null,\r\n        deferredYear10: null,\r\n        deferredYear11: null,\r\n        deferredYear12: null,\r\n        deferredYn: 'N',\r\n        depositIdentifier: 'PA-1000063-C4BF9947-03142021160399',\r\n        dueToLocAmount: null,\r\n        dueToLocation: null,\r\n        exportNavisionBy: null,\r\n        exportNavisionDate: null,\r\n        id: '7c367ff7-538c-4f10-b9c8-9c68e23745de',\r\n        locationDTO: {},\r\n        payor: null,\r\n        pci: false,\r\n        postedBy: null,\r\n        postedNavisionDate: null,\r\n        postingDate: null,\r\n        reconciledDate: null,\r\n        revenueDTO: {},\r\n        revenueTypesDTO: {},\r\n        serviceDTO: {},\r\n        sourceNotesDTO: [],\r\n        status: 'S',\r\n        subAccountCode: 'B',\r\n        submittedBy: null,\r\n        submittedDate: null,\r\n        taxExemption: null,\r\n        tempId: 0,\r\n        tenderTypesDTO: {\r\n          id: '6e7a306b-60d2-4e2b-bbcd-d5e1f2f7ea08',\r\n          uniqueIdentifier: 'RT660'\r\n        },\r\n        transactionDate: '2021-03-14T00:00:00.000'\r\n      }\r\n    ];\r\n    const status = 'S';\r\n    spyOn(component, 'revenueSourceObjectCreation').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.revenueSourceObjectCreation(revenueObject, status);\r\n    expect(component.revenueSourceObjectCreation).toHaveBeenCalled();\r\n    // expect(component.locations).toEqual(locationDTO);\r\n  });\r\n\r\n  it('should checkDeferred', () => {\r\n    component.sourceFormDataIs = {\r\n      value: {\r\n        sourceRevenueType: {\r\n          id: 'e509af38-1bff-47f2-bccb-d0dd8eb6fad5',\r\n          locationDTO: null,\r\n          revenueTypesDTO: {\r\n            code: 'PA01',\r\n            contraGlNumber: '622045',\r\n            description: 'Deferred Monthly',\r\n            glNumber: '355505',\r\n            id: '38bf76f7-0290-442f-a69f-ee2f8965d3ee',\r\n            oneGL: null,\r\n            ptlGLNumber: null,\r\n            revenueTypesLocationLinkDTO: [],\r\n            status: 'A',\r\n            uniqueIdentifier: 'RR191'\r\n          },\r\n          serviceDTO: null,\r\n          status: 'A'\r\n        }\r\n      }\r\n    };\r\n    spyOn(component, 'checkDeferred').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.checkDeferred(event);\r\n    expect(component.checkDeferred).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should createRevenueAndSource', () => {\r\n    const revenueService = {\r\n      amount: 25,\r\n      bankAccountsDTO: {\r\n        id: '33765630-c801-4464-b7cc-5194452e8b6f',\r\n        uniqueIdentifier: 'RB466'\r\n      },\r\n      bankAmount: null,\r\n      corrInc: null,\r\n      depositIdentifier: 'PA-1000063-8E1B2241-03142021150316',\r\n      exportNavisionBy: null,\r\n      exportNavisionDate: null,\r\n      id: '0c556986-2a2a-4d9e-a573-4ddf08aca758',\r\n      isCorrection: false,\r\n      locationDTO: {\r\n        id: '342d853d-cfed-4b30-a712-495a7c141537',\r\n        locationID: 'US-IL-RE-1001317'\r\n      },\r\n      markForCorrection: false,\r\n      markForCorrectionDate: null,\r\n      notesDTO: [],\r\n      numberOfDeposits: 1,\r\n      postedBy: null,\r\n      postingDate: null,\r\n      reconciledDate: null,\r\n      revenueDate: '2021-03-14T00:00:00.000',\r\n      serviceDTO: {\r\n        id: '3622d775-1937-4539-8cd7-ecf5f7b3c996',\r\n        serviceId: 'PA-1000063'\r\n      },\r\n      sourcesDTO: [{ id: 'b8f749d7-a3e2-4b4f-be6b-24db4f40edac' }],\r\n      status: 'S',\r\n      submittedBy: null,\r\n      submittedDate: '2021-03-14T00:00:00.000',\r\n      tenderTypesDTO: {\r\n        id: '6e7a306b-60d2-4e2b-bbcd-d5e1f2f7ea08',\r\n        uniqueIdentifier: 'RT660'\r\n      },\r\n      verificationStatus: null\r\n    };\r\n    const lock = '2021-03-14';\r\n    spyOn(component, 'createRevenueAndSource').and.callThrough();\r\n    spyOn(authenticateService, 'checkLockUnlock').and.callThrough();\r\n    // spyOn(authenticateService, 'createRevenueAndSource').and.callThrough();\r\n\r\n    fixture.detectChanges();\r\n    component.createRevenueAndSource(revenueService, lock);\r\n    expect(component.createRevenueAndSource).toHaveBeenCalled();\r\n    expect(authenticateService.checkLockUnlock).toHaveBeenCalled();\r\n    // expect(authenticateService.createRevenueAndSource).toHaveBeenCalled();\r\n\r\n    // component.tenderTypes = serviceIdDetails;\r\n    // expect(component.tenderTypes).toEqual(serviceIdDetails);\r\n  });\r\n\r\n  it('should updateRevenueAndSource', () => {\r\n    const revenueService = {\r\n      amount: 25,\r\n      bankAccountsDTO: {\r\n        id: '33765630-c801-4464-b7cc-5194452e8b6f',\r\n        uniqueIdentifier: 'RB466'\r\n      },\r\n      bankAmount: null,\r\n      corrInc: null,\r\n      depositIdentifier: 'PA-1000063-8E1B2241-03142021150316',\r\n      exportNavisionBy: null,\r\n      exportNavisionDate: null,\r\n      id: '0c556986-2a2a-4d9e-a573-4ddf08aca758',\r\n      isCorrection: false,\r\n      locationDTO: {\r\n        id: '342d853d-cfed-4b30-a712-495a7c141537',\r\n        locationID: 'US-IL-RE-1001317'\r\n      },\r\n      markForCorrection: false,\r\n      markForCorrectionDate: null,\r\n      notesDTO: [],\r\n      numberOfDeposits: 1,\r\n      postedBy: null,\r\n      postingDate: null,\r\n      reconciledDate: null,\r\n      revenueDate: '2021-03-14T00:00:00.000',\r\n      serviceDTO: {\r\n        id: '3622d775-1937-4539-8cd7-ecf5f7b3c996',\r\n        serviceId: 'PA-1000063'\r\n      },\r\n      sourcesDTO: [{ id: 'b8f749d7-a3e2-4b4f-be6b-24db4f40edac' }],\r\n      status: 'S',\r\n      submittedBy: null,\r\n      submittedDate: '2021-03-14T00:00:00.000',\r\n      tenderTypesDTO: {\r\n        id: '6e7a306b-60d2-4e2b-bbcd-d5e1f2f7ea08',\r\n        uniqueIdentifier: 'RT660'\r\n      },\r\n      verificationStatus: null\r\n    };\r\n    const lock = '2021-03-14';\r\n    spyOn(component, 'updateRevenueAndSource').and.callThrough();\r\n    spyOn(authenticateService, 'checkLockUnlock').and.callThrough();\r\n    // spyOn(authenticateService, 'createRevenueAndSource').and.callThrough();\r\n\r\n    fixture.detectChanges();\r\n    component.updateRevenueAndSource(revenueService, lock);\r\n    expect(component.updateRevenueAndSource).toHaveBeenCalled();\r\n    expect(authenticateService.checkLockUnlock).toHaveBeenCalled();\r\n    // expect(authenticateService.createRevenueAndSource).toHaveBeenCalled();\r\n\r\n    // component.tenderTypes = serviceIdDetails;\r\n    // expect(component.tenderTypes).toEqual(serviceIdDetails);\r\n  });\r\n\r\n  it('should deleteSoureDetails', () => {\r\n    const revenueObject = [\r\n      {\r\n        amount: '6',\r\n        carCount: '1',\r\n        checkNumber: null,\r\n        correctiveDescr: null,\r\n        correctiveYn: 'N',\r\n        dueToLocAmount: null,\r\n        dueToLocation: null,\r\n        locationDTO: {\r\n          id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n          locationID: 'US-FL-RE-1003115'\r\n        },\r\n        payor: null,\r\n        revenueTypesDTO: {\r\n          id: 'ae1b58a4-3ebf-4850-af9b-b8cac4756868',\r\n          description: 'Transient',\r\n          uniqueIdentifier: 'RR286'\r\n        },\r\n        serviceDTO: {\r\n          serviceId: 'PA-1000428',\r\n          serviceType: 'Parking',\r\n          id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd'\r\n        },\r\n        sourceRevenueType: 'Transient',\r\n        taxExemption: null,\r\n        transactionDate: '2021-03-14T00:00:00.000'\r\n      }\r\n    ];\r\n    const status = 0;\r\n    spyOn(component, 'deleteSoureDetails').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.deleteSoureDetails(revenueObject, status);\r\n    expect(component.deleteSoureDetails).toHaveBeenCalled();\r\n    // expect(component.locations).toEqual(locationDTO);\r\n  });\r\n\r\n  it('should cancelEdit', () => {\r\n    spyOn(component, 'cancelEdit').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.cancelEdit();\r\n    expect(component.cancelEdit).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should calculateTotalandsourceAmount', () => {\r\n    spyOn(component, 'calculateTotalandsourceAmount').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.calculateTotalandsourceAmount();\r\n    expect(component.calculateTotalandsourceAmount).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should getGUID', () => {\r\n    spyOn(component, 'getGUID').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.getGUID();\r\n    expect(component.getGUID).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should saveEditObjectCreation', () => {\r\n    spyOn(component, 'saveEditObjectCreation').and.callThrough();\r\n    component.sourceFormDataIs = {\r\n      value: {\r\n        carCount: '1',\r\n        checkNumber: '',\r\n        differedAmounts: [],\r\n        differedAmountsIs: [],\r\n        dueToLocation: null,\r\n        hiddenTempIdIs: '',\r\n        locFilterCtrl: '',\r\n        payor: '',\r\n        realEstate: {\r\n          id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n          locationID: 'US-FL-RE-1003115',\r\n          name: 'Bank of America Tower',\r\n          clientLegalName: null,\r\n          address1: '101 East Kennedy Blvd'\r\n        },\r\n        realEstateFilterCtrl: '',\r\n        sourceAmount: '111',\r\n        sourceId: '',\r\n        sourceRevenueType: {\r\n          id: '7959ea0f-bc60-494f-9ed6-e5e4f9052c4a',\r\n          revenueTypesDTO: {\r\n            code: 'PA02',\r\n            contraGlNumber: '623055',\r\n            description: 'Transient',\r\n            glNumber: '623004',\r\n            id: 'ae1b58a4-3ebf-4850-af9b-b8cac4756868',\r\n            oneGL: null,\r\n            ptlGLNumber: null,\r\n            revenueTypesLocationLinkDTO: [],\r\n            status: 'A',\r\n            uniqueIdentifier: 'RR286',\r\n            serviceDTO: null\r\n          },\r\n          locationDTO: null,\r\n          status: 'A',\r\n          serviceDTO: null\r\n        },\r\n        sourceServiceName: {\r\n          applicableForDarma: true,\r\n          brandCode: 'CLH (PK1)',\r\n          closeDate: null,\r\n          companyId: 'PK001',\r\n          contractType: 'MANAGED',\r\n          id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n          openDate: null,\r\n          realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n          realEstateName: 'Bank of America Tower',\r\n          realEstateNumber: 'US-FL-RE-1003115',\r\n          serviceGroupName: 'Parking',\r\n          serviceId: 'PA-1000428',\r\n          serviceIdName: 'Bank of America Tower Parking',\r\n          serviceNameWithID: 'PA-1000428-Bank of America Tower Parking',\r\n          serviceType: 'Parking'\r\n        },\r\n        sourcedeferredCounter: '',\r\n        taxExemption: null\r\n      }\r\n    };\r\n    fixture.detectChanges();\r\n    component.saveEditObjectCreation(true, 0, 'abc');\r\n    expect(component.saveEditObjectCreation).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should saveEditNewSource', () => {\r\n    const newSource = {\r\n      editIndex: undefined,\r\n      isSave: true\r\n    };\r\n    spyOn(component, 'saveEditNewSource').and.callThrough();\r\n    component.sourceFormDataIs = {\r\n      value: {\r\n        carCount: '1',\r\n        checkNumber: '',\r\n        differedAmounts: [],\r\n        differedAmountsIs: [],\r\n        dueToLocation: null,\r\n        hiddenTempIdIs: '',\r\n        locFilterCtrl: '',\r\n        payor: '',\r\n        realEstate: {\r\n          id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n          locationID: 'US-FL-RE-1003115',\r\n          name: 'Bank of America Tower',\r\n          clientLegalName: null,\r\n          address1: '101 East Kennedy Blvd'\r\n        },\r\n        realEstateFilterCtrl: '',\r\n        sourceAmount: '111',\r\n        sourceId: '',\r\n        sourceRevenueType: {\r\n          id: '7959ea0f-bc60-494f-9ed6-e5e4f9052c4a',\r\n          revenueTypesDTO: {\r\n            code: 'PA02',\r\n            contraGlNumber: '623055',\r\n            description: 'Transient',\r\n            glNumber: '623004',\r\n            id: 'ae1b58a4-3ebf-4850-af9b-b8cac4756868',\r\n            oneGL: null,\r\n            ptlGLNumber: null,\r\n            revenueTypesLocationLinkDTO: [],\r\n            status: 'A',\r\n            uniqueIdentifier: 'RR286',\r\n            serviceDTO: null\r\n          },\r\n          locationDTO: null,\r\n          status: 'A',\r\n          serviceDTO: null\r\n        },\r\n        sourceServiceName: {\r\n          applicableForDarma: true,\r\n          brandCode: 'CLH (PK1)',\r\n          closeDate: null,\r\n          companyId: 'PK001',\r\n          contractType: 'MANAGED',\r\n          id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n          openDate: null,\r\n          realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n          realEstateName: 'Bank of America Tower',\r\n          realEstateNumber: 'US-FL-RE-1003115',\r\n          serviceGroupName: 'Parking',\r\n          serviceId: 'PA-1000428',\r\n          serviceIdName: 'Bank of America Tower Parking',\r\n          serviceNameWithID: 'PA-1000428-Bank of America Tower Parking',\r\n          serviceType: 'Parking'\r\n        },\r\n        sourcedeferredCounter: '',\r\n        taxExemption: null\r\n      }\r\n    };\r\n    fixture.detectChanges();\r\n    component.saveEditNewSource(newSource);\r\n    expect(component.saveEditNewSource).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should getEditrevenueDetails', () => {\r\n    component.revenueLocResponse = {\r\n      amount: 100,\r\n      bankAccountsDTO: {\r\n        id: 'd47d9f54-38bc-4423-af32-abd06cc9f509',\r\n        contactTypesID: null,\r\n        bankName: 'Generic Bank Account',\r\n        description: null,\r\n        accountType: null\r\n      },\r\n      bankAmount: null,\r\n      corrInc: null,\r\n      depositIdentifier: 'PA-1000184-5AB01345-03152021160301',\r\n      exportNavisionBy: null,\r\n      exportNavisionDate: null,\r\n      id: 'c2d3ac86-4699-4cc5-ba5d-4a2db029b5ed',\r\n      isCorrection: false,\r\n      locationDTO: {\r\n        active: null,\r\n        address1: '201 JW Dobbs',\r\n        address2: null,\r\n        applicableForDarma: true,\r\n        bankAccountsLocationLinkDTO: [],\r\n        brandCode: null,\r\n        brandDTO: null,\r\n        burdensDTO: [],\r\n        cell: null,\r\n        city: 'Atlanta',\r\n        clientLegalName: null,\r\n        companyName: 'CLH (Lanier)',\r\n        contractType: null,\r\n        county: null,\r\n        darmaUser: null,\r\n        dataView: null,\r\n        dateOfLastMonthlyRateIncrease: null,\r\n        dateOfLastTransientRateIncrease: null,\r\n        deleted: null,\r\n        dueDay: null,\r\n        executive: null,\r\n        ext: null,\r\n        fax: null,\r\n        hoursOfOperation: null,\r\n        iconName: null,\r\n        id: '898e04b5-3ab5-4da6-bdc0-726f98b23051',\r\n        locationID: 'US-GA-RE-1003034',\r\n        locationMoreInfoDTO: null,\r\n        locationNotes: null,\r\n        locationWithID: 'US-GA-RE-1003034-201 John Wesley Dobbs (Big Bethel)',\r\n        name: '201 John Wesley Dobbs (Big Bethel)',\r\n        noOfEntryLanes: null,\r\n        noOfExitLanes: null,\r\n        noOfGarageLevels: null,\r\n        noofSpaces: null,\r\n        notesDTO: [],\r\n        parcsManufacture: null,\r\n        parentLocationID: 'L21021400',\r\n        parentLocationName: '201 John Wesley Dobbs (Big Bethel)',\r\n        phone: null,\r\n        primaryContactId: null,\r\n        revenueTypesLnkDTO: [],\r\n        serviceType: null,\r\n        settlementDay: null,\r\n        state: 'GA',\r\n        status: 'A',\r\n        subsidyType: null,\r\n        tenderTypesLnkDTO: [],\r\n        typeOfFacility: null,\r\n        zipCode: '30303'\r\n      },\r\n      markForCorrection: false,\r\n      markForCorrectionDate: null,\r\n      notesDTO: [],\r\n      numberOfDeposits: 1,\r\n      postedBy: null,\r\n      postingDate: null,\r\n      reconciledDate: null,\r\n      revenueDate: '2021-03-15T00:00:00.000',\r\n      serviceDTO: {\r\n        id: 'f35491b5-218e-4505-bc7e-308491f0ecc8',\r\n        serviceId: 'PA-1000184',\r\n        serviceIdName: '201 John Wesley Dobbs (Big Bethel) Parking',\r\n        serviceType: 'Parking',\r\n        serviceGroupName: 'Parking'\r\n      },\r\n      sourcesDTO: [\r\n        {\r\n          id: 'e56e2863-af99-40b7-998e-2cfc9d0b0882',\r\n          bankAccountsDTO: {},\r\n          locationDTO: {},\r\n          revenueTypesDTO: {},\r\n          status: 'S'\r\n        }\r\n      ],\r\n      status: 'S',\r\n      submittedBy: {\r\n        id: '636dc1e2-5da6-4455-8799-85a34b173520',\r\n        firstName: 'Vasim',\r\n        lastName: 'Mujawar',\r\n        emailAddress: null,\r\n        userName: 'vasim.mujawar'\r\n      },\r\n      submittedDate: '2021-03-15T00:00:00.000',\r\n      tenderTypesDTO: {\r\n        id: '3ab65d13-1818-422c-86b5-3d45bab7c18c',\r\n        code: 'Amex',\r\n        description: 'Amex',\r\n        uniqueIdentifier: 'RT577',\r\n        isPCI: true\r\n      },\r\n      verificationStatus: null\r\n    };\r\n    spyOn(component, 'getEditrevenueDetails').and.callThrough();\r\n    spyOn(component, 'getLocationsBasedOnBrand').and.callThrough();\r\n\r\n    fixture.detectChanges();\r\n    component.getEditrevenueDetails();\r\n    component.getLocationsBasedOnBrand();\r\n    expect(component.getEditrevenueDetails).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should getSourceFormData', () => {\r\n    spyOn(component, 'getSourceFormData').and.callThrough();\r\n    const sourceFormDataIs = {\r\n      value: {\r\n        carCount: '1',\r\n        checkNumber: '',\r\n        differedAmounts: [],\r\n        differedAmountsIs: [],\r\n        dueToLocation: null,\r\n        hiddenTempIdIs: '',\r\n        locFilterCtrl: '',\r\n        payor: '',\r\n        realEstate: {\r\n          id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n          locationID: 'US-FL-RE-1003115',\r\n          name: 'Bank of America Tower',\r\n          clientLegalName: null,\r\n          address1: '101 East Kennedy Blvd'\r\n        },\r\n        realEstateFilterCtrl: '',\r\n        sourceAmount: '111',\r\n        sourceId: '',\r\n        sourceRevenueType: {\r\n          id: '7959ea0f-bc60-494f-9ed6-e5e4f9052c4a',\r\n          revenueTypesDTO: {\r\n            code: 'PA02',\r\n            contraGlNumber: '623055',\r\n            description: 'Transient',\r\n            glNumber: '623004',\r\n            id: 'ae1b58a4-3ebf-4850-af9b-b8cac4756868',\r\n            oneGL: null,\r\n            ptlGLNumber: null,\r\n            revenueTypesLocationLinkDTO: [],\r\n            status: 'A',\r\n            uniqueIdentifier: 'RR286',\r\n            serviceDTO: null\r\n          },\r\n          locationDTO: null,\r\n          status: 'A',\r\n          serviceDTO: null\r\n        },\r\n        sourceServiceName: {\r\n          applicableForDarma: true,\r\n          brandCode: 'CLH (PK1)',\r\n          closeDate: null,\r\n          companyId: 'PK001',\r\n          contractType: 'MANAGED',\r\n          id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n          openDate: null,\r\n          realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n          realEstateName: 'Bank of America Tower',\r\n          realEstateNumber: 'US-FL-RE-1003115',\r\n          serviceGroupName: 'Parking',\r\n          serviceId: 'PA-1000428',\r\n          serviceIdName: 'Bank of America Tower Parking',\r\n          serviceNameWithID: 'PA-1000428-Bank of America Tower Parking',\r\n          serviceType: 'Parking'\r\n        },\r\n        sourcedeferredCounter: '',\r\n        taxExemption: null\r\n      }\r\n    };\r\n    fixture.detectChanges();\r\n    component.getSourceFormData(sourceFormDataIs);\r\n    expect(component.getSourceFormData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should goBackToRevenues', () => {\r\n    spyOn(component, 'goBackToRevenues').and.callThrough();\r\n    fixture.detectChanges();\r\n    component.goBackToRevenues();\r\n    expect(component.goBackToRevenues).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should totalAmountOfDeferred', () => {\r\n    spyOn(component, 'totalAmountOfDeferred').and.callThrough();\r\n    component.sourceFormDataIs = {\r\n      value: {\r\n        carCount: '1',\r\n        checkNumber: '',\r\n        differedAmounts: [],\r\n        differedAmountsIs: [],\r\n        dueToLocation: null,\r\n        hiddenTempIdIs: '',\r\n        locFilterCtrl: '',\r\n        payor: '',\r\n        realEstate: {\r\n          id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n          locationID: 'US-FL-RE-1003115',\r\n          name: 'Bank of America Tower',\r\n          clientLegalName: null,\r\n          address1: '101 East Kennedy Blvd'\r\n        },\r\n        realEstateFilterCtrl: '',\r\n        sourceAmount: '111',\r\n        sourceId: '',\r\n        sourceRevenueType: {\r\n          id: '7959ea0f-bc60-494f-9ed6-e5e4f9052c4a',\r\n          revenueTypesDTO: {\r\n            code: 'PA02',\r\n            contraGlNumber: '623055',\r\n            description: 'Transient',\r\n            glNumber: '623004',\r\n            id: 'ae1b58a4-3ebf-4850-af9b-b8cac4756868',\r\n            oneGL: null,\r\n            ptlGLNumber: null,\r\n            revenueTypesLocationLinkDTO: [],\r\n            status: 'A',\r\n            uniqueIdentifier: 'RR286',\r\n            serviceDTO: null\r\n          },\r\n          locationDTO: null,\r\n          status: 'A',\r\n          serviceDTO: null\r\n        },\r\n        sourceServiceName: {\r\n          applicableForDarma: true,\r\n          brandCode: 'CLH (PK1)',\r\n          closeDate: null,\r\n          companyId: 'PK001',\r\n          contractType: 'MANAGED',\r\n          id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n          openDate: null,\r\n          realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n          realEstateName: 'Bank of America Tower',\r\n          realEstateNumber: 'US-FL-RE-1003115',\r\n          serviceGroupName: 'Parking',\r\n          serviceId: 'PA-1000428',\r\n          serviceIdName: 'Bank of America Tower Parking',\r\n          serviceNameWithID: 'PA-1000428-Bank of America Tower Parking',\r\n          serviceType: 'Parking'\r\n        },\r\n        sourcedeferredCounter: '',\r\n        taxExemption: null\r\n      }\r\n    };\r\n    fixture.detectChanges();\r\n    component.totalAmountOfDeferred('');\r\n    expect(component.totalAmountOfDeferred).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should isDisabled', () => {\r\n    spyOn(component, 'isDisabled').and.callThrough();\r\n    const amount = 10;\r\n    const total = 15;\r\n    fixture.detectChanges();\r\n    component.isDisabled(amount, total);\r\n    expect(component.isDisabled).toHaveBeenCalled();\r\n  });\r\n\r\n  // it('should call  mysubscription', () => {\r\n  //   component.getLocationsSubscription = new Subscription();\r\n  //   spyOn(component.getLocationsSubscription, 'unsubscribe');\r\n  //   component.ngOnDestroy();\r\n  //   expect(component.getLocationsSubscription.unsubscribe).toHaveBeenCalled();\r\n  // });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\revenue-sources\\addrevenue.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnDestroy' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChangeDetectorRef' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatCalendar' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDatepicker' is defined but never used.","line":15,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DateAdapter' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDateFormats' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":27,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatSelect' is defined but never used.","line":39,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatPaginator' is defined but never used.","line":41,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Locations' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ITenderTypesServiceLinks' is defined but never used.","line":48,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IBankAccountServiceLinks' is defined but never used.","line":49,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RevenueTypesLocations' is defined but never used.","line":50,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDialog' is defined but never used.","line":56,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BrandsModel' is defined but never used.","line":60,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TranslateService' is defined but never used.","line":62,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":63,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2985,2988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2985,2988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3012,3015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3012,3015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3082,3085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3082,3085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3110,3113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3110,3113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3189,3192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3189,3192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3356,3359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3356,3359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3388,3391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3388,3391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3455,3458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3455,3458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3481,3484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3481,3484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3509,3512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3509,3512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3582,3585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3582,3585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3650,3653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3650,3653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3672,3675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3672,3675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3695,3698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3695,3698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3717,3720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3717,3720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3743,3746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3743,3746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3769,3772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3769,3772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3787,3790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3787,3790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3862,3865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3862,3865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3876,3879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3876,3879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3935,3938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3935,3938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3961,3964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3961,3964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4010,4013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4010,4013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4036,4039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4036,4039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4064,4067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4064,4067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4250,4253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4250,4253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4277,4280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4277,4280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4423,4426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4423,4426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4453,4456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4453,4456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5831,5834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5831,5834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":223,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":223,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":227,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":227,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":235,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":235,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":278,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":278,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9675,9678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9675,9678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":299,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":299,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'formChanges' should be typed.","line":299,"column":26,"nodeType":"Identifier","messageId":"missingArgType","endLine":299,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":303,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":303,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'sourceFormData' should be typed.","line":303,"column":24,"nodeType":"Identifier","messageId":"missingArgType","endLine":303,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":307,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":307,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":328,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":328,"endColumn":74},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":353,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":353,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":369,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":369,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed with a non-any type.","line":369,"column":24,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":369,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12543,12546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12543,12546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":381,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":381,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'locationID' should be typed with a non-any type.","line":381,"column":23,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":381,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":381,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12903,12906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12903,12906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":385,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13075,13078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13075,13078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":406,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":406,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'service' should be typed with a non-any type.","line":406,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":406,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":406,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13807,13810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13807,13810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":421,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":421,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'locationID' should be typed with a non-any type.","line":421,"column":20,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":421,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":421,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":421,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14489,14492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14489,14492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":427,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":427,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14697,14700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14697,14700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":446,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":446,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'locationID' should be typed with a non-any type.","line":446,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":446,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":446,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":446,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15383,15386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15383,15386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":470,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":470,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed.","line":470,"column":24,"nodeType":"Identifier","messageId":"missingArgType","endLine":470,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":474,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":474,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'Id' should be typed with a non-any type.","line":474,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":474,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":474,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":474,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16342,16345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16342,16345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":479,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":479,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16518,16521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16518,16521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":534,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":534,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":534,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":534,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed.","line":534,"column":15,"nodeType":"Identifier","messageId":"missingArgType","endLine":534,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":555,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":555,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed.","line":555,"column":17,"nodeType":"Identifier","messageId":"missingArgType","endLine":555,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":583,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":583,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":594,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":594,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lockRes' is defined but never used.","line":606,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":606,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":625,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":625,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":638,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":638,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":644,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":644,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'isSaveEditIndex' should be typed with a non-any type.","line":644,"column":21,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":644,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":644,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":644,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22781,22784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22781,22784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":675,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":679,"endColumn":4},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'editindex' should be typed with a non-any type.","line":677,"column":5,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":677,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":677,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":677,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24054,24057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24054,24057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deferredCounter' is defined but never used.","line":678,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":678,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'deferredCounter' should be typed with a non-any type.","line":678,"column":5,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":678,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":678,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":678,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24081,24084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24081,24084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":746,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":746,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27656,27659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27656,27659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":746,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":746,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27664,27667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27664,27667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":773,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":773,"endColumn":59},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":783,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":783,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is defined but never used.","line":783,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":783,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":802,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":802,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'isSubmit' should be typed with a non-any type.","line":802,"column":18,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":802,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":802,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":802,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29737,29740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29737,29740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":813,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":813,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'sourceDetailsData' should be typed.","line":813,"column":31,"nodeType":"Identifier","messageId":"missingArgType","endLine":813,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'status' should be typed.","line":813,"column":50,"nodeType":"Identifier","messageId":"missingArgType","endLine":813,"endColumn":56},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":883,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":883,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'status' should be typed with a non-any type.","line":883,"column":27,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":883,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":883,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":883,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33579,33582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33579,33582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":892,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":892,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":995,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":995,"endColumn":71},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'depositRevenueRequest' should be typed with a non-any type.","line":995,"column":26,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":995,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":995,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":995,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38791,38794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38791,38794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'revenueDate' should be typed with a non-any type.","line":995,"column":54,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":995,"endColumn":70},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":995,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":995,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38809,38812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38809,38812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lockRes' is defined but never used.","line":998,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":998,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is defined but never used.","line":1013,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":1013,"endColumn":56},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1033,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1033,"endColumn":68},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'editRevenueRequest' should be typed with a non-any type.","line":1033,"column":26,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":1033,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1033,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1033,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40251,40254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40251,40254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'revenueDate' should be typed with a non-any type.","line":1033,"column":51,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":1033,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1033,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1033,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40269,40272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40269,40272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'locRev' is defined but never used.","line":1036,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1036,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is defined but never used.","line":1051,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":1051,"endColumn":56},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1072,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1072,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1081,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1081,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'sourceObj' should be typed.","line":1081,"column":22,"nodeType":"Identifier","messageId":"missingArgType","endLine":1081,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'index' should be typed.","line":1081,"column":33,"nodeType":"Identifier","messageId":"missingArgType","endLine":1081,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1091,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1091,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'i' should be typed with a non-any type.","line":1091,"column":42,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":1091,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1091,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1091,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42329,42332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42329,42332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1136,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1136,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'defCount' should be typed.","line":1136,"column":25,"nodeType":"Identifier","messageId":"missingArgType","endLine":1136,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1142,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1142,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[44231,44234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[44231,44234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1156,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1156,"endColumn":12},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed with a non-any type.","line":1165,"column":17,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":1165,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1165,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1165,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[44790,44793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[44790,44793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1173,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1173,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'e' should be typed with a non-any type.","line":1173,"column":18,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":1173,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1173,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1173,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[44991,44994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[44991,44994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1181,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1181,"endColumn":66},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1250,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1250,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1257,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1257,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1262,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1262,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1271,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1271,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1275,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1275,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1286,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":1286,"endColumn":16}],"errorCount":0,"warningCount":158,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ChangeDetectionStrategy,\r\n  Inject,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport * as moment from 'moment';\r\nimport { MatCalendar, MatDatepicker } from '@angular/material/datepicker';\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_FORMATS,\r\n  MatDateFormats\r\n} from '@angular/material/core';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  Validators\r\n  // FormBuilder\r\n} from '@angular/forms';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport {\r\n  trigger,\r\n  style,\r\n  animate,\r\n  transition,\r\n  query,\r\n  stagger\r\n} from '@angular/animations';\r\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport {\r\n  Locations,\r\n  RevenueTypesDTO,\r\n  SourceDTO,\r\n  LocationDTO,\r\n  IServiceDTO,\r\n  ITenderTypesServiceLinks,\r\n  IBankAccountServiceLinks,\r\n  RevenueTypesLocations\r\n} from 'src/app/shared/model/revenueSource.model';\r\nimport {\r\n  returnCheckingObject,\r\n  differedAmountMonthYearObject\r\n} from '../../../shared/constants/utils';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { DialogDataExampleDialog } from '../../../shared/common-components/custom-model/custom-dialog';\r\nimport {\r\n  customModalData,\r\n  BrandsModel\r\n} from '../../../shared/model/applicationModel';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { UserResponseModel } from 'src/app/shared/model/loginApiResponse.model';\r\nimport get from 'lodash.get';\r\n\r\n@Component({\r\n  selector: 'app-addrevenue',\r\n  templateUrl: './addrevenue.component.html',\r\n  styleUrls: ['./addrevenue.component.scss'],\r\n  animations: [\r\n    trigger('logoAni', [\r\n      transition('* => *', [\r\n        query(':enter', style({ opacity: 0 }), { optional: true }),\r\n        query(\r\n          ':enter',\r\n          stagger('100ms', [animate('1s', style({ opacity: 1 }))]),\r\n          { optional: true }\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class AddrevenueComponent implements OnInit, OnDestroy {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  @ViewChild('locationSelect') locationSelect: MatSelect;\r\n  @ViewChild('serviceSelect') serviceSelect: MatSelect;\r\n  @ViewChild('paginatorPos') paginator: MatPaginator;\r\n  @ViewChild('table', { static: true }) table;\r\n  exampleHeader = ExampleHeader;\r\n  loginApiResponse: UserResponseModel;\r\n  locations: LocationDTO[] = [];\r\n  tenderTypes: ITenderTypesServiceLinks[] = [];\r\n  bankAccounts: IBankAccountServiceLinks[] = [];\r\n  locationID: any;\r\n  depositIdentifier: any;\r\n  revenueTypes: RevenueTypesLocations[] = [];\r\n  sourceService: any;\r\n  selectedLocationIs: any;\r\n  isNewSource: boolean;\r\n  saveNewSourceDetails = new MatTableDataSource<any>();\r\n  revenueForm: FormGroup;\r\n  totalSourceAmount: number;\r\n  remainingSourceAmount: number;\r\n  editRevenueDeposit: boolean;\r\n  status: string;\r\n  subscription: any;\r\n  depositRevenueResponse: any;\r\n  isEditSource: boolean;\r\n  tempid: number;\r\n  hiddenTempId: any;\r\n  editSourceAmount: any;\r\n  revenueLocResponse: any;\r\n  sourceDeferredYn: string;\r\n  source: SourceDTO;\r\n  sourceAmount: any;\r\n  displayForLocation: boolean;\r\n\r\n  getLocationsSubscription: any;\r\n  editFinalObj: any;\r\n  subscription1: any;\r\n  servicetypes: any[] = [];\r\n  ServiceID: any;\r\n  revenueServiceId: any;\r\n  sourceId: any;\r\n  formSubmitAttempt: boolean;\r\n  maxDate: Date;\r\n  amountcorrection: any;\r\n  role: any;\r\n  isCorrectionFlag: boolean;\r\n  editChangeCheckFlag: any;\r\n\r\n  mySubscription: any;\r\n\r\n  /** New Changes */\r\n  revenueFormData: any;\r\n  sourceFormDataIs: any;\r\n  editSourceObjectIs: any | null;\r\n  displayedColumnsOfSource: string[] = [\r\n    'id',\r\n    'revenue_type',\r\n    'revenue_date',\r\n    'amount',\r\n    'actions'\r\n  ];\r\n  public filteredLocations: ReplaySubject<any[]> = new ReplaySubject<any[]>(1);\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n  loggedUserDetails: any = null;\r\n  BrandResponse: any = [];\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private authService: AuthenticateService,\r\n    private translate: TranslateService,\r\n    private alertService: SweetAlertService,\r\n    private router: Router,\r\n    private dialog: MatDialog // private fb: FormBuilder\r\n  ) {\r\n    this.userSessionService.selectedLanguage.subscribe((data) => {\r\n      this.translate.use(data);\r\n      this.translate.setDefaultLang(data);\r\n    });\r\n    this.revenueForm = new FormGroup({\r\n      brandType: new FormControl(null, Validators.required),\r\n      revenueLocationName: new FormControl('', Validators.required),\r\n      revenueServiceId: new FormControl('', Validators.required),\r\n      revenueAmount: new FormControl('', Validators.required),\r\n      revenueTenderType: new FormControl(null, Validators.required),\r\n      revenueBankAccount: new FormControl('', Validators.required),\r\n      revenueDepositIdentifier: new FormControl({ value: '', disabled: true }),\r\n      locFilterCtrl: new FormControl(''),\r\n      revenueFromDate: new FormControl('', Validators.required)\r\n    });\r\n    this.isNewSource = false;\r\n    this.totalSourceAmount = 0;\r\n    this.remainingSourceAmount = 0;\r\n    this.tempid = 0;\r\n    this.maxDate = new Date();\r\n    userSessionService.userAccess();\r\n    this.userSessionService.correctionNeededRevenue.subscribe(\r\n      (revenue: any) => {\r\n        this.revenueLocResponse = revenue;\r\n      }\r\n    );\r\n    this.userSessionService.currentUser.subscribe(\r\n      (res) => (this.loggedUserDetails = res)\r\n    );\r\n    this.userSessionService.allReefBrands.subscribe(\r\n      (response: BrandsModel[]) => (this.BrandResponse = response)\r\n    );\r\n  }\r\n  ngOnInit(): void {\r\n    // this.blockUI.start('loading....');\r\n    this.amountcorrection = this.revenueForm.value.revenueAmount;\r\n    if (this.revenueLocResponse) {\r\n      if (this.loggedUserDetails.brandCode === 'All') {\r\n        const brandTypeIs = this.BrandResponse.find(\r\n          (brand: BrandsModel) => brand.code === 'All'\r\n        );\r\n        this.revenueForm.controls.brandType.setValue(brandTypeIs);\r\n      }\r\n      this.getEditrevenueDetails();\r\n    }\r\n    if (this.loggedUserDetails.brandCode !== 'All') {\r\n      this.revenueForm.controls.brandType.clearValidators();\r\n      this.revenueForm.controls.brandType.updateValueAndValidity();\r\n      this.getLocationsBasedOnBrand();\r\n    }\r\n    this.userSessionService.currentUser.subscribe(\r\n      (res: UserResponseModel) => (this.loginApiResponse = res)\r\n    );\r\n    this.userSessionService.currentUser.subscribe(\r\n      (res: UserResponseModel) => (this.role = get(res, 'authorities[0].code'))\r\n    );\r\n    // this.role = this.loginApiResponse.authorities[0].code;\r\n    this.revenueForm.controls.locFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterLocations();\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setInitialValue();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n    if (this.getLocationsSubscription) {\r\n      this.getLocationsSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  getLocationsBasedOnBrand() {\r\n    this.blockUI.start('Loading....');\r\n    const payloadObj = { id: '', code: '' };\r\n    if (this.loggedUserDetails.brandCode === 'All') {\r\n      payloadObj.id = this.revenueForm.value?.brandType?.id;\r\n      payloadObj.code = this.revenueForm.value?.brandType?.code;\r\n    } else {\r\n      payloadObj.id = this.loggedUserDetails.brandId;\r\n      payloadObj.code = this.loggedUserDetails.brandCode;\r\n    }\r\n    this.authService.getLocationsBasedOnBrand(payloadObj).subscribe(\r\n      (response: LocationDTO[]) => {\r\n        this.locations = response;\r\n        for (const user of this.locations) {\r\n          user.locationWithID = user.locationID + ' - ' + user.name;\r\n        }\r\n        this.filteredLocations.next(this.locations.slice());\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the initial value after the filteredBanks are loaded initially\r\n   */\r\n  private setInitialValue() {\r\n    this.filteredLocations\r\n      .pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // setting the compareWith property to a comparison function\r\n        // triggers initializing the selection according to the initial value of\r\n        // the form control (i.e. _initializeSelection())\r\n        // this needs to be done after the filteredBanks are loaded initially\r\n        // and after the mat-option elements are available\r\n        this.locationSelect.compareWith = (a: LocationDTO, b: LocationDTO) =>\r\n          a && b && a.id === b.id;\r\n      });\r\n  }\r\n\r\n  filterLocations() {\r\n    if (!this.locations) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.revenueForm.controls.locFilterCtrl.value;\r\n    if (!search) {\r\n      this.filteredLocations.next(this.locations.slice());\r\n      return;\r\n    } else {\r\n      search = search.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredLocations.next(\r\n      this.locations.filter(\r\n        (location: any) =>\r\n          location.locationWithID.toLowerCase().indexOf(search) > -1\r\n      )\r\n    );\r\n  }\r\n\r\n  formValidationCheck = (formChanges) => {\r\n    this.revenueFormData = formChanges;\r\n  };\r\n\r\n  getSourceFormData = (sourceFormData) => {\r\n    this.sourceFormDataIs = sourceFormData;\r\n  };\r\n\r\n  getEditrevenueDetails() {\r\n    this.editFinalObj = this.revenueLocResponse;\r\n    const locationDtoObj = this.revenueLocResponse.locationDTO;\r\n    if (this.loggedUserDetails.brandCode === 'All') {\r\n      // const brandObjIs = this.BrandResponse.find((brand: any) => brand.code === 'All');\r\n      // this.revenueForm.controls.brandType.setValue(brandObjIs);\r\n      this.getLocationsBasedOnBrand();\r\n    }\r\n    locationDtoObj.locationWithID = `${this.revenueLocResponse.locationDTO.locationID}-${this.revenueLocResponse.locationDTO.name}`;\r\n    this.revenueForm.controls.revenueLocationName.setValue(locationDtoObj);\r\n    this.getServiceIdDetails(this.revenueLocResponse.locationDTO.id);\r\n    this.amountcorrection = this.revenueLocResponse.amount;\r\n    this.revenueForm.controls.revenueAmount.setValue(\r\n      this.revenueLocResponse.amount\r\n    );\r\n    this.revenueForm.controls.revenueFromDate.setValue(\r\n      this.revenueLocResponse.revenueDate\r\n    );\r\n\r\n    this.depositIdentifier = this.revenueLocResponse.depositIdentifier;\r\n\r\n    this.revenueLocResponse.sourcesDTO.forEach((element: SourceDTO, index) => {\r\n      // this.saveNewSourceDetails.data.push(element);\r\n      this.saveNewSourceDetails.data = [\r\n        ...this.saveNewSourceDetails.data,\r\n        element\r\n      ];\r\n      this.editRevenueDeposit = true;\r\n    });\r\n    this.saveNewSourceDetails.data.forEach((element) => {\r\n      this.totalSourceAmount =\r\n        this.totalSourceAmount + parseFloat(element.amount);\r\n    });\r\n    this.remainingSourceAmount =\r\n      parseFloat(this.revenueForm.value.revenueAmount) - this.totalSourceAmount;\r\n\r\n    this.userSessionService.currentUser.subscribe(\r\n      (res: UserResponseModel) => (this.loginApiResponse = res)\r\n    );\r\n    this.getTenderDetails(this.revenueLocResponse.serviceDTO.id);\r\n    this.getBankAccountDetails(this.revenueLocResponse.serviceDTO.id);\r\n    this.getRevenueTypeDetails(this.revenueLocResponse.serviceDTO.id);\r\n\r\n    this.blockUI.stop();\r\n  }\r\n\r\n  goBackToRevenues() {\r\n    const modalData = new customModalData();\r\n    modalData.icon = 'error';\r\n    modalData.text =\r\n      'You will lose the data that you entered before Save, Are you sure ?';\r\n    modalData.title = 'Are you sure';\r\n    modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n    const dialogRef = this.dialog.open(DialogDataExampleDialog, {\r\n      data: modalData\r\n    });\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        this.router.navigate(['/app/dashboard']);\r\n      }\r\n    });\r\n  }\r\n  getDepositIdentifier(event: any) {\r\n    if (event) {\r\n      this.locationID = event.value.id;\r\n      this.revenueServiceId = '';\r\n      this.servicetypes = [];\r\n      this.servicetypes.length = 0;\r\n      this.revenueForm.controls.revenueServiceId.setValue('');\r\n      this.getServiceIdDetails(this.locationID);\r\n      this.blockUI.stop();\r\n    }\r\n  }\r\n\r\n  getServiceIdDetails(locationID: any) {\r\n    this.blockUI.start('Loading....');\r\n    this.servicetypes = [];\r\n    this.subscription = this.authService.getServiceId(locationID).subscribe(\r\n      (response: any[]) => {\r\n        this.servicetypes = response;\r\n        for (const item of this.servicetypes) {\r\n          item.serviceNameWithID = `${item.serviceId}-${item.serviceIdName}`;\r\n          if (this.revenueLocResponse && this.revenueLocResponse.serviceDTO) {\r\n            if (\r\n              item.serviceId === this.revenueLocResponse.serviceDTO.serviceId\r\n            ) {\r\n              this.revenueForm.controls.revenueServiceId.patchValue(item);\r\n            }\r\n          }\r\n        }\r\n        this.blockUI.stop();\r\n        this.subscription.unsubscribe();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n  getBankandTenderTypes(service: any) {\r\n    this.sourceService = service && service.value && service.value.serviceId;\r\n    const timeStamp = moment().format('MMDDYYYYHHMMSS');\r\n    let hash = this.getGUID() + '-' + timeStamp;\r\n    if (this.sourceService) {\r\n      hash = this.sourceService + '-' + hash;\r\n    }\r\n    hash = hash.toUpperCase();\r\n    this.depositIdentifier = hash;\r\n    this.revenueForm.controls.revenueDepositIdentifier.setValue(hash);\r\n    this.revenueForm.controls.revenueTenderType.setValue(null);\r\n    this.revenueForm.controls.revenueBankAccount.setValue('');\r\n    this.getTenderDetails(service.value.id);\r\n    this.getBankAccountDetails(service.value.id);\r\n  }\r\n  getTenderDetails(locationID: any) {\r\n    this.blockUI.start('Loading....');\r\n    this.tenderTypes = [];\r\n    this.subscription = this.authService\r\n      .getTenderDetailsfromapi({ id: locationID })\r\n      .subscribe(\r\n        (response: any) => {\r\n          this.tenderTypes = response['body'] as ITenderTypesServiceLinks[];\r\n          if (this.revenueLocResponse) {\r\n            const tenderObject = this.tenderTypes.find(\r\n              (o) =>\r\n                o.tenderTypesDTO.code ===\r\n                this.revenueLocResponse.tenderTypesDTO.code\r\n            );\r\n            this.revenueForm.controls.revenueTenderType.setValue(tenderObject);\r\n          }\r\n          this.blockUI.stop();\r\n          this.subscription.unsubscribe();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n  }\r\n  getBankAccountDetails(locationID: any) {\r\n    this.blockUI.start('Loading....');\r\n    this.bankAccounts = [];\r\n    this.authService.getBankAccountDetailsfromapi(locationID).subscribe(\r\n      (response: IBankAccountServiceLinks[]) => {\r\n        this.bankAccounts = response;\r\n        if (this.revenueLocResponse) {\r\n          const bankAccountObject = this.bankAccounts.find(\r\n            (o) =>\r\n              o.bankAccountsDTO.bankName ===\r\n              this.revenueLocResponse.bankAccountsDTO.bankName\r\n          );\r\n          this.revenueForm.controls.revenueBankAccount.setValue(\r\n            bankAccountObject\r\n          );\r\n        }\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n  getSourceRevenueType(event) {\r\n    const idIs = event ? event : this.revenueForm.value.revenueServiceId.id;\r\n    this.getRevenueTypeDetails(idIs);\r\n  }\r\n  getRevenueTypeDetails(Id: any) {\r\n    this.blockUI.start('loading...');\r\n    this.subscription = this.authService\r\n      .getRevenueTypeDetailsFromApi({ id: Id })\r\n      .subscribe(\r\n        (response: any) => {\r\n          const dataIs = response['body'] as RevenueTypesLocations[];\r\n          const selectedTenderType = this.revenueForm.value\r\n            .revenueTenderType as ITenderTypesServiceLinks;\r\n          const free_discount =\r\n            selectedTenderType &&\r\n            selectedTenderType.tenderTypesDTO.description\r\n              .toLowerCase()\r\n              .includes('free & discount');\r\n          // const car_count = selectedTenderType && selectedTenderType.tenderTypesDTO.description.toLowerCase().includes('car count');\r\n          const client_bank =\r\n            this.revenueForm.value &&\r\n            (this.revenueForm.value\r\n              .revenueBankAccount as IBankAccountServiceLinks);\r\n          if (free_discount) {\r\n            this.revenueTypes = dataIs.filter(\r\n              (revenues: RevenueTypesLocations) =>\r\n                revenues.revenueTypesDTO.description\r\n                  .toLowerCase()\r\n                  .includes('free & discount')\r\n            );\r\n          }\r\n          // else if (car_count) {\r\n          //   this.revenueTypes = dataIs.filter((revenues: RevenueTypesLocations) => revenues.revenueTypesDTO.description.toLowerCase().includes('car count'));\r\n          // }\r\n          else {\r\n            if (\r\n              client_bank &&\r\n              client_bank?.bankAccountsDTO?.bankName?.toLocaleLowerCase() ===\r\n                'client'\r\n            ) {\r\n              this.revenueTypes = dataIs.filter(\r\n                (revenues: RevenueTypesLocations) =>\r\n                  revenues.revenueTypesDTO.ptlGLNumber\r\n              );\r\n            } else {\r\n              this.revenueTypes = dataIs.filter(\r\n                (revenues: RevenueTypesLocations) =>\r\n                  !revenues.revenueTypesDTO.description\r\n                    .toLowerCase()\r\n                    .includes('free & discount')\r\n              );\r\n            }\r\n            // this.revenueTypes = dataIs;\r\n          }\r\n          this.userSessionService.setSourceRevenues(this.revenueTypes);\r\n          this.blockUI.stop();\r\n          this.subscription.unsubscribe();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      );\r\n  }\r\n  amountCheck(event) {\r\n    const revenueTypesDTO = this.sourceFormDataIs.value.sourceRevenueType\r\n      .revenueTypesDTO;\r\n    const revenueTypesDTOContainsDiffer =\r\n      revenueTypesDTO &&\r\n      revenueTypesDTO.description &&\r\n      revenueTypesDTO.description.includes('Deferred Monthly');\r\n    if (revenueTypesDTOContainsDiffer) {\r\n      this.sourceDeferredYn = 'Y';\r\n      this.sourceAmount = this.sourceFormDataIs.value.sourceAmount;\r\n    } else {\r\n      this.sourceDeferredYn = '';\r\n      this.sourceAmount = '';\r\n      const deferredCounter = this.sourceFormDataIs.value.sourcedeferredCounter;\r\n      for (let i = 1; i <= Number(deferredCounter); i++) {\r\n        this.source['deferredMonth' + (i + 1)] = '';\r\n        this.source['deferredYear' + (i + 1)] = '';\r\n      }\r\n    }\r\n  }\r\n  /**Check Amount difference */\r\n  checkDeferred(event) {\r\n    if (\r\n      event &&\r\n      event?.revenueTypesDTO?.description?.toLocaleLowerCase() ==\r\n        'due to location'\r\n    ) {\r\n      this.displayForLocation = true;\r\n      this.sourceDeferredYn = 'N';\r\n    } else {\r\n      this.displayForLocation = false;\r\n    }\r\n    const revenueTypesDTO = this.sourceFormDataIs.value?.sourceRevenueType\r\n      ?.revenueTypesDTO;\r\n    const revenueTypesDTOContainsDiffer =\r\n      event &&\r\n      event.revenueTypesDTO &&\r\n      event.revenueTypesDTO.description &&\r\n      revenueTypesDTO.description.includes('Deferred Monthly');\r\n    if (revenueTypesDTOContainsDiffer) {\r\n      this.sourceDeferredYn = 'Y';\r\n      this.sourceAmount = this.sourceFormDataIs?.value?.sourceAmount;\r\n    } else {\r\n      this.sourceDeferredYn = '';\r\n      this.sourceAmount = '';\r\n    }\r\n  }\r\n\r\n  /**Validate Form fields */\r\n  validateAllFormFields(formGroup: FormGroup) {\r\n    Object.keys(formGroup?.controls).forEach((field) => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFormFields(control);\r\n      }\r\n    });\r\n  }\r\n  /** Add New Source */\r\n  addNewSource() {\r\n    if (this.revenueForm?.valid) {\r\n      this.revenueForm.controls.revenueAmount.disable();\r\n      this.blockUI.start('loading');\r\n      this.isCorrectionFlag =\r\n        this.revenueLocResponse && this.revenueLocResponse.isCorrection\r\n          ? true\r\n          : false;\r\n      const revenueDate = moment(\r\n        this.revenueForm.controls.revenueFromDate.value\r\n      ).format('YYYY-MM-DD');\r\n      this.authService.checkLockUnlock(revenueDate).subscribe(\r\n        (lockRes) => {\r\n          this.editSourceAmount = '';\r\n          this.isNewSource = true;\r\n          this.editSourceObjectIs = null;\r\n          this.isEditSource = false;\r\n          this.formSubmitAttempt = true;\r\n          if (this.revenueLocResponse && this.revenueLocResponse.serviceDTO) {\r\n            this.getRevenueTypeDetails(this.revenueLocResponse.serviceDTO.id);\r\n            this.sourceService = this.revenueForm.value.revenueServiceId;\r\n            this.selectedLocationIs = this.revenueForm.value.revenueLocationName;\r\n          } else {\r\n            this.getRevenueTypeDetails(\r\n              this.revenueForm.controls.revenueServiceId.value.id\r\n            );\r\n            this.sourceService = this.revenueForm.value.revenueServiceId;\r\n            this.selectedLocationIs = this.revenueForm.value.revenueLocationName;\r\n          }\r\n          this.blockUI.stop();\r\n        },\r\n        (error) => {\r\n          this.blockUI.stop();\r\n          const eror = {};\r\n          eror['status'] = 422;\r\n          this.alertService.showErrorInformation(eror);\r\n        }\r\n      );\r\n      this.blockUI.stop();\r\n    } else {\r\n      this.validateAllFormFields(this.revenueForm);\r\n    }\r\n  }\r\n  /**Cancel editing Source */\r\n  cancelEdit() {\r\n    this.revenueForm.controls.revenueAmount.enable();\r\n    this.isNewSource = false;\r\n    this.editSourceObjectIs = null;\r\n    this.sourceDeferredYn = '';\r\n  }\r\n  saveEditNewSource(isSaveEditIndex: any) {\r\n    this.revenueForm.controls.revenueAmount.enable();\r\n    const isSave = isSaveEditIndex && isSaveEditIndex.isSave;\r\n    const editindex = isSaveEditIndex && isSaveEditIndex.editIndex;\r\n\r\n    this.totalSourceAmount = 0;\r\n    const deferredCounter = this.sourceFormDataIs.value.sourcedeferredCounter;\r\n\r\n    if (this.sourceDeferredYn === 'Y') {\r\n      if (this.totalAmountOfDeferred(deferredCounter) == false) {\r\n        const modalData = new customModalData();\r\n        modalData.icon = 'error';\r\n        modalData.text =\r\n          'Deferred Amount sum does not match with source Amount.';\r\n        modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n        modalData.title = 'Amount is not Equal';\r\n        this.dialog.open(DialogDataExampleDialog, {\r\n          data: modalData\r\n        });\r\n      } else {\r\n        this.displayForLocation = false;\r\n        this.sourceDeferredYn = '';\r\n        this.saveEditObjectCreation(isSave, editindex, deferredCounter);\r\n      }\r\n    } else {\r\n      this.displayForLocation = false;\r\n      this.sourceDeferredYn = '';\r\n      this.saveEditObjectCreation(isSave, editindex, deferredCounter);\r\n    }\r\n  }\r\n  /** Save Or Edit Source Object */\r\n  saveEditObjectCreation(\r\n    isSave: boolean,\r\n    editindex: any,\r\n    deferredCounter: any\r\n  ) {\r\n    const sourceRevenueDetailsObj = new SourceDTO();\r\n    const serviceDTO = new IServiceDTO();\r\n    const revenueDTO = new RevenueTypesDTO();\r\n    const locationDTOObj = new LocationDTO();\r\n    sourceRevenueDetailsObj.dueToLocation = null;\r\n    sourceRevenueDetailsObj.payor = null;\r\n    sourceRevenueDetailsObj.checkNumber = null;\r\n    sourceRevenueDetailsObj.dueToLocAmount = null;\r\n\r\n    if (!isSave) {\r\n      sourceRevenueDetailsObj.id = this.sourceId;\r\n    }\r\n    // if (\r\n    //   this.revenueLocResponse &&\r\n    //   this.revenueLocResponse.serviceDTO != undefined\r\n    // ) {\r\n    //   serviceDTO.serviceId = this.revenueLocResponse.serviceDTO.serviceId;\r\n    //   serviceDTO.id = this.revenueLocResponse.serviceDTO.id;\r\n    // } else {\r\n    // serviceDTO.serviceId = this.revenueForm.controls.revenueServiceId.value.serviceId;\r\n    // serviceDTO.id = this.revenueForm.controls.revenueServiceId.value.id;\r\n    serviceDTO.serviceId = this.sourceFormDataIs.value.sourceServiceName.serviceId;\r\n    serviceDTO.serviceType = this.sourceFormDataIs.value.sourceServiceName.serviceType;\r\n    serviceDTO.id = this.sourceFormDataIs.value.sourceServiceName.id;\r\n    // }\r\n    sourceRevenueDetailsObj.serviceDTO = serviceDTO;\r\n    if (\r\n      this.revenueLocResponse &&\r\n      this.revenueLocResponse.isCorrection == true\r\n    ) {\r\n      sourceRevenueDetailsObj.correctiveYn = 'Y';\r\n      if (this.sourceFormDataIs.value.note) {\r\n        sourceRevenueDetailsObj.correctiveDescr = this.sourceFormDataIs.value.note;\r\n      } else {\r\n        sourceRevenueDetailsObj.correctiveDescr = null;\r\n      }\r\n    } else {\r\n      sourceRevenueDetailsObj.correctiveDescr = null;\r\n      sourceRevenueDetailsObj.correctiveYn = 'N';\r\n    }\r\n    revenueDTO.id = this.sourceFormDataIs.value.sourceRevenueType.revenueTypesDTO.id;\r\n    revenueDTO.code = this.sourceFormDataIs.value.sourceRevenueType.revenueTypesDTO.code;\r\n    revenueDTO.description = this.sourceFormDataIs.value.sourceRevenueType.revenueTypesDTO.description;\r\n    revenueDTO.uniqueIdentifier = this.sourceFormDataIs.value.sourceRevenueType.revenueTypesDTO.uniqueIdentifier;\r\n    sourceRevenueDetailsObj.sourceRevenueType = this.sourceFormDataIs.value.sourceRevenueType.revenueTypesDTO.description;\r\n    sourceRevenueDetailsObj.revenueTypesDTO = revenueDTO;\r\n    locationDTOObj.id = this.sourceFormDataIs.value.realEstate.id;\r\n    locationDTOObj.locationID = this.sourceFormDataIs.value.realEstate.locationID;\r\n    sourceRevenueDetailsObj.locationDTO = locationDTOObj;\r\n    sourceRevenueDetailsObj.amount = this.sourceFormDataIs.value.sourceAmount;\r\n    sourceRevenueDetailsObj.carCount = this.sourceFormDataIs.value.carCount;\r\n    sourceRevenueDetailsObj.taxExemption = this.sourceFormDataIs.value.taxExemption;\r\n    sourceRevenueDetailsObj.transactionDate = moment(\r\n      this.revenueForm.controls.revenueFromDate.value\r\n    ).format('YYYY-MM-DDT00:00:00.000');\r\n    if (\r\n      this.sourceFormDataIs.value?.sourceRevenueType?.revenueTypesDTO?.description?.toLocaleLowerCase() ==\r\n      'due to location'\r\n    ) {\r\n      sourceRevenueDetailsObj.dueToLocation = this.sourceFormDataIs.value.dueToLocation.locationID;\r\n      sourceRevenueDetailsObj.payor = this.sourceFormDataIs.value.payor;\r\n      sourceRevenueDetailsObj.checkNumber = this.sourceFormDataIs.value.checkNumber;\r\n      sourceRevenueDetailsObj.dueToLocAmount = this.sourceFormDataIs.value.sourceAmount;\r\n    }\r\n    if (this.sourceFormDataIs.value.differedAmounts.length > 0) {\r\n      this.sourceFormDataIs.value.differedAmounts.forEach(\r\n        (amount: any, i: any) => {\r\n          sourceRevenueDetailsObj['deferredMonth' + (i + 1)] =\r\n            amount['deferredMonth'];\r\n          sourceRevenueDetailsObj['deferredYear' + (i + 1)] =\r\n            amount['deferredYear'];\r\n          sourceRevenueDetailsObj['deferredAmount' + (i + 1)] =\r\n            amount['deferredAmount'];\r\n        }\r\n      );\r\n    }\r\n    if (isSave) {\r\n      this.saveNewSourceDetails.data = [\r\n        ...this.saveNewSourceDetails.data,\r\n        sourceRevenueDetailsObj\r\n      ];\r\n      // this.saveNewSourceDetails.data.push(sourceRevenueDetailsObj);\r\n    } else {\r\n      this.saveNewSourceDetails.data.forEach((element, index) => {\r\n        if (editindex == index) {\r\n          this.saveNewSourceDetails.data[index] = sourceRevenueDetailsObj;\r\n          this.saveNewSourceDetails._updateChangeSubscription();\r\n        }\r\n      });\r\n      this.isNewSource = false;\r\n      this.isEditSource = false;\r\n      this.editSourceObjectIs = null;\r\n    }\r\n    this.saveNewSourceDetails.data.forEach((element, index) => {\r\n      this.totalSourceAmount =\r\n        this.totalSourceAmount + parseFloat(element.amount);\r\n    });\r\n    this.remainingSourceAmount =\r\n      parseFloat(this.revenueForm.value.revenueAmount) - this.totalSourceAmount;\r\n    this.isNewSource = false;\r\n  }\r\n\r\n  /**Save with out saving */\r\n  savewithout(status: string) {\r\n    const modalData = new customModalData();\r\n    modalData.icon = 'error';\r\n    modalData.text =\r\n      'Revenue and Source information will be saved without submitting daily deposits. Do you want to Continue?';\r\n    modalData.title = 'Save Without Submitting Daily Deposits';\r\n    modalData.delete = true;\r\n    modalData.imagePath = 'assets/images/popup_images/error_popup.png';\r\n    modalData.buttonText = 'Yes';\r\n    const dialogRef = this.dialog.open(DialogDataExampleDialog, {\r\n      data: modalData\r\n    });\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        this.submitRevenueAndSources(this.status);\r\n      }\r\n    });\r\n  }\r\n  /** Submit Source and Revenue */\r\n  saveSubmitting(isSubmit: any) {\r\n    if (isSubmit == true) {\r\n      this.status = 'S';\r\n\r\n      this.submitRevenueAndSources(this.status);\r\n    } else {\r\n      this.status = 'E';\r\n      this.savewithout(this.status);\r\n    }\r\n  }\r\n  /** Preparing revenue and Sources */\r\n  revenueSourceObjectCreation(sourceDetailsData, status) {\r\n    // const locationDTO: LocationDTO = new LocationDTO();\r\n    const bankAccountsSource = { id: '', uniqueIdentifier: '' };\r\n    const tenderTypesDTO = { id: '', uniqueIdentifier: '' };\r\n    // const revenueTypesDTO: RevenueTypesDTO = new RevenueTypesDTO();\r\n    // const serviceDTO: IServiceDTO = new IServiceDTO();\r\n    const sourceDTO = [];\r\n    const sourceNotesDTO = [];\r\n    sourceDetailsData.forEach((element, index) => {\r\n      let revenueSource = element;\r\n      revenueSource['subAccountCode'] = 'B';\r\n      revenueSource['status'] = status;\r\n      revenueSource['pci'] = false;\r\n      // locationDTO['id'] = this.locationID;\r\n      revenueSource['tempId'] = index;\r\n      // revenueSource['locationDTO'] = locationDTO;\r\n      // revenueTypesDTO = element.revenueTypesDTO\r\n      // serviceDTO= element.serviceDTO;\r\n      revenueSource['revenueTypesDTO'] = element.revenueTypesDTO;\r\n      // revenueSource['serviceDTO'] = element.serviceDTO;\r\n      // console.log(this.editRevenueDeposit, '--this.editRevenueDeposit--');\r\n      if (this.editRevenueDeposit) {\r\n        revenueSource['id'] = element.id;\r\n        // if (this.revenueForm.controls.revenueLocationName.value.id) {\r\n        //   locationDTO[\r\n        //     'id'\r\n        //   ] = this.revenueForm.controls.revenueLocationName.value.id;\r\n        // } else {\r\n        //   locationDTO['id'] =\r\n        //     this.revenueLocResponse && this.revenueLocResponse.locationDTO.id;\r\n        // }\r\n        if (this.revenueForm.value.revenueBankAccount.bankAccountsDTO) {\r\n          bankAccountsSource.id = this.revenueForm.value.revenueBankAccount.bankAccountsDTO.id;\r\n          bankAccountsSource.uniqueIdentifier = this.revenueForm.value.revenueBankAccount.bankAccountsDTO.uniqueIdentifier;\r\n        } else {\r\n          bankAccountsSource.id =\r\n            this.revenueLocResponse &&\r\n            this.revenueLocResponse.bankAccountsDTO.id;\r\n          bankAccountsSource.uniqueIdentifier =\r\n            this.revenueLocResponse &&\r\n            this.revenueLocResponse.bankAccountsDTO.uniqueIdentifier;\r\n        }\r\n        if (this.revenueForm.value.revenueTenderType.tenderTypesDTO) {\r\n          tenderTypesDTO.id = this.revenueForm.value.revenueTenderType.tenderTypesDTO.id;\r\n          tenderTypesDTO.uniqueIdentifier = this.revenueForm.value.revenueTenderType.tenderTypesDTO.uniqueIdentifier;\r\n        } else {\r\n          tenderTypesDTO.id =\r\n            this.revenueLocResponse &&\r\n            this.revenueLocResponse.tenderTypesDTO.id;\r\n          tenderTypesDTO.uniqueIdentifier =\r\n            this.revenueLocResponse &&\r\n            this.revenueLocResponse.tenderTypesDTO.uniqueIdentifier;\r\n        }\r\n        revenueSource['revenueDTO'] = element.revenueDTO;\r\n        // revenueSource['serviceDTO'] = element.serviceDTO;\r\n        // revenueSource['locationDTO'] = element.locationDTO;\r\n        revenueSource['bankAccountsDTO'] = bankAccountsSource;\r\n        revenueSource['tenderTypesDTO'] = tenderTypesDTO;\r\n        revenueSource['sourceNotesDTO'] = sourceNotesDTO;\r\n        const conditionsCheckObject = returnCheckingObject(element);\r\n        revenueSource = Object.assign(revenueSource, conditionsCheckObject);\r\n      }\r\n      const differObjectData = differedAmountMonthYearObject(element);\r\n      revenueSource = Object.assign(revenueSource, differObjectData);\r\n      delete revenueSource.sourceRevenueType;\r\n      sourceDTO.push(revenueSource);\r\n    });\r\n    return sourceDTO;\r\n  }\r\n  /** Final Submit revenue and Sources */\r\n  submitRevenueAndSources(status: any) {\r\n    const locationDTO = new LocationDTO();\r\n    const serviceDTO = { id: '', serviceId: '', serviceType: '' };\r\n    const bankAccountsSource = { id: '', uniqueIdentifier: '' };\r\n    const tenderTypesDTO = { id: '', uniqueIdentifier: '' };\r\n    const depositRevenueRequest = new Object();\r\n    const revenueDate = moment(\r\n      this.revenueForm.controls.revenueFromDate.value\r\n    ).format('YYYY-MM-DD');\r\n    console.log('this.revenueForm', this.revenueForm);\r\n    if (this.revenueForm.controls.revenueLocationName.value.id) {\r\n      locationDTO.id = this.revenueForm.controls.revenueLocationName.value.id;\r\n      locationDTO.locationID = this.revenueForm.controls.revenueLocationName.value.locationID;\r\n    } else {\r\n      locationDTO.id =\r\n        this.revenueLocResponse && this.revenueLocResponse.locationDTO.id;\r\n      locationDTO.locationID =\r\n        this.revenueLocResponse &&\r\n        this.revenueLocResponse.locationDTO.locationID;\r\n    }\r\n    if (this.revenueForm.controls.revenueServiceId.value.id) {\r\n      serviceDTO.id = this.revenueForm.controls.revenueServiceId.value.id;\r\n      serviceDTO.serviceId = this.revenueForm.controls.revenueServiceId.value.serviceId;\r\n      serviceDTO.serviceType = this.revenueForm.controls.revenueServiceId.value.serviceType;\r\n    } else {\r\n      serviceDTO.id =\r\n        this.revenueLocResponse && this.revenueLocResponse.serviceDTO.id;\r\n      serviceDTO.serviceId =\r\n        this.revenueLocResponse && this.revenueLocResponse.serviceDTO.serviceId;\r\n      serviceDTO.serviceType =\r\n        this.revenueLocResponse &&\r\n        this.revenueLocResponse.serviceDTO.serviceType;\r\n    }\r\n\r\n    if (this.revenueForm.value.revenueBankAccount.bankAccountsDTO) {\r\n      bankAccountsSource.id = this.revenueForm.value.revenueBankAccount.bankAccountsDTO.id;\r\n      bankAccountsSource.uniqueIdentifier = this.revenueForm.value.revenueBankAccount.bankAccountsDTO.uniqueIdentifier;\r\n    } else {\r\n      bankAccountsSource.id =\r\n        this.revenueLocResponse && this.revenueLocResponse.bankAccountsDTO.id;\r\n      bankAccountsSource.uniqueIdentifier =\r\n        this.revenueLocResponse &&\r\n        this.revenueLocResponse.bankAccountsDTO.uniqueIdentifier;\r\n    }\r\n    if (this.revenueForm.value.revenueTenderType.tenderTypesDTO) {\r\n      tenderTypesDTO.id = this.revenueForm.value.revenueTenderType.tenderTypesDTO.id;\r\n      tenderTypesDTO.uniqueIdentifier = this.revenueForm.value.revenueTenderType.tenderTypesDTO.uniqueIdentifier;\r\n    } else {\r\n      tenderTypesDTO.id =\r\n        this.revenueLocResponse && this.revenueLocResponse.tenderTypesDTO.id;\r\n      tenderTypesDTO.uniqueIdentifier =\r\n        this.revenueLocResponse &&\r\n        this.revenueLocResponse.tenderTypesDTO.uniqueIdentifier;\r\n    }\r\n    depositRevenueRequest['revenueDate'] = moment(\r\n      this.revenueForm.controls.revenueFromDate.value\r\n    ).format('YYYY-MM-DDT00:00:00.000');\r\n    depositRevenueRequest[\r\n      'depositIdentifier'\r\n    ] = this.revenueForm.controls.revenueDepositIdentifier.value;\r\n    depositRevenueRequest['amount'] = this.revenueForm.value.revenueAmount;\r\n    depositRevenueRequest['status'] = status;\r\n    depositRevenueRequest['serviceDTO'] = serviceDTO;\r\n    depositRevenueRequest['locationDTO'] = locationDTO;\r\n    depositRevenueRequest['bankAccountsDTO'] = bankAccountsSource;\r\n    depositRevenueRequest['tenderTypesDTO'] = tenderTypesDTO;\r\n    depositRevenueRequest['sourcesDTO'] = this.revenueSourceObjectCreation(\r\n      this.saveNewSourceDetails.data,\r\n      status\r\n    );\r\n    depositRevenueRequest['submittedDate'] =\r\n      status === 'S' ? moment().format('YYYY-MM-DDT00:00:00.000') : null;\r\n    if (!this.editRevenueDeposit) {\r\n      this.createRevenueAndSource(depositRevenueRequest, revenueDate);\r\n    } else {\r\n      const exportNavisionBy = {};\r\n      if (\r\n        this.revenueLocResponse &&\r\n        this.revenueLocResponse.exportNavisionBy &&\r\n        this.revenueLocResponse.exportNavisionBy.id\r\n      ) {\r\n        exportNavisionBy['id'] = this.revenueLocResponse.exportNavisionBy.id;\r\n        this.editFinalObj['exportNavisionBy'] = exportNavisionBy;\r\n      } else {\r\n        this.editFinalObj['exportNavisionBy'] = null;\r\n      }\r\n\r\n      this.editFinalObj['status'] = status;\r\n      this.editFinalObj['submittedDate'] = moment().format(\r\n        'YYYY-MM-DDT00:00:00.000'\r\n      );\r\n      this.editFinalObj['bankAccountsDTO'] = bankAccountsSource;\r\n      this.editFinalObj['tenderTypesDTO'] = tenderTypesDTO;\r\n      this.editFinalObj['locationDTO'] = locationDTO;\r\n      this.editFinalObj[\r\n        'amount'\r\n      ] = this.revenueForm.controls.revenueAmount.value;\r\n      this.editFinalObj['revenueDate'] = moment(\r\n        this.revenueForm.controls.revenueFromDate.value\r\n      ).format('YYYY-MM-DDT00:00:00.000');\r\n      this.editFinalObj[\r\n        'depositIdentifier'\r\n      ] = this.revenueForm.controls.revenueDepositIdentifier.value;\r\n      this.editFinalObj['sourcesDTO'] = this.revenueSourceObjectCreation(\r\n        this.saveNewSourceDetails.data,\r\n        status\r\n      );\r\n      this.updateRevenueAndSource(this.editFinalObj, revenueDate);\r\n    }\r\n  }\r\n\r\n  /**Create revenue and sources */\r\n  createRevenueAndSource(depositRevenueRequest: any, revenueDate: any) {\r\n    this.blockUI.start('Loading....');\r\n    this.authService.checkLockUnlock(revenueDate).subscribe(\r\n      (lockRes) => {\r\n        this.subscription = this.authService\r\n          .createRevenueAndSource(depositRevenueRequest)\r\n          .subscribe(\r\n            (data) => {\r\n              this.blockUI.stop();\r\n              const modalData = new customModalData();\r\n              modalData.icon = 'success';\r\n              modalData.text = 'Revenue Created successfully !';\r\n              modalData.title = 'Created';\r\n              modalData.imagePath =\r\n                'assets/images/popup_images/success_popup.png';\r\n              const dialogRef = this.dialog.open(DialogDataExampleDialog, {\r\n                data: modalData\r\n              });\r\n              dialogRef.afterClosed().subscribe((result) => {\r\n                this.depositRevenueResponse = data;\r\n                this.editRevenueDeposit = false;\r\n                this.subscription.unsubscribe();\r\n                this.router.navigate(['/app/dashboard']);\r\n              });\r\n            },\r\n            (error) => {\r\n              this.blockUI.stop();\r\n              this.alertService.showErrorInformation(error);\r\n            }\r\n          );\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n  /** Update Revenue and Source */\r\n  updateRevenueAndSource(editRevenueRequest: any, revenueDate: any) {\r\n    this.blockUI.start('Loading....');\r\n    this.authService.checkLockUnlock(revenueDate).subscribe(\r\n      (locRev) => {\r\n        this.subscription = this.authService\r\n          .updateRevenueAndSource(editRevenueRequest)\r\n          .subscribe(\r\n            (data) => {\r\n              this.blockUI.stop();\r\n              const modalData = new customModalData();\r\n              modalData.icon = 'success';\r\n              modalData.text = 'Revenue updated successfully !';\r\n              modalData.title = 'Updated';\r\n              modalData.imagePath =\r\n                'assets/images/popup_images/success_popup.png';\r\n              const dialogRef = this.dialog.open(DialogDataExampleDialog, {\r\n                data: modalData\r\n              });\r\n              dialogRef.afterClosed().subscribe((result) => {\r\n                this.depositRevenueResponse = data;\r\n                this.editRevenueDeposit = false;\r\n                this.subscription.unsubscribe();\r\n                this.router.navigate(['/app/dashboard']);\r\n              });\r\n            },\r\n            (error) => {\r\n              this.blockUI.stop();\r\n              this.alertService.showErrorInformation(error);\r\n            }\r\n          );\r\n      },\r\n      (error) => {\r\n        this.blockUI.stop();\r\n        this.alertService.showErrorInformation(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  /** calculate Total Source and revenue Amount */\r\n  calculateTotalandsourceAmount() {\r\n    this.totalSourceAmount = 0;\r\n    this.saveNewSourceDetails.data.forEach((element) => {\r\n      this.totalSourceAmount =\r\n        this.totalSourceAmount + parseFloat(element.amount);\r\n    });\r\n  }\r\n\r\n  /**Delete Source */\r\n  deleteSoureDetails(sourceObj, index) {\r\n    const object = { sourceObj, index };\r\n    object.index = null;\r\n    this.editSourceObjectIs = object;\r\n    this.saveNewSourceDetails.data.splice(index, 1);\r\n    this.saveNewSourceDetails._updateChangeSubscription();\r\n    this.calculateTotalandsourceAmount();\r\n  }\r\n\r\n  /** Edit Source Details */\r\n  editSoureDetails(sourceObj: SourceDTO, i: any) {\r\n    this.blockUI.start();\r\n    this.editSourceObjectIs = null;\r\n    if (\r\n      sourceObj?.revenueTypesDTO?.description?.toLocaleLowerCase() !==\r\n      'due to location'\r\n    ) {\r\n      this.displayForLocation = false;\r\n    } else {\r\n      this.displayForLocation = true;\r\n    }\r\n    const revenueTypesDTO = sourceObj && sourceObj.revenueTypesDTO;\r\n    const revenueTypesDTOContainsDiffer =\r\n      revenueTypesDTO &&\r\n      revenueTypesDTO.description &&\r\n      revenueTypesDTO.description.includes('Deferred Monthly');\r\n    if (!revenueTypesDTOContainsDiffer) {\r\n      this.sourceDeferredYn = '';\r\n    }\r\n    if (revenueTypesDTOContainsDiffer) {\r\n      this.sourceDeferredYn = 'Y';\r\n    }\r\n    // if (this.revenueLocResponse && this.revenueLocResponse.serviceDTO) {\r\n    //   const serviceDTOIs = sourceObj && sourceObj.serviceDTO;\r\n    //   const serviceId = serviceDTOIs ? serviceDTOIs.id : this.revenueForm.value.revenueServiceId.id;\r\n    //   this.getRevenueTypeDetails(this.revenueLocResponse.serviceDTO.id);\r\n    // } else {\r\n    const serviceDTOIs = sourceObj && sourceObj.serviceDTO;\r\n    const serviceId = serviceDTOIs\r\n      ? serviceDTOIs.id\r\n      : this.revenueForm.value.revenueServiceId.id;\r\n    this.getRevenueTypeDetails(serviceId);\r\n    // }\r\n    this.editSourceObjectIs = { sourceObj, index: i };\r\n    this.editSourceAmount = sourceObj.amount;\r\n    this.sourceService = sourceObj.serviceDTO;\r\n    this.selectedLocationIs = sourceObj.locationDTO;\r\n    this.isEditSource = true;\r\n    this.isNewSource = true;\r\n    this.sourceId = sourceObj.id;\r\n    this.hiddenTempId = i;\r\n    this.blockUI.stop();\r\n  }\r\n\r\n  /** Total Amount Differ */\r\n  totalAmountOfDeferred(defCount) {\r\n    let total = 0;\r\n    if (!defCount) {\r\n      return true;\r\n    }\r\n    if (this.sourceFormDataIs.value.differedAmounts.length > 0) {\r\n      this.sourceFormDataIs.value.differedAmounts.forEach((amount: any) => {\r\n        total += parseFloat(amount['deferredAmount']);\r\n      });\r\n    }\r\n    let result = false;\r\n    const tTotal = parseFloat(Number(total).toFixed(2));\r\n    if (parseFloat(this.sourceFormDataIs.value.sourceAmount) === tTotal) {\r\n      result = true;\r\n    } else {\r\n      result = false;\r\n    }\r\n    return result;\r\n  }\r\n  /** Getting GUID */\r\n  getGUID() {\r\n    function fd() {\r\n      return Math.floor((1 + Math.random()) * 0x10000)\r\n        .toString(16)\r\n        .substring(1);\r\n    }\r\n    return fd() + fd();\r\n  }\r\n\r\n  onInputChange(event: any, inpPattern: string): void {\r\n    const input = event.key;\r\n    if (input.match(inpPattern) == null) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /** Validating Number */\r\n  validateNumber(e: any) {\r\n    const input = String.fromCharCode(e.charCode);\r\n    const reg = /^\\d*\\.?\\d{2}$/;\r\n    if (!reg.test(input)) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  isDisabled(amountcorrection: number, totalSourceAmount: number) {\r\n    const result = parseFloat(\r\n      (amountcorrection - totalSourceAmount).toFixed(2)\r\n    );\r\n    if (result == 0) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\n/** Custom header component for datepicker. */\r\n@Component({\r\n  selector: 'example-header',\r\n  styles: [\r\n    `\r\n      .example-header {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 0.5em;\r\n      }\r\n\r\n      .example-header-label {\r\n        flex: 1;\r\n        height: 1em;\r\n        font-weight: 500;\r\n        text-align: center;\r\n      }\r\n\r\n      .example-double-arrow .mat-icon {\r\n        margin: -22%;\r\n      }\r\n    `\r\n  ],\r\n  template: `\r\n    <div class=\"example-header\">\r\n      <button mat-icon-button (click)=\"previousClicked()\">\r\n        <mat-icon>keyboard_arrow_left</mat-icon>\r\n      </button>\r\n      <span\r\n        role=\"button\"\r\n        (click)=\"openaYear()\"\r\n        class=\"example-header-label cursor-pointer\"\r\n        >{{ periodLabel }}</span\r\n      >\r\n\r\n      <button mat-icon-button (click)=\"nextClicked()\">\r\n        <mat-icon>keyboard_arrow_right</mat-icon>\r\n      </button>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ExampleHeader<D> implements OnDestroy {\r\n  private _destroyed = new Subject<void>();\r\n\r\n  constructor(\r\n    private _datePicker: MatDatepicker<D>,\r\n    private _calendar: MatCalendar<D>,\r\n    private _dateAdapter: DateAdapter<D>,\r\n    @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n    cdr: ChangeDetectorRef\r\n  ) {\r\n    _calendar.stateChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => cdr.markForCheck());\r\n  }\r\n\r\n  public todayClicked() {\r\n    this._calendar.activeDate = this._dateAdapter.today();\r\n    this._calendar._dateSelected(this._calendar.activeDate);\r\n    this._datePicker.select(this._dateAdapter.today());\r\n    this._datePicker.close();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  get periodLabel() {\r\n    return this._dateAdapter\r\n      .format(\r\n        this._calendar.activeDate,\r\n        this._dateFormats.display.monthYearLabel\r\n      )\r\n      .toLocaleUpperCase();\r\n  }\r\n\r\n  public openaYear() {\r\n    this._calendar.currentView = 'multi-year';\r\n  }\r\n\r\n  previousClicked() {\r\n    let mode = 'month';\r\n    if (this._calendar.currentView === 'multi-year') {\r\n      mode = 'year';\r\n    }\r\n    this._calendar.activeDate =\r\n      mode === 'month'\r\n        ? this._dateAdapter.addCalendarMonths(this._calendar.activeDate, -1)\r\n        : this._dateAdapter.addCalendarYears(this._calendar.activeDate, -1);\r\n  }\r\n\r\n  nextClicked() {\r\n    const mode = 'month';\r\n    this._calendar.activeDate =\r\n      mode === 'month'\r\n        ? this._dateAdapter.addCalendarMonths(this._calendar.activeDate, 1)\r\n        : this._dateAdapter.addCalendarYears(this._calendar.activeDate, 1);\r\n  }\r\n}\r\n\r\n/**  Copyright 2019 Google LLC. All Rights Reserved.\r\n    Use of this source code is governed by an MIT-style license that\r\n    can be found in the LICENSE file at http://angular.io/license */\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\revenue-sources\\revenue-sources.module.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\revision-sources\\addrevision.component.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentFixture' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'inject' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tick' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'By' is defined but never used.","line":27,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'forkJoin' is defined but never used.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'from' is defined but never used.","line":28,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":31,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customModalData' is defined but never used.","line":32,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dialog' is assigned a value but never used.","line":69,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userSessionService' is assigned a value but never used.","line":72,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'alertService' is assigned a value but never used.","line":73,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":73,"endColumn":17}],"errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  async,\r\n  ComponentFixture,\r\n  inject,\r\n  fakeAsync,\r\n  TestBed,\r\n  tick\r\n} from '@angular/core/testing';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { PersistenceService } from 'angular-persistence';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.services';\r\nimport {\r\n  HttpClientTestingModule,\r\n  HttpTestingController\r\n} from '@angular/common/http/testing';\r\nimport {\r\n  AddrevisionComponent,\r\n  searchCalenderHeader\r\n} from './addrevision.component';\r\nimport { RevisionSourcesModule } from './revision-sources.module';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { By } from '@angular/platform-browser';\r\nimport { forkJoin, from, of } from 'rxjs';\r\nimport { Locations } from 'src/app/shared/model/revenueSource.model';\r\nimport { ApiService } from 'src/app/shared/services/api.service';\r\nimport { UserResponseModel } from 'src/app/shared/model/loginApiResponse.model';\r\nimport { customModalData } from 'src/app/shared/model/applicationModel';\r\n\r\ndescribe('AddrevisionComponent', () => {\r\n  let component: AddrevisionComponent;\r\n  let fixture: ComponentFixture<AddrevisionComponent>;\r\n  let dialog: MatDialog;\r\n  let authenticateService: AuthenticateService;\r\n  let httpMock: HttpTestingController;\r\n  let userSessionService: UserSessionService;\r\n  let alertService: SweetAlertService;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [AddrevisionComponent, searchCalenderHeader],\r\n      imports: [\r\n        RouterTestingModule,\r\n        RevisionSourcesModule,\r\n        HttpClientTestingModule,\r\n        TranslateModule.forRoot()\r\n      ],\r\n      providers: [\r\n        FormBuilder,\r\n        UserSessionService,\r\n        PersistenceService,\r\n        SweetAlertService,\r\n        AuthenticateService,\r\n        ApiService,\r\n        {\r\n          provide: ApiService,\r\n          useValue: '516a725f-819e-4836-9993-5f6260a9cff3'\r\n        },\r\n        TranslateService\r\n      ]\r\n    });\r\n\r\n    fixture = TestBed.createComponent(AddrevisionComponent);\r\n    component = fixture.componentInstance;\r\n    dialog = TestBed.inject(MatDialog);\r\n    httpMock = TestBed.inject(HttpTestingController);\r\n    authenticateService = TestBed.inject(AuthenticateService);\r\n    userSessionService = TestBed.inject(UserSessionService);\r\n    alertService = TestBed.inject(SweetAlertService);\r\n  }));\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should fetch the services via GET call', () => {\r\n    const mockService = [\r\n      {\r\n        id: 'ff979fb9-7b3b-4369-80b9-978655b8a05a',\r\n        realEstateId: '84bdcdd9-0954-46f6-9d8d-a95fe9f3d2bf',\r\n        realEstateName: 'Fairbanks International Aiport',\r\n        realEstateNumber: 'US-AK-RE-1003632',\r\n        serviceGroupName: 'Parking',\r\n        serviceId: 'PA-1000052',\r\n        serviceIdName: 'Fairbanks International Aiport',\r\n        serviceNameWithID:\r\n          'PA-1000052 - Fairbanks International Aiport(US-AK-RE-1003632)',\r\n        serviceType: 'Parking'\r\n      }\r\n    ];\r\n\r\n    const location_id = '19b9f5d0-09f6-472a-8735-e2560e010503';\r\n\r\n    authenticateService.getServiceId(location_id).subscribe((data) => {\r\n      expect(data).toEqual(mockService);\r\n    });\r\n    const req = httpMock.expectOne(\r\n      `${\r\n        authenticateService.CONFIG.LMR_BASE_URI +\r\n        authenticateService.CONFIG.SERVCICEID_BASED_ON_LOCATION\r\n      }?location_id=${location_id}`\r\n    );\r\n    expect(req.request.method).toBe('GET');\r\n    req.flush(mockService);\r\n  });\r\n\r\n  it('should fetch the realestate via POST call', () => {\r\n    const allLocations: Locations[] = [\r\n      {\r\n        id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        locationID: 'US-FL-RE-1003115',\r\n        name: 'Bank of America Tower',\r\n        locationWithID: 'US-FL-RE-1003115 - Bank of America Tower'\r\n      }\r\n    ];\r\n\r\n    const payload = {\r\n      id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n      code: 'All'\r\n    };\r\n\r\n    authenticateService.getLocationsBasedOnBrand(payload).subscribe((data) => {\r\n      expect(data).toEqual(allLocations);\r\n    });\r\n    const req = httpMock.expectOne(\r\n      `${\r\n        authenticateService.CONFIG.LMR_BASE_URI +\r\n        authenticateService.CONFIG.BRAND_LOCATIONS\r\n      }`\r\n    );\r\n    expect(req.request.method).toBe('POST');\r\n    req.flush(allLocations);\r\n  });\r\n\r\n  it('should get service codes based on service id credit', () => {\r\n    const mockEvent = {\r\n      source: {},\r\n      value: {\r\n        applicableForDarma: true,\r\n        brandCode: 'Republic Parking',\r\n        closeDate: null,\r\n        companyId: 'RPS001',\r\n        contractType: 'MANAGED',\r\n        id: '8e02a0cc-76b6-4a83-bb13-dd14f180e1da',\r\n        openDate: null,\r\n        realEstateId: 'a3d5d909-ef58-448a-99cb-d7d77ab5d7e9',\r\n        realEstateName: 'ANCHORAGE,AK AIRPORT',\r\n        realEstateNumber: 'US-AK-RE-1004052',\r\n        serviceGroupName: null,\r\n        serviceId: 'PA-1001109',\r\n        serviceIdName: 'ANCHORAGE,AK-AIRPORT Parking',\r\n        serviceType: 'Parking'\r\n      }\r\n    };\r\n\r\n    const serviceCodeObj = [\r\n      {\r\n        id: '1a09cae9-68f0-40f9-b0ee-38c501a2fa8d',\r\n        serviceCode: 'PA04',\r\n        serviceCodeDescription: 'Event',\r\n        serviceIdType: 'Parking'\r\n      },\r\n      {\r\n        id: '97ce5515-3f23-4e35-ae45-2519c7790410',\r\n        serviceCode: 'PA99',\r\n        serviceCodeDescription: 'Parking Non-allocable',\r\n        serviceIdType: 'Parking'\r\n      }\r\n    ];\r\n\r\n    (component.selectedType = 'credit'),\r\n      spyOn(component, 'getChangeServiceValue').and.callThrough();\r\n    spyOn(authenticateService, 'getServiceCodes').and.returnValue(\r\n      of(serviceCodeObj)\r\n    );\r\n    component.getChangeServiceValue(mockEvent.value.serviceType, 'credit');\r\n    authenticateService\r\n      .getServiceCodes(mockEvent.value.serviceType)\r\n      .subscribe((res) => {\r\n        component.serviceCodesByServiceTypeForCredit = res;\r\n      });\r\n    expect(component.getChangeServiceValue).toHaveBeenCalled();\r\n    expect(mockEvent.value).toBeDefined();\r\n    expect(authenticateService.getServiceCodes).toHaveBeenCalled();\r\n    expect(component.serviceCodesByServiceTypeForCredit).toEqual(\r\n      serviceCodeObj\r\n    );\r\n  });\r\n\r\n  it('should get job codes based on selected service code for credit', () => {\r\n    const mockEvent = {\r\n      source: {},\r\n      value: {\r\n        id: '1a09cae9-68f0-40f9-b0ee-38c501a2fa8d',\r\n        serviceCode: 'PA04',\r\n        serviceCodeDescription: 'Event',\r\n        serviceIdType: 'Parking'\r\n      }\r\n    };\r\n    const jobCodeObj = [\r\n      {\r\n        directCost: true,\r\n        id: '73ebc8a5-c742-4fd6-8b96-a37d8d7bd2aa',\r\n        indirectCost: false,\r\n        jobCode: 'Valet Supervisor',\r\n        sGandA: false,\r\n        serviceCode: 'PA04'\r\n      }\r\n    ];\r\n    component.selectedType = 'credit';\r\n    spyOn(component, 'getChangeServiceCodevalue').and.callThrough();\r\n    spyOn(authenticateService, 'getJobCodes').and.returnValue(of(jobCodeObj));\r\n    component.getChangeServiceCodevalue(mockEvent.value.serviceCode, 'credit');\r\n    authenticateService\r\n      .getJobCodes(mockEvent.value.serviceCode)\r\n      .subscribe((res) => {\r\n        component.jobCodesByServiceCodeForCredit = res;\r\n      });\r\n    expect(component.getChangeServiceCodevalue).toHaveBeenCalled();\r\n    expect(mockEvent.value).toBeDefined();\r\n    expect(authenticateService.getJobCodes).toHaveBeenCalled();\r\n    expect(component.jobCodesByServiceCodeForCredit).toEqual(jobCodeObj);\r\n  });\r\n\r\n  it('should get the gl codes based on jobcodes for credit', () => {\r\n    const mockEvent = {\r\n      source: {},\r\n      value: {\r\n        directCost: true,\r\n        id: '73ebc8a5-c742-4fd6-8b96-a37d8d7bd2aa',\r\n        indirectCost: false,\r\n        jobCode: 'Valet Supervisor',\r\n        sGandA: false,\r\n        serviceCode: 'PA04'\r\n      }\r\n    };\r\n\r\n    const mockGlObj = [\r\n      {\r\n        glCodes: '900505',\r\n        glCodesDescription: 'Wages - Base pay',\r\n        id: '0d864321-701f-4699-8d30-f211d95c84e6'\r\n      }\r\n    ];\r\n\r\n    component.selectedType = 'credit';\r\n    expect(component.glCodesByJobCodeForCredit.length).toEqual(0);\r\n    spyOn(component, 'getChangeJobCodevalue').and.callThrough();\r\n    spyOn(authenticateService, 'getGlCodes').and.returnValue(of(mockGlObj));\r\n    component.getChangeJobCodevalue(mockEvent.value.jobCode, 'credit');\r\n    authenticateService.getGlCodes(mockEvent.value.jobCode).subscribe((res) => {\r\n      component.glCodesByJobCodeForCredit = res;\r\n    });\r\n    expect(component.getChangeJobCodevalue).toHaveBeenCalled();\r\n    expect(mockEvent.value).toBeDefined();\r\n    expect(authenticateService.getGlCodes).toHaveBeenCalled();\r\n    expect(component.glCodesByJobCodeForCredit).toEqual(mockGlObj);\r\n  });\r\n\r\n  it('should get service codes based on service id for debit', () => {\r\n    const mockEvent = {\r\n      source: {},\r\n      value: {\r\n        applicableForDarma: true,\r\n        brandCode: 'Republic Parking',\r\n        closeDate: null,\r\n        companyId: 'RPS001',\r\n        contractType: 'MANAGED',\r\n        id: '8e02a0cc-76b6-4a83-bb13-dd14f180e1da',\r\n        openDate: null,\r\n        realEstateId: 'a3d5d909-ef58-448a-99cb-d7d77ab5d7e9',\r\n        realEstateName: 'ANCHORAGE,AK AIRPORT',\r\n        realEstateNumber: 'US-AK-RE-1004052',\r\n        serviceGroupName: null,\r\n        serviceId: 'PA-1001109',\r\n        serviceIdName: 'ANCHORAGE,AK-AIRPORT Parking',\r\n        serviceType: 'Parking'\r\n      }\r\n    };\r\n\r\n    const serviceCodeObj = [\r\n      {\r\n        id: '1a09cae9-68f0-40f9-b0ee-38c501a2fa8d',\r\n        serviceCode: 'PA04',\r\n        serviceCodeDescription: 'Event',\r\n        serviceIdType: 'Parking'\r\n      },\r\n      {\r\n        id: '97ce5515-3f23-4e35-ae45-2519c7790410',\r\n        serviceCode: 'PA99',\r\n        serviceCodeDescription: 'Parking Non-allocable',\r\n        serviceIdType: 'Parking'\r\n      }\r\n    ];\r\n\r\n    (component.selectedType = 'debit'),\r\n      expect(component.serviceCodesByServiceTypeForDebit.length).toEqual(0);\r\n    spyOn(component, 'getChangeServiceValue').and.callThrough();\r\n    spyOn(authenticateService, 'getServiceCodes').and.returnValue(\r\n      of(serviceCodeObj)\r\n    );\r\n    component.getChangeServiceValue(mockEvent.value.serviceType, 'debit');\r\n    authenticateService\r\n      .getServiceCodes(mockEvent.value.serviceType)\r\n      .subscribe((res) => {\r\n        component.serviceCodesByServiceTypeForDebit = res;\r\n      });\r\n    expect(component.getChangeServiceValue).toHaveBeenCalled();\r\n    expect(mockEvent.value).toBeDefined();\r\n    expect(authenticateService.getServiceCodes).toHaveBeenCalled();\r\n    expect(component.serviceCodesByServiceTypeForDebit).toEqual(serviceCodeObj);\r\n  });\r\n\r\n  it('should get job codes based on selected service code for debit', () => {\r\n    const mockEvent = {\r\n      source: {},\r\n      value: {\r\n        id: '1a09cae9-68f0-40f9-b0ee-38c501a2fa8d',\r\n        serviceCode: 'PA04',\r\n        serviceCodeDescription: 'Event',\r\n        serviceIdType: 'Parking'\r\n      }\r\n    };\r\n    const jobCodeObj = [\r\n      {\r\n        directCost: true,\r\n        id: '73ebc8a5-c742-4fd6-8b96-a37d8d7bd2aa',\r\n        indirectCost: false,\r\n        jobCode: 'Valet Supervisor',\r\n        sGandA: false,\r\n        serviceCode: 'PA04'\r\n      }\r\n    ];\r\n    component.selectedType = 'debit';\r\n    expect(component.jobCodesByServiceCodeForDebit.length).toEqual(0);\r\n    spyOn(component, 'getChangeServiceCodevalue').and.callThrough();\r\n    spyOn(authenticateService, 'getJobCodes').and.returnValue(of(jobCodeObj));\r\n    component.getChangeServiceCodevalue(mockEvent.value.serviceCode, 'debit');\r\n    authenticateService\r\n      .getJobCodes(mockEvent.value.serviceCode)\r\n      .subscribe((res) => {\r\n        component.jobCodesByServiceCodeForDebit = res;\r\n      });\r\n    expect(component.getChangeServiceCodevalue).toHaveBeenCalled();\r\n    expect(mockEvent.value).toBeDefined();\r\n    expect(authenticateService.getJobCodes).toHaveBeenCalled();\r\n    expect(component.jobCodesByServiceCodeForDebit).toEqual(jobCodeObj);\r\n  });\r\n\r\n  it('should get the gl codes based on jobcodes for debit', fakeAsync(() => {\r\n    const mockEvent = {\r\n      source: {},\r\n      value: {\r\n        directCost: true,\r\n        id: '73ebc8a5-c742-4fd6-8b96-a37d8d7bd2aa',\r\n        indirectCost: false,\r\n        jobCode: 'Valet Supervisor',\r\n        sGandA: false,\r\n        serviceCode: 'PA04'\r\n      }\r\n    };\r\n\r\n    const mockGlObj = [\r\n      {\r\n        glCodes: '900505',\r\n        glCodesDescription: 'Wages - Base pay',\r\n        id: '0d864321-701f-4699-8d30-f211d95c84e6'\r\n      }\r\n    ];\r\n\r\n    component.selectedType = 'debit';\r\n    expect(component.glCodesByJobCodeForDebit.length).toEqual(0);\r\n    spyOn(component, 'getChangeJobCodevalue').and.callThrough();\r\n    spyOn(authenticateService, 'getGlCodes').and.returnValue(of(mockGlObj));\r\n    component.getChangeJobCodevalue(mockEvent.value.jobCode, 'debit');\r\n    authenticateService.getGlCodes(mockEvent.value.jobCode).subscribe((res) => {\r\n      component.glCodesByJobCodeForDebit = res;\r\n    });\r\n    expect(component.getChangeJobCodevalue).toHaveBeenCalled();\r\n    expect(mockEvent.value).toBeDefined();\r\n    expect(authenticateService.getGlCodes).toHaveBeenCalled();\r\n    expect(component.glCodesByJobCodeForDebit).toEqual(mockGlObj);\r\n  }));\r\n\r\n  // it('should get the current user', () => {\r\n\r\n  //   const mockUser = {\r\n  //     access_token: \"20f6c76e-32c2-45df-b504-035c05550e60\",\r\n  //     token_type: \"bearer\",\r\n  //     refresh_token: \"47ce2272-1473-4f63-98d5-b0e1cc76fc17\",\r\n  //     expires_in: 27549,\r\n  //     scope: \"DARMA\",\r\n  //     firstName: \"Vasim\",\r\n  //     lastName: \"Mujawar\",\r\n  //     brandId: \"6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D\",\r\n  //     session_id: \"A3749FA011503A926B070D43A81AEA04\",\r\n  //     userName: \"vasim.mujawar\",\r\n  //     authorities: [\r\n  //       {\r\n  //         id: 3,\r\n  //         name: null,\r\n  //         code: \"ROLE_DARMA_ADMIN\",\r\n  //         description: \"Site Administrator\",\r\n  //         status: \"A\",\r\n  //         usertype: \"DARMA\",\r\n  //         authority: \"ROLE_DARMA_ADMIN\"\r\n  //       }\r\n  //     ],\r\n  //     brandCode: \"All\"\r\n  //   }\r\n  //   // spyOn(userSessionService, 'currentUser').and.returnValue(of(mockUser));\r\n  //   component.ngOnInit();\r\n  //   userSessionService.currentUser.subscribe((res: UserResponseModel) => component.loggedUserDetails = res);\r\n  //   expect(userSessionService.currentUser).toHaveBeenCalled();\r\n  // });\r\n\r\n  it('should get locations Based on brand', () => {\r\n    const locationObj: Locations[] = [\r\n      {\r\n        id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        locationID: 'US-FL-RE-1003115',\r\n        name: 'Bank of America Tower',\r\n        locationWithID: 'US-FL-RE-1003115 - Bank of America Tower'\r\n      }\r\n    ];\r\n    spyOn(component, 'getLocationsBasedOnBrand').and.callThrough();\r\n    spyOn(authenticateService, 'getLocationsBasedOnBrand').and.returnValue(\r\n      of(locationObj)\r\n    );\r\n    const brandType = {\r\n      id: '6DD13C09-34BB-4FDE-AD16-70F4A3AD2C6D',\r\n      code: 'All'\r\n    };\r\n\r\n    component.getLocationsBasedOnBrand();\r\n    authenticateService.getLocationsBasedOnBrand(brandType).subscribe((res) => {\r\n      component.realEstateLocations = res;\r\n    });\r\n    expect(component.getLocationsBasedOnBrand).toHaveBeenCalled();\r\n    expect(authenticateService.getLocationsBasedOnBrand).toHaveBeenCalled();\r\n    expect(component.realEstateLocations).toEqual(locationObj);\r\n  });\r\n\r\n  it('should filter locationData proper', () => {\r\n    const locationObj = [new Locations()];\r\n    spyOn(component, 'filterLocations').and.callThrough();\r\n    component.filterLocations();\r\n    component.realEstateLocations = locationObj;\r\n    expect(component.filterLocations).toHaveBeenCalled();\r\n  });\r\n\r\n  /*it('should add a revision', () => {\r\n    const mockObj = [\r\n      {\r\n        id: '79292535-bdbe-4387-8654-0627a05b66f8',\r\n        amount: 45.5,\r\n        billable: 'B',\r\n        service: {\r\n          id: '4b740ae3-e07c-4bc1-9a80-c2534289ba83',\r\n          serviceId: 'PA-1000093',\r\n          serviceIdName: 'Wellesley Meter Collections',\r\n          serviceType: 'Parking',\r\n          serviceGroupName: 'Parking',\r\n          realEstateName: null,\r\n          realEstateNumber: null,\r\n          realEstateId: '4b65068c-0ab5-4cef-9b29-efc4dee4aaae',\r\n          openDate: '2021-01-07T00:00:00.000',\r\n          closeDate: null,\r\n          contractType: 'MANAGED',\r\n          companyId: null,\r\n          brandCode: null,\r\n          applicableForDarma: true\r\n        },\r\n        serviceCodes: {\r\n          id: 'bf231d81-e67d-495d-97ea-8f9c4329b4f3',\r\n          serviceIdType: 'Parking',\r\n          serviceCode: 'PA04',\r\n          serviceCodeDescription: 'Event'\r\n        },\r\n        jobCodes: {\r\n          id: 'bf286c46-6970-4c63-8c15-480116690b08',\r\n          jobCode: 'VALET',\r\n          directCost: true,\r\n          indirectCost: false,\r\n          sGandA: false,\r\n          serviceCode: 'PA04'\r\n        },\r\n        glCodeDetails: {\r\n          id: '7e8fb3c7-00c5-44ee-a2f3-881e44b1f3fd',\r\n          glCodes: '700525',\r\n          glCodesDescription: 'Wages - Training'\r\n        },\r\n        location: {\r\n          id: '4b65068c-0ab5-4cef-9b29-efc4dee4aaae',\r\n          locationID: 'US-MA-RE-1007908',\r\n          name: 'Wellesley Meter Collections',\r\n          clientLegalName: null,\r\n          address1: 'Town Hall, 525 Washington St',\r\n          address2: null,\r\n          city: 'Wellesley',\r\n          county: null,\r\n          state: 'MA',\r\n          zipCode: '2482',\r\n          status: 'A',\r\n          phone: null,\r\n          cell: null,\r\n          fax: null,\r\n          ext: null,\r\n          companyName: 'Republic Parking',\r\n          executive: null,\r\n          serviceType: null,\r\n          contractType: null,\r\n          applicableForDarma: true,\r\n          noofSpaces: null,\r\n          subsidyType: null,\r\n          parentLocationID: null,\r\n          parentLocationName: null,\r\n          notesDTO: [],\r\n          tenderTypesLnkDTO: [],\r\n          revenueTypesLnkDTO: [],\r\n          bankAccountsLocationLinkDTO: [],\r\n          burdensDTO: [],\r\n          locationMoreInfoDTO: null,\r\n          darmaUser: null,\r\n          brandCode: 'Republic Parking',\r\n          brandDTO: null,\r\n          dataView: null,\r\n          hoursOfOperation: null,\r\n          noOfGarageLevels: null,\r\n          noOfEntryLanes: null,\r\n          noOfExitLanes: null,\r\n          parcsManufacture: null,\r\n          dateOfLastMonthlyRateIncrease: null,\r\n          dateOfLastTransientRateIncrease: null,\r\n          typeOfFacility: null,\r\n          dueDay: null,\r\n          settlementDay: null,\r\n          iconName: null,\r\n          primaryContactId: null,\r\n          locationNotes: null,\r\n          active: null,\r\n          deleted: null\r\n        },\r\n        payDate: '2021-03-16T05:03:00.000',\r\n        payRevisionIdentifier: 'PR-REEF-2bfd49-210316170347',\r\n        payRevisionStatus: 'P',\r\n        approvedBy: null,\r\n        approvedOn: null,\r\n        comments: 'test',\r\n        type: 'credit'\r\n      }\r\n    ];\r\n\r\n    const modalData = {\r\n      icon: 'success',\r\n      text: 'Revision saved successfully',\r\n      delete: true,\r\n      buttonText: 'Close',\r\n      imagePath: 'assets/images/popup_images/success_popup.png'\r\n    };\r\n    spyOn(component, 'handleRevision').and.callThrough();\r\n    spyOn(authenticateService, 'createNewRevision').and.returnValue(\r\n      of(mockObj)\r\n    );\r\n    component.handleRevision();\r\n    authenticateService.createNewRevision(mockObj).subscribe((res) => {\r\n      expect(modalData).toBeDefined();\r\n    });\r\n    expect(component.handleRevision).toHaveBeenCalled();\r\n    expect(authenticateService.createNewRevision).toHaveBeenCalled();\r\n  }); */\r\n\r\n  it('should get services based on locations for credit', () => {\r\n    const object = [\r\n      {\r\n        id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n        serviceId: 'PA-1000428',\r\n        serviceIdName: 'Bank of America Tower Parking',\r\n        serviceType: 'Parking',\r\n        serviceGroupName: 'Parking',\r\n        realEstateName: 'Bank of America Tower',\r\n        realEstateNumber: 'US-FL-RE-1003115',\r\n        realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        openDate: null,\r\n        closeDate: null,\r\n        contractType: 'MANAGED',\r\n        companyId: 'PK001',\r\n        brandCode: 'CLH (PK1)',\r\n        applicableForDarma: true,\r\n        checked: false\r\n      },\r\n      {\r\n        id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd25',\r\n        serviceId: 'PA-1000428',\r\n        serviceIdName: 'Bank of America Tower Parking',\r\n        serviceType: 'Parking',\r\n        serviceGroupName: 'Parking',\r\n        realEstateName: 'Bank of America Tower',\r\n        realEstateNumber: 'US-FL-RE-1003115',\r\n        realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        openDate: null,\r\n        closeDate: null,\r\n        contractType: 'MANAGED',\r\n        companyId: 'PK001',\r\n        brandCode: 'CLH (PK1)',\r\n        applicableForDarma: true,\r\n        checked: false\r\n      }\r\n    ];\r\n\r\n    const mockEvent = {\r\n      source: {},\r\n      value: {\r\n        id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        locationID: 'US-FL-RE-1003115',\r\n        name: 'Bank of America Tower',\r\n        locationWithID: 'US-FL-RE-1003115 - Bank of America Tower'\r\n      }\r\n    };\r\n\r\n    component.selectedType = 'credit';\r\n    expect(component.serviceCodesByServiceTypeForCredit.length).toEqual(0);\r\n    spyOn(component, 'getChangeLocationvalue').and.callThrough();\r\n    spyOn(authenticateService, 'getServiceId').and.returnValue(of(object));\r\n    component.getChangeLocationvalue(mockEvent.value.id, 'credit');\r\n    authenticateService.getServiceId(mockEvent.value.id).subscribe((res) => {\r\n      component.serviceCodesByServiceTypeForCredit = res;\r\n    });\r\n    expect(component.getChangeLocationvalue).toHaveBeenCalled();\r\n    expect(authenticateService.getServiceId).toHaveBeenCalled();\r\n    // expect(component.serviceTypesByRealEstatesForCredit).toEqual(object);\r\n  });\r\n\r\n  it('should get services based on locations for debit', () => {\r\n    const object = [\r\n      {\r\n        id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd',\r\n        serviceId: 'PA-1000428',\r\n        serviceIdName: 'Bank of America Tower Parking',\r\n        serviceType: 'Parking',\r\n        serviceGroupName: 'Parking',\r\n        realEstateName: 'Bank of America Tower',\r\n        realEstateNumber: 'US-FL-RE-1003115',\r\n        realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        openDate: null,\r\n        closeDate: null,\r\n        contractType: 'MANAGED',\r\n        companyId: 'PK001',\r\n        brandCode: 'CLH (PK1)',\r\n        applicableForDarma: true,\r\n        checked: false\r\n      },\r\n      {\r\n        id: '670fc442-88b3-4fa6-92f1-6a1a7d0b82cd25',\r\n        serviceId: 'PA-1000428',\r\n        serviceIdName: 'Bank of America Tower Parking',\r\n        serviceType: 'Parking',\r\n        serviceGroupName: 'Parking',\r\n        realEstateName: 'Bank of America Tower',\r\n        realEstateNumber: 'US-FL-RE-1003115',\r\n        realEstateId: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        openDate: null,\r\n        closeDate: null,\r\n        contractType: 'MANAGED',\r\n        companyId: 'PK001',\r\n        brandCode: 'CLH (PK1)',\r\n        applicableForDarma: true,\r\n        checked: false\r\n      }\r\n    ];\r\n\r\n    const mockEvent = {\r\n      source: {},\r\n      value: {\r\n        id: '19b9f5d0-09f6-472a-8735-e2560e010503',\r\n        locationID: 'US-FL-RE-1003115',\r\n        name: 'Bank of America Tower',\r\n        locationWithID: 'US-FL-RE-1003115 - Bank of America Tower'\r\n      }\r\n    };\r\n\r\n    component.selectedType = 'debit';\r\n    expect(component.serviceCodesByServiceTypeForDebit.length).toEqual(0);\r\n    spyOn(component, 'getChangeLocationvalue').and.callThrough();\r\n    spyOn(authenticateService, 'getServiceId').and.returnValue(of(object));\r\n    component.getChangeLocationvalue(mockEvent.value.id, 'debit');\r\n    authenticateService.getServiceId(mockEvent.value.id).subscribe((res) => {\r\n      component.serviceCodesByServiceTypeForDebit = res;\r\n    });\r\n    expect(component.getChangeLocationvalue).toHaveBeenCalled();\r\n    expect(authenticateService.getServiceId).toHaveBeenCalled();\r\n    // expect(component.serviceTypesByRealEstatesForDebit).toEqual(object);\r\n  });\r\n\r\n  // it('should get brand code for reef', () => {\r\n  //   let brandIdentifier = 'AMR';\r\n  //   spyOn(component, 'returnBrandUniqueIdentifier').and.returnValue(brandIdentifier);\r\n  //   component.returnBrandUniqueIdentifier();\r\n  //   component.loggedUserDetails.brandCode = 'CLH (AmeriPark)'\r\n  //   expect(component.returnBrandUniqueIdentifier).toHaveBeenCalled();\r\n  // });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\revision-sources\\addrevision.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnInit' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnDestroy' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChangeDetectorRef' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Output' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EventEmitter' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserSessionService' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AuthenticateService' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ActivatedRoute' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":15,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SweetAlertService' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NgBlockUI' is defined but never used.","line":26,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Validators' is defined but never used.","line":27,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatCalendar' is defined but never used.","line":29,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDatepicker' is defined but never used.","line":29,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDateFormats' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Locations' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRevenueDTO' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IRevisionDTO' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatSelect' is defined but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'forkJoin' is defined but never used.","line":52,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MatDialog' is defined but never used.","line":53,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'revenueSourcesCheck' is defined but never used.","line":56,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IUser' is defined but never used.","line":57,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserResponseModel' is defined but never used.","line":58,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'style' is defined but never used.","line":62,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3370,3373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3370,3373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3391,3394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3391,3394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3410,3413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3410,3413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3432,3435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3432,3435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3454,3457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3454,3457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3563,3566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3563,3566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3592,3595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3592,3595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3714,3717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3714,3717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3777,3780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3777,3780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3827,3830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3827,3830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3878,3881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3878,3881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3928,3931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3928,3931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3975,3978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3975,3978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4021,4024],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4021,4024],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4063,4066],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4063,4066],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4104,4107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4104,4107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4152,4155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4152,4155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4199,4202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4199,4202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4254,4257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4254,4257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4281,4284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4281,4284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4391,4394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4391,4394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4424,4427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4424,4427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":192,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":192,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":196,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":196,"endColumn":12},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":202,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":202,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":240,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":240,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8702,8705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8702,8705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":261,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":261,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'selected' should be typed.","line":261,"column":26,"nodeType":"Identifier","messageId":"missingArgType","endLine":261,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'type' should be typed.","line":261,"column":36,"nodeType":"Identifier","messageId":"missingArgType","endLine":261,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'arrays' is assigned a value but never used.","line":263,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":263,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":284,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9782,9785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9782,9785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":322,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":322,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'selected' should be typed.","line":322,"column":25,"nodeType":"Identifier","messageId":"missingArgType","endLine":322,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'type' should be typed.","line":322,"column":35,"nodeType":"Identifier","messageId":"missingArgType","endLine":322,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":340,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":340,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11741,11744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11741,11744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":359,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12388,12391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12388,12391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":379,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":379,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'selected' should be typed with a non-any type.","line":379,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":379,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":379,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":379,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13012,13015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13012,13015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'type' should be typed.","line":379,"column":44,"nodeType":"Identifier","messageId":"missingArgType","endLine":379,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":394,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":394,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13583,13586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13583,13586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":418,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":418,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":428,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14623,14626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14623,14626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":445,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":445,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'selected' should be typed.","line":445,"column":25,"nodeType":"Identifier","messageId":"missingArgType","endLine":445,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'type' should be typed.","line":445,"column":35,"nodeType":"Identifier","messageId":"missingArgType","endLine":445,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15560,15563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15560,15563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":476,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":476,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":501,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":501,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'e' should be typed.","line":501,"column":22,"nodeType":"Identifier","messageId":"missingArgType","endLine":501,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":505,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":505,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'e' should be typed.","line":505,"column":21,"nodeType":"Identifier","messageId":"missingArgType","endLine":505,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":509,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":509,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'event' should be typed.","line":509,"column":12,"nodeType":"Identifier","messageId":"missingArgType","endLine":509,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":515,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":515,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":518,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":518,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17116,17119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17116,17119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":522,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":522,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17348,17351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17348,17351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":560,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":560,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19076,19079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19076,19079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used.","line":599,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":599,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":690,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":690,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":697,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":697,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":702,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":702,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":711,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":711,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mode' is defined but never used.","line":711,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":711,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":715,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":715,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":727,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":727,"endColumn":16}],"errorCount":0,"warningCount":93,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  Inject,\r\n  OnDestroy,\r\n  ChangeDetectorRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { UserSessionService } from '../../../shared/services/user-session.services';\r\nimport { AuthenticateService } from 'src/app/shared/services/AuthService';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n  trigger,\r\n  style,\r\n  state,\r\n  animate,\r\n  transition,\r\n  query,\r\n  stagger\r\n} from '@angular/animations';\r\nimport { SweetAlertService } from 'src/app/shared/services/sweet-alert.service';\r\nimport { BlockUI, NgBlockUI } from 'ng-block-ui';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport * as moment from 'moment';\r\nimport { MatCalendar, MatDatepicker } from '@angular/material/datepicker';\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_FORMATS,\r\n  MatDateFormats\r\n} from '@angular/material/core';\r\nimport {\r\n  Locations,\r\n  IRevenueDTO,\r\n  IRevisionDTO\r\n} from 'src/app/shared/model/revenueSource.model';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\n// material dependencies\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport {\r\n  DATE_FORMATS,\r\n  MATERIAL_DATEPICKER_FORMATS,\r\n  REVISION_STATUS,\r\n  REVISION_TYPE,\r\n  TRANSACTION_TYPE\r\n} from 'src/app/shared/constants/app-constants';\r\nimport { Subject, forkJoin } from 'rxjs';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { DialogDataExampleDialog } from 'src/app/shared/common-components/custom-model/custom-dialog';\r\nimport { customModalData } from 'src/app/shared/model/applicationModel';\r\nimport { revenueSourcesCheck } from 'src/app/shared/constants/utils';\r\nimport { IUser } from 'src/app/shared/model/userModel';\r\nimport { UserResponseModel } from 'src/app/shared/model/loginApiResponse.model';\r\n// import { errorMonitor } from 'events';\r\n\r\nclass CustomDateAdapter extends MomentDateAdapter {\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow') {\r\n    return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-addrevision',\r\n  templateUrl: './addrevision.component.html',\r\n  styleUrls: ['./addrevision.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\r\n      state('expanded', style({ height: '*' })),\r\n      transition(\r\n        'expanded <=> collapsed',\r\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')\r\n      )\r\n    ]),\r\n    trigger('logoAni', [\r\n      transition('* => *', [\r\n        query(':enter', style({ opacity: 0 }), { optional: true }),\r\n        query(\r\n          ':enter',\r\n          stagger('100ms', [animate('1s', style({ opacity: 1 }))]),\r\n          { optional: true }\r\n        )\r\n      ])\r\n    ])\r\n  ],\r\n  providers: [\r\n    { provide: DateAdapter, useClass: CustomDateAdapter },\r\n    { provide: MAT_DATE_FORMATS, useValue: MATERIAL_DATEPICKER_FORMATS }\r\n  ]\r\n})\r\nexport class AddrevisionComponent implements OnInit {\r\n  @BlockUI() blockUI: NgBlockUI;\r\n  @ViewChild('locationSelect') locationSelect: MatSelect;\r\n  addRevisionForm: FormGroup;\r\n  loggedUserDetails: UserResponseModel;\r\n  BrandResponse: any = null;\r\n  role: any;\r\n  brandCode: any;\r\n  approvedUser: any;\r\n  selectedType: any;\r\n  debitAmount: number;\r\n  creditAmount: number;\r\n  notMatched = false;\r\n  payRevisionUniqueIdentifier: any;\r\n  realEstateLocations: any[] = [];\r\n  public defaultDate = new Date(\r\n    moment().format(DATE_FORMATS.DATE_PICKER_FORMAT)\r\n  );\r\n  currentDate: any = this.defaultDate;\r\n  serviceTypesByRealEstatesForCredit: any[] = [];\r\n  serviceTypesByRealEstatesForDebit: any[] = [];\r\n  serviceCodesByServiceTypeForCredit: any[] = [];\r\n  serviceCodesByServiceTypeForDebit: any[] = [];\r\n  jobCodesByServiceCodeForCredit: any[] = [];\r\n  jobCodesByServiceCodeForDebit: any[] = [];\r\n  glCodesByJobCodeForCredit: any[] = [];\r\n  glCodesByJobCodeForDebit: any[] = [];\r\n  tenderTypesByServiceIdForCredit: any[] = [];\r\n  tenderTypesByServiceIdForDebit: any[] = [];\r\n  public filteredLocations: ReplaySubject<any[]> = new ReplaySubject<any[]>(1);\r\n  private _onDestroy = new Subject<void>();\r\n  exampleHeader = searchCalenderHeader;\r\n  apiCalls: any[] = [];\r\n  finalServiceType: any[] = [];\r\n  revisiontype: string;\r\n  isPayroll = true;\r\n  isRevenue = false;\r\n  isExpense = false;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private dialog: MatDialog,\r\n    private userSessionService: UserSessionService,\r\n    private alertService: SweetAlertService,\r\n    private authService: AuthenticateService,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.addRevisionForm = new FormGroup({\r\n      revisionLocationCredit: new FormControl(null),\r\n      revisionLocationDebit: new FormControl(null),\r\n      revisionServiceIdCredit: new FormControl(null),\r\n      revisionServiceIdDebit: new FormControl(null),\r\n      revisionServiceCodeCredit: new FormControl(null),\r\n      revisionServiceCodeDebit: new FormControl(null),\r\n      revisionJobCodeCredit: new FormControl(null),\r\n      revisionJobCodeDebit: new FormControl(null),\r\n      revisionGlCode_Details_IdCredit: new FormControl(null),\r\n      revisionGlCode_Details_IdDebit: new FormControl(null),\r\n      revisionAmountCredit: new FormControl(null),\r\n      revisionAmountDebit: new FormControl(null),\r\n      revisionBillableCredit: new FormControl(null),\r\n      revisionBillableDebit: new FormControl(null),\r\n      revisionCommentsCredit: new FormControl(null),\r\n      revisionCommentsDebit: new FormControl(null),\r\n      locFilterCtrl: new FormControl(''),\r\n      revisionTenderTypeCredit: new FormControl(null),\r\n      revisionTenderTypeDebit: new FormControl(null)\r\n    });\r\n\r\n    this.userSessionService?.currentUser?.subscribe(\r\n      (res: UserResponseModel) => {\r\n        this.loggedUserDetails = res;\r\n      }\r\n    );\r\n    this.userSessionService?.allReefBrands?.subscribe(\r\n      (response) => (this.BrandResponse = response)\r\n    );\r\n\r\n    this.role = this.loggedUserDetails?.authorities[0]?.code;\r\n    this.getLocationsBasedOnBrand();\r\n\r\n    /** New changes */\r\n    this.addRevisionForm?.controls?.locFilterCtrl?.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterLocations();\r\n      });\r\n\r\n    this.revisiontype = this.route?.snapshot?.queryParamMap?.get(\r\n      'revisionType'\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setInitialValue();\r\n  }\r\n\r\n  getGUID() {\r\n    return Math.floor((1 + Math.random()) * 0x1000000)\r\n      .toString(16)\r\n      .substring(1);\r\n  }\r\n\r\n  getLocationsBasedOnBrand() {\r\n    const payloadObj = { id: '', code: '' };\r\n    payloadObj.id = this.loggedUserDetails?.brandId;\r\n    payloadObj.code = this.loggedUserDetails?.brandCode;\r\n    this.blockUI.start('Loading....');\r\n    this.authService.getLocationsBasedOnBrand(payloadObj).subscribe(\r\n      (response: Locations[]) => {\r\n        this.realEstateLocations = response;\r\n        for (const user of this.realEstateLocations) {\r\n          user.locationWithID = user?.locationID + ' - ' + user?.name;\r\n        }\r\n        this.filteredLocations?.next(this.realEstateLocations?.slice());\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        if (error && error?.status !== 417) {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n        this.blockUI.stop();\r\n      }\r\n    );\r\n  }\r\n\r\n  private setInitialValue() {\r\n    this.filteredLocations\r\n      .pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // setting the compareWith property to a comparison function\r\n        // triggers initializing the selection according to the initial value of\r\n        // the form control (i.e. _initializeSelection())\r\n        // this needs to be done after the filteredBanks are loaded initially\r\n        // and after the mat-option elements are available\r\n        this.locationSelect.compareWith = (a: Locations, b: Locations) =>\r\n          a && b && a.id === b.id;\r\n      });\r\n  }\r\n\r\n  filterLocations() {\r\n    if (!this.realEstateLocations) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.addRevisionForm?.controls?.locFilterCtrl?.value;\r\n    if (!search) {\r\n      this.filteredLocations?.next(this.realEstateLocations?.slice());\r\n      return;\r\n    } else {\r\n      search = search?.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredLocations?.next(\r\n      this.realEstateLocations?.filter(\r\n        (location: any) =>\r\n          location?.locationWithID?.toLowerCase().indexOf(search) > -1\r\n      )\r\n    );\r\n  }\r\n\r\n  getChangeLocationvalue(selected, type) {\r\n    this.selectedType = type;\r\n    const arrays = [];\r\n    this.apiCalls.length = 0;\r\n    this.apiCalls = [];\r\n    this.finalServiceType.length = 0;\r\n    this.finalServiceType = [];\r\n\r\n    if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n      this.serviceTypesByRealEstatesForCredit = [];\r\n      this.serviceCodesByServiceTypeForCredit = [];\r\n      this.jobCodesByServiceCodeForCredit = [];\r\n      this.glCodesByJobCodeForCredit = [];\r\n      this.tenderTypesByServiceIdForCredit = [];\r\n    } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n      this.serviceTypesByRealEstatesForDebit = [];\r\n      this.serviceCodesByServiceTypeForDebit = [];\r\n      this.jobCodesByServiceCodeForDebit = [];\r\n      this.glCodesByJobCodeForDebit = [];\r\n      this.tenderTypesByServiceIdForDebit = [];\r\n    }\r\n    this.blockUI.start('Loading....');\r\n    this.authService.getServiceId(selected?.value?.id).subscribe(\r\n      (response: any) => {\r\n        this.blockUI.start('Loading....');\r\n        if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n          this.serviceTypesByRealEstatesForCredit = response;\r\n          for (const item of this.serviceTypesByRealEstatesForCredit) {\r\n            item.serviceNameWithID =\r\n              item.serviceId +\r\n              ' - ' +\r\n              item.serviceIdName +\r\n              '(' +\r\n              item.realEstateNumber +\r\n              ')';\r\n          }\r\n        } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n          this.serviceTypesByRealEstatesForDebit = response;\r\n          for (const item of this.serviceTypesByRealEstatesForDebit) {\r\n            item.serviceNameWithID =\r\n              item.serviceId +\r\n              ' - ' +\r\n              item.serviceIdName +\r\n              '(' +\r\n              item.realEstateNumber +\r\n              ')';\r\n          }\r\n        }\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        if (error && error?.status !== 417) {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n        this.blockUI.stop();\r\n      }\r\n    );\r\n    this.blockUI.stop();\r\n  }\r\n\r\n  getChangeServiceValue(selected, type) {\r\n    this.selectedType = type;\r\n    // if(selected?.value) {\r\n\r\n    if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n      this.serviceCodesByServiceTypeForCredit = [];\r\n      this.jobCodesByServiceCodeForCredit = [];\r\n      this.glCodesByJobCodeForCredit = [];\r\n      this.tenderTypesByServiceIdForCredit = [];\r\n    } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n      this.serviceCodesByServiceTypeForDebit = [];\r\n      this.jobCodesByServiceCodeForDebit = [];\r\n      this.glCodesByJobCodeForDebit = [];\r\n      this.tenderTypesByServiceIdForDebit = [];\r\n    }\r\n\r\n    this.blockUI.start('Loading....');\r\n    this.authService.getServiceCodes(selected?.value?.serviceType).subscribe(\r\n      (response: any) => {\r\n        if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n          this.serviceCodesByServiceTypeForCredit = response;\r\n        } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n          this.serviceCodesByServiceTypeForDebit = response;\r\n        }\r\n      },\r\n      (error) => {\r\n        if (error && error?.status !== 417) {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      }\r\n    );\r\n\r\n    if (this.revisiontype === 'Revenue') {\r\n      this.authService\r\n        .getTenderDetailsfromapi({ id: selected?.value?.id })\r\n        .subscribe(\r\n          (response: any) => {\r\n            if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n              this.tenderTypesByServiceIdForCredit = response['body'];\r\n            } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n              this.tenderTypesByServiceIdForDebit = response['body'];\r\n            }\r\n          },\r\n          (error) => {\r\n            if (error && error?.status !== 417) {\r\n              this.blockUI.stop();\r\n              this.alertService.showErrorInformation(error);\r\n            }\r\n          }\r\n        );\r\n    }\r\n\r\n    this.blockUI.stop();\r\n    // }\r\n  }\r\n\r\n  getChangeServiceCodevalue(selected: any, type) {\r\n    this.selectedType = type;\r\n    // if(selected.value) {\r\n\r\n    if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n      this.jobCodesByServiceCodeForCredit = [];\r\n      this.glCodesByJobCodeForCredit = [];\r\n    } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n      this.jobCodesByServiceCodeForDebit = [];\r\n      this.glCodesByJobCodeForDebit = [];\r\n    }\r\n\r\n    this.blockUI.start('Loading....');\r\n    if (this.revisiontype !== 'Expense') {\r\n      this.authService.getJobCodes(selected?.value?.serviceCode).subscribe(\r\n        (response: any) => {\r\n          if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n            this.jobCodesByServiceCodeForCredit = response;\r\n          } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n            this.jobCodesByServiceCodeForDebit = response;\r\n          }\r\n        },\r\n        (error) => {\r\n          if (error && error?.status !== 417) {\r\n            this.blockUI.stop();\r\n            this.alertService.showErrorInformation(error);\r\n          }\r\n        }\r\n      );\r\n      this.blockUI.stop();\r\n    } else {\r\n      this.getGLCodeByRevisionType();\r\n      this.blockUI.stop();\r\n    }\r\n\r\n    this.blockUI.stop();\r\n    // }\r\n  }\r\n\r\n  getGLCodeByRevisionType() {\r\n    if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n      this.glCodesByJobCodeForCredit = [];\r\n    } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n      this.glCodesByJobCodeForDebit = [];\r\n    }\r\n\r\n    this.blockUI.start('Loading....');\r\n\r\n    this.authService.getGLCodesByRevisionType(REVISION_TYPE.EXPENSE).subscribe(\r\n      (response: any) => {\r\n        if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n          this.glCodesByJobCodeForCredit = response;\r\n        } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n          this.glCodesByJobCodeForDebit = response;\r\n        }\r\n      },\r\n      (error) => {\r\n        if (error && error?.status !== 417) {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      }\r\n    );\r\n    this.blockUI.stop();\r\n  }\r\n\r\n  getChangeJobCodevalue(selected, type) {\r\n    this.selectedType = type;\r\n    // if(selected.value) {\r\n\r\n    if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n      this.glCodesByJobCodeForCredit = [];\r\n    } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n      this.glCodesByJobCodeForDebit = [];\r\n    }\r\n\r\n    this.blockUI.start('Loading....');\r\n    this.authService.getGlCodes(selected?.value?.jobCode).subscribe(\r\n      (response: any) => {\r\n        if (this.selectedType === TRANSACTION_TYPE.CREDIT) {\r\n          this.glCodesByJobCodeForCredit = response;\r\n        } else if (this.selectedType === TRANSACTION_TYPE.DEBIT) {\r\n          this.glCodesByJobCodeForDebit = response;\r\n        }\r\n        this.blockUI.stop();\r\n      },\r\n      (error) => {\r\n        if (error && error?.status !== 417) {\r\n          this.blockUI.stop();\r\n          this.alertService.showErrorInformation(error);\r\n        }\r\n      }\r\n    );\r\n    this.blockUI.stop();\r\n    // }\r\n  }\r\n\r\n  returnBrandUniqueIdentifier() {\r\n    const brandCode = this.loggedUserDetails?.brandCode;\r\n    let brandIdentifier = 'REEF';\r\n    switch (brandCode) {\r\n      case 'CLH (AmeriPark)':\r\n        brandIdentifier = 'AMR';\r\n        break;\r\n      case 'CLH (Lanier)':\r\n        brandIdentifier = 'LAN';\r\n        break;\r\n      case 'CLH (PK1)':\r\n        brandIdentifier = 'PK1';\r\n        break;\r\n      case 'Impark':\r\n        brandIdentifier = 'IMP';\r\n        break;\r\n      case 'Republic Parking':\r\n        brandIdentifier = 'REP';\r\n        break;\r\n      default:\r\n        brandIdentifier = 'REEF';\r\n    }\r\n    return brandIdentifier;\r\n  }\r\n\r\n  handleCreditAmount(e) {\r\n    this.creditAmount = e.target.value;\r\n  }\r\n\r\n  handleDebitAmount(e) {\r\n    this.debitAmount = e.target.value;\r\n  }\r\n\r\n  keyPress(event) {\r\n    if (event.keyCode === 45 || event.keyCode === 43) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  handleRevision() {\r\n    if (this.creditAmount === this.debitAmount) {\r\n      this.blockUI.start('Loading....');\r\n      const arr: any = [];\r\n      const timeStamp = moment().format('YYMMDDHHMMSS');\r\n      this.payRevisionUniqueIdentifier = `PR-${this.returnBrandUniqueIdentifier()}-${this.getGUID()}-${timeStamp}`;\r\n      // credit data\r\n      const creditData: any = {};\r\n      creditData.location = this.addRevisionForm.value?.revisionLocationCredit;\r\n      creditData.service = this.addRevisionForm.value?.revisionServiceIdCredit;\r\n      creditData.serviceCodes = this.addRevisionForm.value?.revisionServiceCodeCredit;\r\n      creditData.amount = Number(\r\n        this.addRevisionForm.value?.revisionAmountCredit\r\n      );\r\n      creditData.jobCodes =\r\n        this.revisiontype !== 'Expense'\r\n          ? this.addRevisionForm.value?.revisionJobCodeCredit\r\n          : null;\r\n      creditData.payDate = moment(this.defaultDate).format(\r\n        DATE_FORMATS.DATE_FORMAT\r\n      );\r\n      creditData.payRevisionStatus = REVISION_STATUS.PENDING;\r\n      creditData.glCodeDetails = this.addRevisionForm.value?.revisionGlCode_Details_IdCredit;\r\n      creditData.payRevisionIdentifier = this.payRevisionUniqueIdentifier;\r\n      creditData.billable =\r\n        this.revisiontype !== 'Revenue'\r\n          ? this.addRevisionForm.value?.revisionBillableCredit === 'billable'\r\n            ? 'B'\r\n            : 'N'\r\n          : null;\r\n      creditData.reasonForRequest = this.addRevisionForm.value?.revisionCommentsCredit;\r\n      creditData.approvedBy = null;\r\n      creditData.approvedOn = null;\r\n      creditData.transactionType = TRANSACTION_TYPE.CREDIT;\r\n      creditData.revisionType =\r\n        this.revisiontype === 'Payroll'\r\n          ? REVISION_TYPE.PAYROLL\r\n          : this.revisiontype === 'Expense'\r\n          ? REVISION_TYPE.EXPENSE\r\n          : REVISION_TYPE.REVENUE;\r\n      creditData.tenderTypes =\r\n        this.revisiontype === 'Revenue'\r\n          ? this.addRevisionForm.value?.revisionTenderTypeCredit?.tenderTypesDTO\r\n          : null;\r\n      // Debit data\r\n      const debitData: any = {};\r\n      debitData.location = this.addRevisionForm.value?.revisionLocationDebit;\r\n      debitData.service = this.addRevisionForm.value?.revisionServiceIdDebit;\r\n      debitData.serviceCodes = this.addRevisionForm.value?.revisionServiceCodeDebit;\r\n      debitData.amount = Number(\r\n        this.addRevisionForm.value?.revisionAmountDebit\r\n      );\r\n      debitData.jobCodes =\r\n        this.revisiontype !== 'Expense'\r\n          ? this.addRevisionForm.value?.revisionJobCodeDebit\r\n          : null;\r\n      debitData.payDate = moment(this.defaultDate).format(\r\n        DATE_FORMATS.DATE_FORMAT\r\n      );\r\n      debitData.payRevisionStatus = REVISION_STATUS.PENDING;\r\n      debitData.glCodeDetails = this.addRevisionForm.value?.revisionGlCode_Details_IdDebit;\r\n      debitData.payRevisionIdentifier = this.payRevisionUniqueIdentifier;\r\n      debitData.billable =\r\n        this.revisiontype !== 'Revenue'\r\n          ? this.addRevisionForm.value?.revisionBillableDebit === 'billable'\r\n            ? 'B'\r\n            : 'N'\r\n          : null;\r\n      debitData.reasonForRequest = this.addRevisionForm?.value?.revisionCommentsDebit;\r\n      debitData.approvedBy = null;\r\n      debitData.approvedOn = null;\r\n      debitData.transactionType = TRANSACTION_TYPE.DEBIT;\r\n      debitData.revisionType =\r\n        this.revisiontype === 'Payroll'\r\n          ? REVISION_TYPE.PAYROLL\r\n          : this.revisiontype === 'Expense'\r\n          ? REVISION_TYPE.EXPENSE\r\n          : REVISION_TYPE.REVENUE;\r\n      debitData.tenderTypes =\r\n        this.revisiontype === 'Revenue'\r\n          ? this.addRevisionForm?.value?.revisionTenderTypeDebit?.tenderTypesDTO\r\n          : null;\r\n      arr.push(creditData, debitData);\r\n      this.authService.createNewRevision(arr).subscribe(\r\n        (res) => {\r\n          this.blockUI.stop();\r\n          const modalData = new customModalData();\r\n          modalData.icon = 'success';\r\n          modalData.text = 'Revision saved successfully';\r\n          modalData.delete = true;\r\n          modalData.buttonText = 'Close';\r\n          modalData.imagePath = 'assets/images/popup_images/success_popup.png';\r\n          const dialogRef = this.dialog.open(DialogDataExampleDialog, {\r\n            data: modalData\r\n          });\r\n          dialogRef.afterClosed().subscribe((result) => {\r\n            if (result) {\r\n              this.router.navigate(['/app/revisions'], {\r\n                queryParams: { revisionType: this.revisiontype }\r\n              });\r\n            }\r\n            this.addRevisionForm.reset();\r\n          });\r\n        },\r\n        (error) => {\r\n          if (error && error?.status !== 417) {\r\n            this.blockUI.stop();\r\n            this.alertService.showErrorInformation(error);\r\n          }\r\n        }\r\n      );\r\n      this.blockUI.stop();\r\n    } else {\r\n      this.notMatched = true;\r\n    }\r\n  }\r\n}\r\n\r\n/** Custom header component for datepicker. */\r\n@Component({\r\n  selector: 'example-header',\r\n  styles: [\r\n    `\r\n      .example-header {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 0.5em;\r\n      }\r\n\r\n      .example-header-label {\r\n        flex: 1;\r\n        height: 1em;\r\n        font-weight: 500;\r\n        text-align: center;\r\n      }\r\n\r\n      .example-double-arrow .mat-icon {\r\n        margin: -22%;\r\n      }\r\n    `\r\n  ],\r\n  template: `\r\n    <div class=\"example-header\">\r\n      <button mat-icon-button (click)=\"previousClicked()\">\r\n        <mat-icon>keyboard_arrow_left</mat-icon>\r\n      </button>\r\n      <span\r\n        role=\"button\"\r\n        (click)=\"openaYear('year')\"\r\n        class=\"example-header-label cursor-pointer\"\r\n        >{{ periodLabel }}</span\r\n      >\r\n\r\n      <button mat-icon-button (click)=\"nextClicked()\">\r\n        <mat-icon>keyboard_arrow_right</mat-icon>\r\n      </button>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class searchCalenderHeader<D> implements OnDestroy {\r\n  private _destroyed = new Subject<void>();\r\n\r\n  constructor(\r\n    private _datePicker: MatDatepicker<D>,\r\n    private _calendar: MatCalendar<D>,\r\n    private _dateAdapter: DateAdapter<D>,\r\n    @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n    cdr: ChangeDetectorRef\r\n  ) {\r\n    _calendar.stateChanges\r\n      .pipe(takeUntil(this._destroyed))\r\n      .subscribe(() => cdr.markForCheck());\r\n  }\r\n\r\n  public todayClicked() {\r\n    this._calendar.activeDate = this._dateAdapter.today();\r\n    this._calendar._dateSelected(this._calendar.activeDate);\r\n    this._datePicker.select(this._dateAdapter.today());\r\n    this._datePicker.close();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  get periodLabel() {\r\n    return this._dateAdapter\r\n      .format(\r\n        this._calendar.activeDate,\r\n        this._dateFormats.display.monthYearLabel\r\n      )\r\n      .toLocaleUpperCase();\r\n  }\r\n\r\n  public openaYear(mode: 'month' | 'year') {\r\n    this._calendar.currentView = 'multi-year';\r\n  }\r\n\r\n  previousClicked() {\r\n    // mode: 'month' | 'year' | 'multi-year'\r\n    let mode = 'month';\r\n    if (this._calendar.currentView === 'multi-year') {\r\n      mode = 'year';\r\n    }\r\n    this._calendar.activeDate =\r\n      mode === 'month'\r\n        ? this._dateAdapter.addCalendarMonths(this._calendar.activeDate, -1)\r\n        : this._dateAdapter.addCalendarYears(this._calendar.activeDate, -1);\r\n  }\r\n\r\n  nextClicked() {\r\n    // mode: 'month' | 'year' | 'multi-year'\r\n    let mode = 'month';\r\n    if (this._calendar.currentView === 'multi-year') {\r\n      mode = 'year';\r\n    }\r\n    this._calendar.activeDate =\r\n      mode === 'month'\r\n        ? this._dateAdapter.addCalendarMonths(this._calendar.activeDate, 1)\r\n        : this._dateAdapter.addCalendarYears(this._calendar.activeDate, 1);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\app\\views\\main-layout\\revision-sources\\revision-sources.module.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·AddrevisionComponent,·searchCalenderHeader·` with `␍⏎··AddrevisionComponent,␍⏎··searchCalenderHeader␍⏎`","line":7,"column":9,"nodeType":null,"endLine":7,"endColumn":53,"fix":{"range":[393,437],"text":"\r\n  AddrevisionComponent,\r\n  searchCalenderHeader\r\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":58,"column":1,"nodeType":null,"endLine":58,"endColumn":1,"fix":{"range":[2136,2136],"text":"  "}}],"errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n// import { AddUpdateSourceComponent } from './add-update-source/add-update-source.component';\r\nimport { AddrevisionComponent, searchCalenderHeader } from './addrevision.component';\r\n\r\nimport { SharedModule } from '../../../shared/shared.module';\r\n\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\r\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\n\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@NgModule({\r\n  declarations: [AddrevisionComponent, searchCalenderHeader],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatGridListModule,\r\n    MatRippleModule,\r\n    CdkTableModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatNativeDateModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatPaginatorModule,\r\n    MatCardModule,\r\n    NgxMatSelectSearchModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\r\n      useValue: { appearance: 'fill' }\r\n    }\r\n  ],\r\n//   entryComponents: [ AddrevenueComponent, ExampleHeader ],\r\n  exports: [TranslateModule],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class RevisionSourcesModule {}\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\environments\\environment.prod.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\environments\\environment.qa.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Insert `␍⏎···`","line":67,"column":25,"nodeType":null,"endLine":67,"endColumn":25,"fix":{"range":[3186,3186],"text":"\r\n   "}}],"errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  Env: '',\r\n  production: false,\r\n  SIGN_IN: 'data/Users.json',\r\n  CLIENT_ID: 'DARMA_APP',\r\n  CLIENT_SECRET: 'lInXLgx6HbF9FFq1ZQN8iSEnhzO3JVuf',\r\n  API_KEY: 'F5A278ED-4FA3-44AC-A515-F8671D5D7774',\r\n  LOGIN_URI:\r\n    'https://darma-api-gateway-qa.reefplatform.com/reef/lmr/ldap/oauth2/v1/token',\r\n  LOGOUT_URI:\r\n    'https://darma-api-gateway-qa.reefplatform.com/reef/lmr/ldap/oauth2/v1/logout',\r\n  LMR_BASE_URI: 'https://darma-api-gateway-qa.reefplatform.com/reef/lmr/',\r\n  DARMA_BASE_URI: 'https://darma-api-gateway-qa.reefplatform.com/reef/darma/',\r\n\r\n  //LMR APIs\r\n  MANAGE_LOCATION: 'system2/api/v1/location',\r\n  GET_LOCATIONS: 'system2/api/v1/locations',\r\n  GET_ONLY_LOCATIONS: 'system2/api/v1/ddlocations',\r\n  GET_DUEFORLOCATION: 'system2/api/v1/ddduetolocations',\r\n  REVENUE_TYPES: 'system2/api/v1/revenuetypes',\r\n  TENDER_TYPES: 'system2/api/v1/tendertypes',\r\n  BANK_ACCOUNTS: 'system2/api/v1/bankaccounts',\r\n  BANK_ACCOUNT_LOCATION_LINK: 'system2/api/v1/bankAccountslocationlinks',\r\n  TENDER_TYPE_LOCATION_LINK: 'system2/api/v1/tendertypeslocationlinks',\r\n  REVENUE_TYPE_LOCATION_LINK: 'system2/api/v1/revenuetypeslocationlinks',\r\n  BANK_ACCOUNT_SERVICEID_LINK: 'system2/api/v1/bankAccountsservicelinks',\r\n  TENDER_TYPE_SERVICEID_LINK: 'system2/api/v1/tendertypesserviceidlinks',\r\n  REVENUE_TYPE_SERVICEID_LINK: 'system2/api/v1/revenuetypesserviceidlinks',\r\n  SEARCH_LOCATIONS: 'system2/api/v1/searchlocation',\r\n  GET_ROLES: 'system2/api/v1/roles',\r\n  GET_USERS: 'system2/api/v1/users',\r\n  MANAGE_USER: 'system2/api/v1/user',\r\n  SERVCICEID_BASED_ON_LOCATION: 'system2/api/v1/serviceid/getbylocationid',\r\n\r\n  //DARMA APIs\r\n  GET_SERVICEID: 'system2/api/v1/servciceid',\r\n  REVENUES: 'system2/api/v1/revenues',\r\n  MANAGE_REVENUES: 'system2/api/v1/revenue',\r\n  SEARCH_REVENUES: 'system2/api/v1/searchrevenue',\r\n  SEARCH_RECONCILE: 'system2/api/v1/searchreconcile',\r\n  SEARCH_NAVISION: 'system2/api/v1/searchnavision',\r\n  NEW_SEARCH_NAVISION: 'system2/api/v1/searchnavisionnew',\r\n  GET_SOURCE: 'system2/api/v1/source',\r\n  EXPORT_SOURCE: 'system2/api/v1/source/export',\r\n  MANAGE_RECONCILE: 'system2/api/v1/source/reconcile',\r\n  MANAGE_NAVISION: 'system2/api/v1/source/navision',\r\n  EXPORT_NAVISION: 'system2/api/v1/navision/export',\r\n  NEW_EXPORT_NAVISION: 'system2/api/v1/navisionnew/export',\r\n  EXPORT_PCI: 'system2/api/v1/navisionpci/export',\r\n  RUN_PCI: 'system2/api/v1/navisionpci',\r\n  GET_REVENUE_DEPOID: 'system2/api/v1/revenuesbydepid',\r\n  MARK_FOR_CORRECTION: 'system2/api/v1/revenue/markforcorrection',\r\n  GET_REVENUE_NOTES: 'system2/api/v1/revenuenote',\r\n  COMBINE_DEPOSIT: 'system2/api/v1/combinedeposits',\r\n  LOCK_UNLOCK: 'system3/api/v1/revenueLock',\r\n  CHECK_LOCK: 'system3/api/v1/checklock',\r\n  GET_ALL_BRANDS: 'system2/api/v1/brands',\r\n  BRAND_LOCATIONS: 'system2/api/v1/ddbrandlocations',\r\n  USER_LOCATION_LINK: 'system2/api/v1/userLocationLink/location',\r\n\r\n  //Pay Revision APIs\r\n\r\n  PAY_REVISION_BASE_URI: 'https://darma-api-gateway-qa.reefplatform.com/reef/payrevision/',\r\n  GET_ALL_PAYREVISIONS_LIST: 'system2/payrevision/api/allpayrevision/type',\r\n  SERVICECODE_BASED_ON_SERVICE_TYPE:\r\n    'system2/payrevision/api/servicecodes/getbyserviceidtype',\r\n  JOBCODES_BASED_ON_SERVICE_CODE:\r\n    'system2/payrevision/api/jobcodes/getbyservicecode',\r\n  GL_BASED_ON_JOB_CODE: 'system2/payrevision/api/GLCodeDetailsById',\r\n  ADD_NEW_REVISION: 'system2/payrevision/api/payrevision',\r\n  GET_LIST_BY_SEARCH: 'system2/api/v1/searchPayrollRevision',\r\n  GL_CODES_BY_REVISION_TYPE: 'system2/payrevision/api/glcodes/getbyrevisiontype'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\environments\\environment.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\main.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":32}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule)\r\n  .catch((err) => console.error(err));\r\n","usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\polyfills.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\REEF\\DARMA_DEV_STAG_PRD\\darma_dev\\src\\test.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]